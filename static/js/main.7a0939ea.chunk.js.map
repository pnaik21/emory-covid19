{"version":3,"sources":["components/AppBar.js","components/MapProvider.js","utils.js","components/useGeographies.js","components/Geographies.js","components/Geography.js","components/ComposableMap.js","components/Marker.js","components/Annotation.js","components/Notes.js","components/USMap.js","components/StateMap.js","components/CountyReport.js","components/CountyCompare.js","components/AboutUs.js","components/App.js","index.js"],"names":["AppBar","props","history","useHistory","Menu","borderless","fixed","Container","Item","as","header","onClick","push","style","fontWeight","color","lineHeight","active","menu","content","name","position","Image","size","src","geoPath","d3Geo","projections","MapContext","createContext","MapProvider","width","height","offsetX","offsetY","projection","projectionConfig","restProps","center","cx","cy","rotate","rx","ry","rz","parallels","p1","p2","s","scale","projMemo","useMemo","scl","proj","translate","forEach","d","makeProjection","useCallback","value","path","Provider","getFeatures","geographies","parseGeographies","Array","isArray","feats","feature","objects","Object","keys","features","useGeographies","geography","useContext","useState","setGeographies","useEffect","url","window","fetch","then","res","ok","Error","statusText","json","catch","error","console","log","geos","map","i","rsmKey","svgPath","prepareFeatures","Geographies","children","className","length","memo","onMouseEnter","onMouseLeave","onMouseDown","onMouseUp","onFocus","onBlur","isPressed","setPressed","isFocused","setFocus","tabIndex","evt","ComposableMap","Marker","coordinates","x","y","transform","Annotation","subject","connectorProps","dx","dy","curve","connectorPath","curvature","curveX","curveY","createConnectorPath","fill","stroke","Notes","paddingTop","Divider","Grid","Row","Column","fontSize","columns","List","href","hidden","MapLabels","offsets","VT","NH","MA","RI","CT","NJ","DE","MD","DC","geo","centroid","geoCentroid","cur","stateLabels","find","val","id","key","indexOf","textAnchor","alignmentBaseline","USMap","stateName","setStateName","fips","setFips","tooltipContent","setTooltipContent","dataFltrd","setDataFltrd","data","setData","date","setDate","setStateLabels","colorScale","setColorScale","colorPalette","_","filter","k","Population","black","covidmortality","cs","scaleQuantile","domain","range","scaleMap","each","marginTop","minWidth","Breadcrumb","Section","Header","Content","Subheader","strokeWidth","data-tip","stateFips","substring","configMatched","configs","padding","left","right","top","bottom","orientation","sortKey","datum","fillOpacity","label","dependentAxis","axisLabel","tickCount","tickFormat","Math","round","Loader","inline","BarChart","colors","theme","VictoryTheme","material","domainPadding","ylog","minDomain","containerComponent","responsive","text","title","tickLabels","horizontal","barRatio","labels","var","countyFips","labelComponent","StateMap","useParams","config","setConfig","setCountyFips","countyName","setCountyName","dataTS","setDataTS","countyMost","mortalityMA","v","fips2county","link","properties","COUNTYFP","tickValues","t","Date","toLocaleDateString","ScatterChart","xlog","showLegend","varMap","rescaleX","CountyReport","cases","deaths","covidMetric","setCovidMetric","setVarMap","takeRight","Statistic","Value","toLocaleString","Label","paddingLeft","centered","Table","striped","compact","basic","HeaderCell","Body","Cell","isNaN","CountyCompare","setStateFips","measureA","setMeasureA","measureB","setMeasureB","colorScaleA","setColorScaleA","colorScaleB","setColorScaleB","measureOptions","setMeasureOptions","coldata","Dropdown","icon","background","borderTop","borderLeft","borderRight","borderBottom","borderRadius","minHeight","paddingBottom","placeholder","search","selection","options","stateOptions","onChange","e","fluid","labeled","AboutUs","relaxed","App","to","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.7a0939ea.chunk.js","sourcesContent":["import React from \"react\";\nimport ErrorBoundary from \"react-error-boundary\";\nimport { Container, Menu, Image } from 'semantic-ui-react';\n\nimport { useHistory } from 'react-router-dom';\n\n\nexport default function AppBar(props) {\n\n  const history = useHistory();\n\n  return (\n    <ErrorBoundary>\n      <Menu borderless fixed='top'>\n        <Container>\n          <Menu.Item as='a' header onClick={() => history.push('/')}>\n            <span style={{fontWeight: 400, color: '#002878', lineHeight: 1.3}}>\n           COVID-19 Health Equity<br/>Interactive Dashboard\n           </span>\n          </Menu.Item>\n          <Menu.Item \n            active={props.menu==='countyReport'} \n            content='Home'\n            onClick={() => history.push('/')}\n            name='countyReport'/>\n          <Menu.Item \n            active={props.menu==='countyCompare'} \n            content='Compare Counties'\n            onClick={() => history.push('/compare-counties')}\n            name='countyCompare'/>\n          <Menu.Item \n            active={props.menu==='aboutUs'} \n            content='About Us'\n            onClick={() => history.push('/about-us')}\n            name='aboutUs'/>            \n          <Menu.Menu position='right'>\n            <Menu.Item as='a' header>\n              <Image size='small' src='/logo.png' />\n            </Menu.Item>\n          </Menu.Menu>\n        </Container>\n      </Menu>\n    </ErrorBoundary>\n  );\n}\n\n\n\n","\nimport React, {\n  createContext,\n  useMemo,\n  useCallback,\n} from \"react\"\nimport PropTypes from \"prop-types\"\nimport * as d3Geo from \"d3-geo\"\n\nconst { geoPath, ...projections } = d3Geo\n\nconst MapContext = createContext()\n\nconst makeProjection = ({\n  projectionConfig = {},\n  projection = \"geoEqualEarth\",\n  width = 800,\n  height = 600,\n  offsetX = 0,\n  offsetY = 0\n}) => {\n  const isFunc = typeof projection === \"function\"\n\n  if (isFunc) return projection\n\n  const scl = projectionConfig.scale || null;\n\n  let proj = projections[projection]().translate([width/2 + (offsetX)*scl/1000 ,\n                                              height/2 + (offsetY)*scl/1000]);\n\n  const supported = [\n    proj.center ? \"center\" : null,\n    proj.rotate ? \"rotate\" : null,\n    proj.scale ? \"scale\" : null,\n    proj.parallels ? \"parallels\" : null,\n  ]\n\n  supported.forEach(d => {\n    if (!d) return\n    proj = proj[d](projectionConfig[d] || proj[d]())\n  })\n\n  return proj\n}\n\nconst MapProvider = ({\n  width,\n  height,\n  offsetX,\n  offsetY,\n  projection,\n  projectionConfig,\n  ...restProps\n}) => {\n  const [cx, cy] = projectionConfig.center || []\n  const [rx, ry, rz] = projectionConfig.rotate || []\n  const [p1, p2] = projectionConfig.parallels || []\n  const s = projectionConfig.scale || null\n\n  const projMemo = useMemo(() => {\n    return makeProjection({\n      projectionConfig: {\n        center: (cx || cx === 0) || (cy || cy === 0) ? [cx, cy] : null,\n        rotate: (rx || rx === 0) || (ry || ry === 0) ? [rx, ry, rz] : null,\n        parallels: (p1 || p1 === 0) || (p2 || p2 === 0) ? [p1, p2] : null,\n        scale: s,\n      },\n      projection,\n      width,\n      height,\n      offsetX,\n      offsetY,\n    })\n  }, [ width, height, projection, cx, cy, rx, ry, rz, p1, p2, s, offsetX, offsetY ])\n\n  const proj = useCallback(projMemo, [projMemo])\n\n  const value = useMemo(() => {\n    return {\n      width,\n      height,\n      projection: proj,\n      path: geoPath().projection(proj),\n    }\n  }, [ width, height, proj ])\n\n  return (<MapContext.Provider value={value} {...restProps} />)\n}\n\nMapProvider.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  offsetX: PropTypes.number,\n  offsetY: PropTypes.number,\n  projection: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n  ]),\n  projectionConfig: PropTypes.object,\n}\n\nexport { MapProvider, MapContext }\n","\nimport { feature } from \"topojson-client\"\n\nexport function getCoords(w, h, t) {\n  const xOffset = (w * t.k - w) / 2\n  const yOffset = (h * t.k - h) / 2\n  return [w / 2 - (xOffset + t.x) / t.k, h / 2 - (yOffset + t.y) / t.k]\n}\n\nexport function fetchGeographies(url) {\n  return fetch(url)\n    .then(res => {\n      if (!res.ok) {\n        throw Error(res.statusText)\n      }\n      return res.json()\n    }).catch(error => {\n      console.log(\"There was a problem when fetching the data: \", error)\n    })\n}\n\nexport function getFeatures(geographies, parseGeographies) {\n  if (Array.isArray(geographies)) return parseGeographies ? parseGeographies(geographies) : geographies\n  const feats = feature(\n    geographies,\n    geographies.objects[Object.keys(geographies.objects)[0]]\n  ).features\n  return parseGeographies ? parseGeographies(feats) : feats\n}\n\nexport function prepareFeatures(geographies, path) {\n  return geographies ? geographies.map((d, i) => {\n    return {\n      ...d,\n      rsmKey: `geo-${i}`,\n      svgPath: path(d),\n    }\n  }) : []\n}\n\nexport function createConnectorPath(dx = 30, dy = 30, curve = 0.5) {\n  const curvature = Array.isArray(curve) ? curve : [curve, curve]\n  const curveX = dx / 2 * curvature[0]\n  const curveY = dy / 2 * curvature[1]\n  return `M${0},${0} Q${-dx / 2 - curveX},${-dy / 2 + curveY} ${-dx},${-dy}`\n}\n\nexport function isString(geo) { return typeof geo === \"string\" }\n","\nimport { useMemo, useState, useEffect, useContext } from \"react\"\nimport { MapContext } from \"./MapProvider\"\n\nimport { fetchGeographies, getFeatures, prepareFeatures, isString } from \"../utils\"\n\nexport default function useGeographies({ geography, parseGeographies }) {\n  const { path } = useContext(MapContext)\n  const [geographies, setGeographies] = useState()\n\n  useEffect(() => {\n    if (typeof window === `undefined`) return\n\n    if (isString(geography)) {\n      fetchGeographies(geography).then(geos => {\n        if (geos) setGeographies(getFeatures(geos, parseGeographies))\n      })\n    } else {\n      setGeographies(getFeatures(geography, parseGeographies))\n    }\n  }, [geography, parseGeographies])\n\n  const output = useMemo(() => {\n    return prepareFeatures(geographies, path)\n  }, [geographies, path])\n\n  return { geographies: output }\n}\n","\nimport React, { useContext } from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { MapContext } from \"./MapProvider\"\nimport useGeographies from \"./useGeographies\"\n\nconst Geographies = ({\n  geography,\n  children,\n  parseGeographies,\n  className = \"\",\n  ...restProps\n}) => {\n  const { path, projection } = useContext(MapContext)\n  const { geographies } = useGeographies({ geography, parseGeographies })\n\n  return (\n    <g className={`rsm-geographies ${className}`} {...restProps}>\n      {\n        geographies && geographies.length > 0 &&\n        children({ geographies, path, projection })\n      }\n    </g>\n  )\n}\n\nGeographies.propTypes = {\n  geography: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.object,\n    PropTypes.array,\n  ]),\n  children: PropTypes.func,\n  parseGeographies: PropTypes.func,\n  className: PropTypes.string,\n}\n\nexport default Geographies\n","\nimport React, { useState, memo } from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst Geography = ({\n  geography,\n  onMouseEnter,\n  onMouseLeave,\n  onMouseDown,\n  onMouseUp,\n  onFocus,\n  onBlur,\n  style = {},\n  className = \"\",\n  ...restProps\n}) => {\n  const [isPressed, setPressed] = useState(false)\n  const [isFocused, setFocus] = useState(false)\n\n  function handleMouseEnter(evt) {\n    setFocus(true)\n    if (onMouseEnter) onMouseEnter(evt)\n  }\n\n  function handleMouseLeave(evt) {\n    setFocus(false)\n    if (isPressed) setPressed(false)\n    if (onMouseLeave) onMouseLeave(evt)\n  }\n\n  function handleFocus(evt) {\n    setFocus(true)\n    if (onFocus) onFocus(evt)\n  }\n\n  function handleBlur(evt) {\n    setFocus(false)\n    if (isPressed) setPressed(false)\n    if (onBlur) onBlur(evt)\n  }\n\n  function handleMouseDown(evt) {\n    setPressed(true)\n    if (onMouseDown) onMouseDown(evt)\n  }\n\n  function handleMouseUp(evt) {\n    setPressed(false)\n    if (onMouseUp) onMouseUp(evt)\n  }\n\n  return (\n    <path\n      tabIndex=\"0\"\n      className={`rsm-geography ${className}`}\n      d={geography.svgPath}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      style={style[isPressed || isFocused ? (isPressed ? \"pressed\" : \"hover\") : \"default\"]}\n      {...restProps}\n    />\n  )\n}\n\nGeography.propTypes = {\n  geography: PropTypes.object,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onMouseDown: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  style: PropTypes.object,\n  className: PropTypes.string,\n}\n\nexport default memo(Geography)\n","\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { MapProvider } from \"./MapProvider\"\n\nconst ComposableMap = ({\n  width = 800,\n  height = 600,\n  offsetX = 0,\n  offsetY = 0,\n  projection = \"geoEqualEarth\",\n  projectionConfig = {},\n  className = \"\",\n  ...restProps\n}) => {\n  return (\n    <MapProvider\n      width={width}\n      height={height}\n      offsetX={offsetX}\n      offsetY={offsetY}\n      projection={projection}\n      projectionConfig={projectionConfig}\n    >\n      <svg\n        width={width}\n        height={height}\n        className={`rsm-svg ${className}`}\n        {...restProps}\n      />\n    </MapProvider>\n  )\n}\n\nComposableMap.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  projection: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n  ]),\n  projectionConfig: PropTypes.object,\n  className: PropTypes.string,\n}\n\nexport default ComposableMap\n","\nimport React, { useContext, useState } from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { MapContext } from \"./MapProvider\"\n\nconst Marker = ({\n  coordinates,\n  children,\n  onMouseEnter,\n  onMouseLeave,\n  onMouseDown,\n  onMouseUp,\n  onFocus,\n  onBlur,\n  style = {},\n  className = \"\",\n  ...restProps\n}) => {\n  const { projection } = useContext(MapContext)\n  const [isPressed, setPressed] = useState(false)\n  const [isFocused, setFocus] = useState(false)\n\n  const [x, y] = projection(coordinates)\n\n  function handleMouseEnter(evt) {\n    setFocus(true)\n    if (onMouseEnter) onMouseEnter(evt)\n  }\n\n  function handleMouseLeave(evt) {\n    setFocus(false)\n    if (isPressed) setPressed(false)\n    if (onMouseLeave) onMouseLeave(evt)\n  }\n\n  function handleFocus(evt) {\n    setFocus(true)\n    if (onFocus) onFocus(evt)\n  }\n\n  function handleBlur(evt) {\n    setFocus(false)\n    if (isPressed) setPressed(false)\n    if (onBlur) onBlur(evt)\n  }\n\n  function handleMouseDown(evt) {\n    setPressed(true)\n    if (onMouseDown) onMouseDown(evt)\n  }\n\n  function handleMouseUp(evt) {\n    setPressed(false)\n    if (onMouseUp) onMouseUp(evt)\n  }\n\n  return (\n    <g\n      transform={`translate(${x}, ${y})`}\n      className={`rsm-marker ${className}`}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      style={style[isPressed || isFocused ? (isPressed ? \"pressed\" : \"hover\") : \"default\"]}\n      {...restProps}\n    >\n      {children}\n    </g>\n  )\n}\n\nMarker.propTypes = {\n  coordinates: PropTypes.array,\n  children: PropTypes.oneOfType([\n    PropTypes.node,\n    PropTypes.arrayOf(PropTypes.node),\n  ]),\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onMouseDown: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  style: PropTypes.object,\n  className: PropTypes.string,\n}\n\nexport default Marker\n","\nimport React, { useContext } from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { MapContext } from \"./MapProvider\"\nimport { createConnectorPath } from \"../utils\"\n\nconst Annotation = ({\n  subject,\n  children,\n  connectorProps,\n  dx = 30,\n  dy = 30,\n  curve = 0,\n  className = \"\",\n  ...restProps\n}) => {\n  const { projection } = useContext(MapContext)\n  const [x, y] = projection(subject)\n  const connectorPath = createConnectorPath(dx, dy, curve)\n\n  return (\n    <g\n      transform={`translate(${x + dx}, ${y + dy})`}\n      className={`rsm-annotation ${className}`}\n      {...restProps}\n    >\n      <path d={connectorPath} fill=\"transparent\" stroke=\"#000\" {...connectorProps} />\n      {children}\n    </g>\n  )\n}\n\nAnnotation.propTypes = {\n  subject: PropTypes.array,\n  children: PropTypes.oneOfType([\n    PropTypes.node,\n    PropTypes.arrayOf(PropTypes.node),\n  ]),\n  dx: PropTypes.number,\n  dy: PropTypes.number,\n  curve: PropTypes.number,\n  connectorProps: PropTypes.object,\n  className: PropTypes.string,\n}\n\nexport default Annotation\n","import React from 'react'\nimport { Grid, List, Divider, Image } from 'semantic-ui-react'\n\nexport default function Notes(props){\n\n  return (\n    <div style={{paddingTop: '2em', fontWeight: 300}}>\n    <Divider/>\n    <Grid>\n      <Grid.Row>\n        <Grid.Column style={{fontSize: '1.2em', lineHeight: '1.5em'}}>\n          Early data about COVID-19 suggests that communities are affected very differently due to social determinants of health like population density, poverty, residential segregation, underlying chronic health conditions, and availability of medical services. \n          In order to predict how the epidemic will continue to unfold and prepare for the future, it is critical to understand differences in underlying risk factors. \n          There is no one-size-fits all approach to combat the epidemic, but accurate and meaningful data is a key component of a robust public health response that is informed by contextual factors and prioritizes health equity.\n          <br/><br/>\n          The COVID-19 Health Equity Dashboard seeks to fill the gaps in county-level data about the virus and underlying social determinants of health. \n          Our goal is for this Dashboard to become a valuable resource for and critical component of tailored public health responses to COVID-19 across the wide range of environments that Americans inhabit. \n        </Grid.Column>\n      </Grid.Row>\n      <Grid.Row columns={2}>\n        <Grid.Column>\n          <b>Data Sources</b><br/>\n          <List as='ul'>\n            <List.Item as='li'><a href=\"https://covidtracking.com/data\">The COVID Tracking Project by The Atlantic</a></List.Item>\n            <List.Item as='li'><a href=\"https://www.census.gov/programs-surveys/acs\">American Community Survey by the U.S. Census Bureau</a></List.Item>\n            <List.Item as='li'>The Center for Systems Science and Engineering at Johns Hopkins University</List.Item>\n            <List.Item as='li'>The Institute for Health Metrics and Evaluation</List.Item>\n            <List.Item as='li'>American Hospital Association</List.Item>\n            <List.Item as='li'>Centers for Disease Control and Prevention</List.Item>\n          </List>\n        </Grid.Column>\n        <Grid.Column>\n          <b>Variable Definitions</b><br/>\n          <List as='ul'>\n            <List.Item as='li'><b>COVID Case Rate / 1M</b>: COVID-19 positive case rate per one million people.</List.Item>\n            <List.Item as='li'><b>COVID Mortality / 100k</b>: Deaths due to COVID-19 per one hundred thousand people.</List.Item>\n            <List.Item as='li'><b># of Primary Care / 1M</b>: Number of primary care doctors per one million people, reported in 2016.</List.Item>\n            <List.Item as='li'><b>% Diabetes</b>: Percent of population with diabetes, reported in 2016</List.Item>\n            <List.Item as='li'><b>% Obesity</b>: Percent of population with obesity, reported in 2016</List.Item>\n            <List.Item as='li'><b>% Hispanics</b>: Percent of Hispanic population, reported in 2010</List.Item>\n            <List.Item as='li'><b>% Blacks</b>: Percent of African American population, reported in 2010</List.Item>\n            <List.Item as='li'><b>% Poverty</b>: Percent of population with poverty, reported in 2010. For more information, please see \n              \"<a href=\"https://www.census.gov/topics/income-poverty/poverty/guidance/poverty-measures.html\">How the Census Bureau Measures Poverty</a>\"</List.Item>\n            <List.Item as='li'><b>% Unemployed</b>: Percent of unemployed population, reported between 2006 and 2010.</List.Item>\n            <List.Item as='li'><b>% Over 65 Yrs</b>: Percent of population with over 65 years old, reported in 2017.</List.Item> \n            <List.Item as='li'><b>% Long Commute</b>: Percent of population who need long commute-driving alone, reported between 2009 and 2013.</List.Item>                                       \n          </List>\n        </Grid.Column>\n      </Grid.Row>\n      <Divider hidden/>\n      <Grid.Row columns={2}>\n        <Grid.Column>          \n          <Image size='small' src='/logo.png' />\n          &copy; 2020 Emory University. All rights reserved.\n        </Grid.Column>\n        <Grid.Column>          \n          <small>\n            This dashboard is created using\n            <List as='ol'>\n              <List.Item as='li' value='-'><a href=\"https://www.react-simple-maps.io/\">React Simple Maps</a> by <a href=\"https://www.zcreativelabs.com/\">z creative labs</a></List.Item>\n              <List.Item as='li' value='-'><a href=\"https://formidable.com/open-source/victory/\">Victory</a> by <a href=\"https://formidable.com/\">Formidable</a></List.Item>\n              <List.Item as='li' value='-'><a href=\"https://github.com/Semantic-Org/Semantic-UI-React\">Semantic UI React</a> by <a href=\"https://github.com/levithomason\">@levithomason</a>and an amazing community of <a href=\"https://github.com/Semantic-Org/Semantic-UI-React/graphs/contributors\">contributors</a></List.Item> \n              <List.Item as='li' value='-'><a href=\"https://github.com/facebook/create-react-app\">Create React App</a> by <a href=\"https://about.fb.com/company-info/\">Facebook</a></List.Item> \n            </List>\n          </small>\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n    </div>);\n}\n","import React, { useEffect, useState } from 'react'\nimport { Container, Grid, Breadcrumb, Header, List, Loader, Divider } from 'semantic-ui-react'\nimport AppBar from './AppBar';\nimport { geoCentroid } from \"d3-geo\";\nimport Geographies from './Geographies';\nimport Geography from './Geography';\nimport ComposableMap from './ComposableMap';\nimport Marker from './Marker';\nimport Annotation from './Annotation';\nimport ReactTooltip from \"react-tooltip\";\nimport { VictoryChart, \n  VictoryGroup, \n  VictoryBar, \n  VictoryTheme, \n  VictoryAxis, \n  VictoryLegend,\n  VictoryLine,  \n  VictoryLabel, \n  VictoryScatter,\n} from 'victory';\nimport { useHistory } from \"react-router-dom\";\nimport Notes from './Notes';\nimport _ from 'lodash';\nimport { scaleQuantile } from \"d3-scale\";\nimport configs from \"./state_config.json\";\n\n\n//const geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/counties-10m.json\"\n\nfunction MapLabels(props){\n\n  const offsets = {\n    VT: [50, -8],\n    NH: [34, 2],\n    MA: [30, -1],\n    RI: [28, 2],\n    CT: [35, 10],\n    NJ: [34, 1],\n    DE: [33, 0],\n    MD: [47, 10],\n    DC: [49, 21],\n  };\n\n  return (\n    <svg>\n      {props.geographies.map(geo => {\n          const centroid = geoCentroid(geo);\n          const cur = props.stateLabels.find(s => s.val === geo.id);\n          return (\n            <g key={geo.rsmKey + \"-name\"}>\n              {cur &&\n                centroid[0] > -160 &&\n                centroid[0] < -67 &&\n                (Object.keys(offsets).indexOf(cur.id) === -1 ? (\n                  <Marker coordinates={centroid}>\n                    <text y=\"2\" fontSize={14} textAnchor=\"middle\" fill=\"#eee\">\n                      {cur.id}\n                    </text>\n                  </Marker>\n                ) : (\n                  <Annotation\n                    subject={centroid}\n                    dx={offsets[cur.id][0]}\n                    dy={offsets[cur.id][1]}\n                  >\n                    <text x={4} fontSize={14} alignmentBaseline=\"middle\">\n                      {cur.id}\n                    </text>\n                  </Annotation>\n                ))}\n            </g>\n          );\n        })}\n    </svg>\n    );\n}\n\nexport default function USMap(props) {\n\n  const [stateName, setStateName] = useState('Georgia');\n  const [fips, setFips] = useState('13');\n  const [tooltipContent, setTooltipContent] = useState('');\n  const history = useHistory();\n  const [dataFltrd, setDataFltrd] = useState();\n  const [data, setData] = useState();\n  const [date, setDate] = useState('');\n  const [stateLabels, setStateLabels] = useState();\n  const [colorScale, setColorScale] = useState();\n  const colorPalette = [\n          //\"#324da0\",\n          \"#799FCB\", //\"#009fa8\",\n          \"#95B4CC\", //\"#Acd2bd\",\n          \"#AFC7D0\", //\"#fefdbe\",\n          \"#EEF1E6\", //\"#F1c363\",\n          \"#FEC9C9\", //\"#E46f00\",\n          \"#F9665E\", //\"#A51122\",\n        ];\n\n  useEffect(() => {\n\n    fetch('/data/data.json').then(res => res.json())\n      .then(x => {\n        \n        setData(x);\n        setDataFltrd(_.filter(_.map(x, (d, k) => {\n          d.fips = k\n          return d}), \n          d => (d.Population > 10000 && \n              d.black > 5 && \n              d.fips.length === 5 && \n              d.covidmortality)));\n\n        const cs = scaleQuantile()\n        .domain(_.map(x, d=>d['covidmortality']))\n        .range(colorPalette);\n        let scaleMap = {}\n        _.each(x, d=>{\n          scaleMap[d['covidmortality']] = cs(d['covidmortality'])});\n        setColorScale(scaleMap);\n\n\n      });\n\n    fetch('/data/date.json').then(res => res.json())\n      .then(x => setDate(x.date));\n    \n    fetch('/data/allstates.json').then(res => res.json())\n      .then(x => setStateLabels(x));\n\n\n  }, [])\n\n  if (data && dataFltrd && stateLabels) {\n\n  return (\n      <div>\n        <AppBar menu='countyReport'/>\n        <Container style={{marginTop: '8em', minWidth: '960px'}}>\n          <Breadcrumb>\n            <Breadcrumb.Section active>United States</Breadcrumb.Section>\n            <Breadcrumb.Divider />\n          </Breadcrumb>\n          <Divider hidden />\n          <Grid columns={16}>\n            <Grid.Row>\n              <Grid.Column width={9}>\n                <Header as='h1' style={{fontWeight: 400}}>\n                  <Header.Content>\n                    COVID-19 is affecting every community differently, with some areas much harder-hit than others.\n                    What is happening where you live?\n                    <Header.Subheader style={{fontWeight: 300}}>Click on a state below to drill down to your county data.</Header.Subheader>\n                  </Header.Content>\n                </Header>\n                <svg width=\"600\" height=\"55\">\n                  <text x={0} y={15} style={{fontSize: '0.8em'}}>COVID-19 Mortality</text>\n                  {_.map(colorPalette, (color, i) => {\n                    return <rect key={i} x={20*i} y={20} width=\"20\" height=\"20\" style={{fill: color, strokeWidth:1, stroke: color}}/>                    \n                  })} \n                  <text x={0} y={52} style={{fontSize: '0.8em'}}>Low</text>\n                  <text x={20 * (colorPalette.length - 1)} y={52} style={{fontSize: '0.8em'}}>High</text>\n                </svg>\n                <ComposableMap \n                  projection=\"geoAlbersUsa\" \n                  data-tip=\"\"\n                  width={600} \n                  height={380}\n                  projectionConfig={{scale: 750}}\n                   >\n                  <Geographies geography={geoUrl}>\n                    {({ geographies }) => \n                      <svg>\n                        {geographies.map(geo => (\n                          <Geography\n                            key={geo.rsmKey}\n                            geography={geo}\n                            onMouseEnter={()=>{\n                              //console.log(geo); \n                              const stateFips = geo.id.substring(0,2);\n                              const configMatched = configs.find(s => s.fips === stateFips);\n\n                              setFips(stateFips);\n                              setStateName(configMatched.name);\n                              //setStateName(geo.id.substring(0,2));\n                              //setStateName(geo.properties.name); \n                              setTooltipContent('Click to see county-level data')\n                            }}\n                            onMouseLeave={()=>{\n                              setTooltipContent(\"\")\n                            }}\n                            onClick={()=>{\n                              history.push(\"/\"+geo.id.substring(0,2)+\"\");\n                            }}\n                            fill={fips===geo.id.substring(0,2)?'#012169':\n                            ((colorScale && data[geo.id] && data[geo.id]['covidmortality'])?\n                                colorScale[data[geo.id]['covidmortality']] : colorPalette[0])}\n                          />\n                        ))}\n                        <MapLabels geographies={geographies} stateLabels={stateLabels}/>\n                      </svg>\n                    }\n                  </Geographies>\n                </ComposableMap>\n              </Grid.Column>\n              <Grid.Column width={7}>\n                <Header as='h3' style={{fontWeight: 400}}>\n                  <Header.Content>\n                    A Snapshot of Health Disparities in <span style={{color: \"#012169\"}}>{stateName}</span>\n                    <Header.Subheader style={{fontWeight: 300, lineHeight: '1.5em', fontSize: '0.9em'}}>\n                      This is one example of many health disparities regarding the impacts of COVID-19: \n                      counties with higher proportions of African American residents tend to have higher COVID-19 mortality rates. \n                      Drill down to additional data in your county by clicking on the map.\n                    </Header.Subheader>\n                  </Header.Content>\n                </Header>\n                <Grid>\n                  <Grid.Row>\n                    <VictoryChart\n                      width={500}\n                      height={400}\n                      scale={{y: 'log'}}\n                      padding={{left: 100, right: 50, top: 50, bottom: 50}}>\n                      <VictoryLegend\n                        x={10} y={10}\n                        orientation=\"horizontal\"\n                        colorScale={[\"#bdbfc1\", \"#012169\"]}\n                        data ={[\n                          {name: ('Other counties in '+ 'US')}, {name: 'Counties in '+stateName}\n                          ]}\n                      />\n                      <VictoryScatter\n                        sortKey={(d) => d.fips.substring(0,2)===fips}\n                        style={{ data: { fill: ({datum}) => datum.fips.substring(0,2)===fips?\"#012169\":\"#bdbfc1\",\n                                 fillOpacity: ({datum}) => datum.fips.substring(0,2)===fips?1.0:0.5} }}\n                        data={dataFltrd}\n                        size={4}\n                        x='black'\n                        y='covidmortality'\n                      />\n                      <VictoryAxis label={'% African American'}/>\n                      <VictoryAxis dependentAxis \n                        label={'COVID Mortality / 100k (log-scale)'} \n                        style={{ axisLabel: {padding: 40} }} \n                        tickCount={5}\n                        tickFormat={(y) => (Math.round(y*100)/100)}/>\n                    </VictoryChart>\n                  </Grid.Row>\n                  <Grid.Row style={{paddingTop: 0}}>\n                    <small style={{fontWeight: 300}}>\n                    Data last updated: {date}, updated every week<br/>\n                    The chart does not contain those counties with less than 10,000 population and less than 5% African American.\n                    </small>\n                  </Grid.Row>\n                </Grid>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n          <Notes />\n        </Container>\n        <ReactTooltip>{tooltipContent}</ReactTooltip>\n      </div>\n      );\n  } else {\n    return <Loader active inline='centered' />\n  }\n}","import React, { useEffect, useState } from 'react'\nimport { Container, Grid, Breadcrumb, Header, Loader, Divider } from 'semantic-ui-react'\nimport AppBar from './AppBar';\nimport Geographies from './Geographies';\nimport Geography from './Geography';\nimport ComposableMap from './ComposableMap';\nimport { VictoryChart, \n  VictoryContainer,\n  VictoryGroup, \n  VictoryBar, \n  VictoryTheme, \n  VictoryAxis, \n  VictoryLegend,\n  VictoryLine,\n  VictoryLabel,\n} from 'victory';\n\nimport { useParams, useHistory } from 'react-router-dom';\nimport Notes from './Notes';\nimport ReactTooltip from \"react-tooltip\";\nimport _ from 'lodash';\nimport { scaleQuantile } from \"d3-scale\";\nimport fips2county from './fips2county.json'\n\n\nimport configs from \"./state_config.json\";\n\n//import dataState from \"../data/data_state.json\";\n//import dataCountyPct from \"../data/data_county_pct.json\";\n\nfunction BarChart(props) {\n  const colors = {\"nation\": \"#b1b3b3\", \n                  \"state\": \"#84754e\", \n                  \"county\": \"#0033a0\"};\n  return (\n    <VictoryChart\n      theme={VictoryTheme.material}\n      width={280}\n      height={90}       \n      domainPadding={10}\n      scale={{y: props.ylog?'log':'linear'}}\n      minDomain={{y: props.ylog?1:0}}\n      padding={{left: 70, right: 30, top: 20, bottom: 30}}\n      containerComponent={<VictoryContainer responsive={false}/>}\n    >\n      <VictoryLabel text={props.title} x={140} y={10} textAnchor=\"middle\" style={{fontSize: 12}}/>\n      <VictoryAxis style={{tickLabels: {fontSize: 10}}} />\n      <VictoryAxis dependentAxis style={{tickLabels: {fontSize: 8, padding: 1}}}/>\n      <VictoryBar\n        horizontal\n        barRatio={0.8}\n        labels={({ datum }) => (Math.round(datum.value*100)/100)}\n        data={[{key: 'nation', 'value': props.data['_nation'][props.var] || 0},\n              {key: 'state', 'value': props.data[props.stateFips][props.var] || 0},\n              {key: 'county', 'value': props.data[props.stateFips+props.countyFips][props.var] || 0}]}\n        labelComponent={<VictoryLabel dx={5} style={{fontSize: 10, fill: ({datum}) => colors[datum.key] }}/>}\n        style={{\n          data: {\n            fill: ({ datum }) => colors[datum.key]\n          }\n        }}\n        x=\"key\"\n        y=\"value\"\n      />\n    </VictoryChart>);\n}\n\nexport default function StateMap(props) {\n\n  let { stateFips } = useParams();\n  const [config, setConfig] = useState();\n  const [stateName, setStateName] = useState('');\n  const [countyFips, setCountyFips] = useState('');\n  const [countyName, setCountyName] = useState('{County}');\n  const history = useHistory();\n  const [data, setData] = useState();\n  const [dataTS, setDataTS] = useState();\n  const [tooltipContent, setTooltipContent] = useState('');\n  const [colorScale, setColorScale] = useState();\n  const colorPalette = [\n          //\"#324da0\",\n          \"#799FCB\", //\"#009fa8\",\n          \"#95B4CC\", //\"#Acd2bd\",\n          \"#AFC7D0\", //\"#fefdbe\",\n          \"#EEF1E6\", //\"#F1c363\",\n          \"#FEC9C9\", //\"#E46f00\",\n          \"#F9665E\", //\"#A51122\",\n        ];\n\n  useEffect(()=>{\n    \n    const configMatched = configs.find(s => s.fips === stateFips);\n\n    if (!configMatched){\n      history.push('/');\n    }else{\n\n      setConfig(configMatched);\n\n      setStateName(configMatched.name);\n\n      fetch('/data/data.json').then(res => res.json())\n        .then(x => {\n          setData(x);\n\n          const cs = scaleQuantile()\n          .domain(_.map(x, d=>d['covidmortality']))\n          .range(colorPalette);\n\n          let scaleMap = {}\n          _.each(x, d=>{\n            scaleMap[d['covidmortality']] = cs(d['covidmortality'])});\n          setColorScale(scaleMap);\n        });\n      \n      fetch('/data/timeseries'+stateFips+'.json').then(res => res.json())\n        .then(x => {\n\n          let countyMost = '';\n          let mortalityMA = 0;\n          _.each(x, (v, k)=>{\n            if (k.length===5 && v.length > 0 && v[v.length-1].mortalityMA > mortalityMA){\n              countyMost = k.substring(2, 5);\n              mortalityMA = v[v.length-1].mortalityMA;\n            }\n          });\n          setCountyFips(countyMost);\n          setCountyName(fips2county[stateFips+countyMost]);\n\n          setDataTS(x);\n        });\n    }\n  }, [stateFips]);\n\n  if (data && dataTS) {\n\n  return (\n      <div>\n        <AppBar menu='countyReport'/>\n        <Container style={{marginTop: '8em', minWidth: '960px'}}>\n          {config &&\n          <div>\n          <Breadcrumb>\n            <Breadcrumb.Section link onClick={() => history.push('/')}>United States</Breadcrumb.Section>\n            <Breadcrumb.Divider />\n            <Breadcrumb.Section active>{stateName}</Breadcrumb.Section>\n            <Breadcrumb.Divider />\n          </Breadcrumb>\n          <Divider hidden/>\n          <Grid columns={16}>\n            <Grid.Row>\n              <Grid.Column width={8}>\n                <Header as='h1' style={{fontWeight: 400}}>\n                  <Header.Content>\n                    Covid-19 Outcomes in {stateName}\n                    <Header.Subheader style={{fontWeight: 300}}>\n                    Health determinants impact COVID-19 outcomes. \n                    </Header.Subheader>\n                    <Header.Subheader style={{fontWeight: 300}}>Click on a state below to drill down to your county data.</Header.Subheader>\n                  </Header.Content>\n                </Header>\n                <svg width=\"500\" height=\"55\">\n                  <text x={0} y={15} style={{fontSize: '0.8em'}}>COVID-19 Mortality</text>\n                  {_.map(colorPalette, (color, i) => {\n                    return <rect key={i} x={20*i} y={20} width=\"20\" height=\"20\" style={{fill: color, strokeWidth:1, stroke: color}}/>                    \n                  })} \n                  <text x={0} y={52} style={{fontSize: '0.8em'}}>Low</text>\n                  <text x={20 * (colorPalette.length - 1)} y={52} style={{fontSize: '0.8em'}}>High</text>\n                </svg>\n                <ComposableMap projection=\"geoAlbersUsa\" \n                  projectionConfig={{scale:`${config.scale}`}} \n                  width={500} \n                  height={550} \n                  data-tip=\"\"\n                  offsetX={config.offsetX}\n                  offsetY={config.offsetY}>\n                  <Geographies geography={config.url}>\n                    {({geographies}) => geographies.map(geo =>\n                      <Geography \n                        key={geo.rsmKey} \n                        geography={geo} \n                        onClick={()=>{\n                          history.push(\"/\" + stateFips + \"/\" +geo.properties.COUNTYFP);\n                        }}\n                        onMouseEnter={()=>{\n                          setCountyFips(geo.properties.COUNTYFP);\n                          setCountyName(fips2county[stateFips+geo.properties.COUNTYFP]);\n                          setTooltipContent('Click to see more county data');\n                        }}\n                        onMouseLeave={()=>{\n                          setTooltipContent(\"\")\n                        }}\n                        fill={countyFips===geo.properties.COUNTYFP?'#012169':\n                            ((colorScale && data[stateFips+geo.properties.COUNTYFP] && data[stateFips+geo.properties.COUNTYFP]['covidmortality'])?\n                                colorScale[data[stateFips+geo.properties.COUNTYFP]['covidmortality']] : colorPalette[0])}\n                        />\n                    )}\n                  </Geographies>\n                </ComposableMap>\n              </Grid.Column>\n              <Grid.Column width={8}>\n                <Header as='h2' style={{fontWeight: 400}}>\n                  <Header.Content>\n                    Statistics of {countyName}\n                    <Header.Subheader style={{fontWeight: 300}}>\n                      Case rates and mortalities are shown in 7-days moving averages.<br/>\n                      Line charts show the statistics over time, and bar charts show the latest statistics.\n                    </Header.Subheader>\n                  </Header.Content>\n                </Header>\n                <Grid>\n                  <Grid.Row columns={2} style={{padding: 0}}>\n                    <Grid.Column>\n                      <VictoryChart theme={VictoryTheme.material}\n                        width={280}\n                        height={180}       \n                        padding={{left: 50, right: 30, top: 60, bottom: 30}}\n                        containerComponent={<VictoryContainer responsive={false}/>}>\n                        <VictoryLabel text=\"Average Daily COVID-19 Cases / 100,000\" x={140} y={20} textAnchor=\"middle\" style={{fontSize: 12}}/>\n                        <VictoryLegend\n                          x={10} y={35}\n                          orientation=\"horizontal\"\n                          colorScale={[\"#b1b3b3\", \"#84754e\", \"#0033a0\"]}\n                          data ={[\n                            {name: \"nation\"}, {name: \"state\"}, {name: \"county\"}\n                            ]}\n                        />\n                        <VictoryAxis\n                          tickValues={[\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/3)*2 - 1].t,\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/3) - 1].t,\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length-1].t]}                        \n                          style={{tickLabels: {fontSize: 10}}} \n                          tickFormat={(t)=> new Date(t*1000).toLocaleDateString()}/>\n                        <VictoryAxis dependentAxis tickCount={5}\n                         style={{tickLabels: {fontSize: 8, padding: 1}}} \n                          tickFormat={(y) => (y<1000?y:(y/1000+'k'))}\n                          />\n                        <VictoryGroup \n                          colorScale={[\"#b1b3b3\", \"#84754e\", \"#0033a0\"]}\n                        >\n                          <VictoryLine data={dataTS[\"_nation\"]}\n                            x='t' y='caseRateMA'\n                            />\n                          <VictoryLine data={dataTS[stateFips]}\n                            x='t' y='caseRateMA'\n                            />\n                          <VictoryLine data={dataTS[stateFips+countyFips]?dataTS[stateFips+countyFips]:dataTS[\"_\"]}\n                            x='t' y='caseRateMA'\n                            />\n                        </VictoryGroup>\n                      </VictoryChart>\n                    </Grid.Column>\n                    <Grid.Column>\n                      <VictoryChart theme={VictoryTheme.material}\n                        width={280}\n                        height={180}       \n                        padding={{left: 50, right: 30, top: 60, bottom: 30}}\n                        containerComponent={<VictoryContainer responsive={false}/>}>\n                        <VictoryLabel text=\"Average Daily COVID-19 Deaths / 100,000\" x={140} y={20} textAnchor=\"middle\" style={{fontSize: 12}}/>\n                        <VictoryLegend\n                          x={10} y={35}\n                          orientation=\"horizontal\"\n                          colorScale={[\"#b1b3b3\", \"#84754e\", \"#0033a0\"]}\n                          data ={[\n                            {name: \"nation\"}, {name: \"state\"}, {name: \"county\"}\n                            ]}\n                        />\n                        <VictoryAxis\n                          tickValues={[\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/3)*2 - 1].t,\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/3) - 1].t,\n                            dataTS[\"_nation\"][dataTS[\"_nation\"].length-1].t]}                        \n                          style={{tickLabels: {fontSize: 10}}} \n                          tickFormat={(t)=> new Date(t*1000).toLocaleDateString()}/>\n                        <VictoryAxis dependentAxis tickCount={5}\n                         style={{tickLabels: {fontSize: 8, padding: 1}}} \n                          tickFormat={(y) => (y<1000?y:(y/1000+'k'))}\n                          />\n                        <VictoryGroup \n                          colorScale={[\"#b1b3b3\", \"#84754e\", \"#0033a0\"]}\n                        >\n                          <VictoryLine data={dataTS[\"_nation\"]}\n                            x='t' y='mortalityMA'\n                            />\n                          <VictoryLine data={dataTS[stateFips]}\n                            x='t' y='mortalityMA'\n                            />\n                          <VictoryLine data={dataTS[stateFips+countyFips]?dataTS[stateFips+countyFips]:dataTS[\"_\"]}\n                            x='t' y='mortalityMA'\n                            />\n                        </VictoryGroup>\n                      </VictoryChart>\n                    </Grid.Column>\n                  </Grid.Row>\n                  <Grid.Row columns={2} style={{padding: 0}}>\n                    <Grid.Column>\n                      <BarChart \n                        title=\"\" \n                        var=\"caserate7day\" \n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        data={data} />\n                    </Grid.Column>\n                    <Grid.Column>\n                      <BarChart \n                        title=\"\" \n                        var=\"covidmortality7day\" \n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        data={data} />\n                    </Grid.Column>\n                  </Grid.Row>\n                  <Divider/>\n                  <Grid.Row columns={2} style={{padding: 0}}>                    \n                    <Grid.Column>\n                      <BarChart \n                        title=\"% African American\" \n                        var=\"black\" \n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        data={data} />\n                      <BarChart \n                        title=\"% in Poverty\" \n                        var=\"poverty\" \n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        data={data} />\n                      <BarChart \n                        title=\"% Uninsured\" \n                        var=\"PCTUI\" \n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        data={data} />  \n                      <BarChart \n                        title=\"% Diabetes\" \n                        var=\"diabetes\" \n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        data={data} /> \n                    </Grid.Column>\n                    <Grid.Column>\n                      <BarChart \n                        title=\"% Obese\" \n                        var=\"obesity\" \n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        data={data} />\n                      <BarChart \n                        title=\"% Over 65 y/o\" \n                        var=\"age65over\" \n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        data={data} />\n                      <BarChart \n                        title=\"% in Group Quarters\" \n                        var=\"groupquater\" \n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        data={data} />\n                      <BarChart \n                        title=\"% Male\" \n                        var=\"male\" \n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        data={data} />\n                    </Grid.Column>\n                  </Grid.Row>\n                </Grid>\n              </Grid.Column>\n            </Grid.Row>            \n          </Grid>\n          </div>\n        }\n        <Notes />\n      </Container>\n      <ReactTooltip>{tooltipContent}</ReactTooltip>\n    </div>\n    );\n  } else{\n    return <Loader active inline='centered' />\n  }\n\n\n\n\n}","import React, { useEffect, useState } from 'react'\nimport { Container, Grid, Breadcrumb, Header, Loader, Statistic, Table, Divider } from 'semantic-ui-react'\nimport AppBar from './AppBar';\nimport Geographies from './Geographies';\nimport Geography from './Geography';\nimport ComposableMap from './ComposableMap';\nimport { VictoryChart, \n  VictoryContainer,\n  VictoryGroup, \n  VictoryBar, \n  VictoryTheme, \n  VictoryAxis, \n  VictoryLegend,\n  VictoryLine,\n  VictoryLabel, \n  VictoryScatter,\n} from 'victory';\n\nimport { useParams, useHistory } from 'react-router-dom';\nimport Notes from './Notes';\nimport ReactTooltip from \"react-tooltip\";\nimport fips2county from './fips2county.json'\nimport configs from \"./state_config.json\";\nimport _ from 'lodash';\n\nfunction ScatterChart(props) {\n\n  return (\n    <VictoryChart\n      width={400}\n      height={300}\n      scale={{x: props.xlog?'log':'linear', y: props.ylog?'log':'linear'}}\n      minDomain={{y: props.ylog?1:0}}\n      padding={{left: 80, right: 10, top: 50, bottom: 50}}>\n      {props.showLegend && <VictoryLegend\n        x={10} y={10}\n        orientation=\"horizontal\"\n        colorScale={[\"#bdbfc1\", \"#0033a0\"]}\n        data ={[\n          {name: ('Other counties in '+ props.stateName)}, {name: props.countyName}\n          ]}\n      />}\n      <VictoryScatter\n        data={_.filter(_.map(props.data, (d, k)=>{d.fips=k; return d;}), (d)=> (\n                 d.fips.length===5 &&\n                 d.fips.substring(0,2)===props.stateFips &&\n                 d[props.x] && d[props.y]))}\n        sortKey={(d) => d.fips===(props.stateFips + props.countyFips)}\n        style={{ data: { fill: ({datum}) => datum.fips===(props.stateFips + props.countyFips)?\"#0033a0\":\"#bdbfc1\",\n                 fillOpacity: ({datum}) => datum.fips===(props.stateFips + props.countyFips)?1.0:0.7} }}\n        size={4}\n        x={props.x}\n        y={props.y}\n      />\n      <VictoryAxis label={props.varMap[props.x]?props.varMap[props.x].name:props.x}\n        tickCount={4}\n        tickFormat={(y) => (props.rescaleX?(Math.round(y/1000)+'k'):(Math.round(y*100)/100))} />\n      <VictoryAxis dependentAxis label={props.varMap[props.y]?props.varMap[props.y].name:props.y} \n        style={{ axisLabel: {padding: 40} }}\n        tickCount={5}\n        tickFormat={(y) => (Math.round(y*100)/100)} />\n    </VictoryChart>);\n\n}\n\nfunction BarChart(props) {\n  const colors = {\"nation\": \"#b1b3b3\", \n                  \"state\": \"#84754e\", \n                  \"county\": \"#0033a0\"};\n  return (\n    <VictoryChart\n      theme={VictoryTheme.material}\n      width={props.width || 560}\n      height={140}       \n      domainPadding={10}\n      scale={{y: props.ylog?'log':'linear'}}\n      minDomain={{y: props.ylog?1:0}}\n      padding={{left: 60, right: 50, top: 40, bottom: 50}}\n      containerComponent={<VictoryContainer responsive={false}/>}\n    >\n      <VictoryLabel text={props.title} x={(props.width || 560)/2} y={30} textAnchor=\"middle\"/>\n      <VictoryAxis/>\n      <VictoryAxis dependentAxis/>\n      <VictoryBar\n        horizontal\n        barRatio={0.8}\n        labels={({ datum }) => (Math.round(datum.value*100)/100)}\n        data={[{key: 'nation', 'value': props.data['_nation'][props.var] || 0},\n              {key: 'state', 'value': props.data[props.stateFips][props.var] || 0},\n              {key: 'county', 'value': props.data[props.stateFips+props.countyFips][props.var] || 0}]}\n        labelComponent={<VictoryLabel dx={5} style={{fill: ({datum}) => colors[datum.key] }}/>}\n        style={{\n          data: {\n            fill: ({ datum }) => colors[datum.key]\n          }\n        }}\n        x=\"key\"\n        y=\"value\"\n      />\n    </VictoryChart>);\n}\n\nexport default function CountyReport() {\n\n  let { stateFips, countyFips } = useParams();\n  const [config, setConfig] = useState();\n  const [stateName, setStateName] = useState('');\n  const [countyName, setCountyName] = useState('');\n  const history = useHistory();\n  const [data, setData] = useState();\n  const [dataTS, setDataTS] = useState();\n  const [tooltipContent, setTooltipContent] = useState('');\n  const [covidMetric, setCovidMetric] = useState({cases: 'N/A', deaths: 'N/A', t: 'n/a'});\n  const [varMap, setVarMap] = useState({});\n\n  useEffect(()=>{\n\n    const configMatched = configs.find(s => s.fips === stateFips);\n    if(!configMatched || !fips2county[stateFips+countyFips]){\n      history.push('/');\n    }else{\n      setConfig(configMatched);\n      setStateName(configMatched.name);\n      setCountyName(fips2county[stateFips+countyFips]);\n\n      fetch('/data/rawdata/variable_mapping.json').then(res => res.json())\n        .then(x => setVarMap(x));\n\n      fetch('/data/data.json').then(res => res.json())\n        .then(x => setData(x));\n      \n      fetch('/data/timeseries'+stateFips+'.json').then(res => res.json())\n        .then(x => setDataTS(x));\n    }\n  }, [stateFips]);\n\n  useEffect(() => {\n    if (dataTS && dataTS[stateFips+countyFips]){\n      setCovidMetric(_.takeRight(dataTS[stateFips+countyFips])[0]);\n    }\n  }, [dataTS])\n\n  if (data && dataTS && varMap) {\n\n  return (\n      <div>\n        <AppBar menu='countyReport'/>\n        <Container style={{marginTop: '8em', minWidth: '960px'}}>\n          {config &&\n          <div>\n          <Breadcrumb>\n            <Breadcrumb.Section link onClick={() => history.push('/')}>United States</Breadcrumb.Section>\n            <Breadcrumb.Divider />\n            <Breadcrumb.Section link onClick={() => history.push('/'+stateFips)}>{stateName}</Breadcrumb.Section>\n            <Breadcrumb.Divider />\n            <Breadcrumb.Section active>{countyName}</Breadcrumb.Section>\n            <Breadcrumb.Divider />\n          </Breadcrumb>\n          <Header as='h1' style={{fontWeight: 300}}>\n            <Header.Content>\n              Covid-19 Health Equity Report for {countyName}\n              <Header.Subheader style={{fontWeight: 300}}>\n              See how health determinants impact COVID-19 outcomes. \n              </Header.Subheader>\n            </Header.Content>\n          </Header>\n          <Grid style={{paddingTop: '2em'}}>\n            <Grid.Row>\n              <Grid.Column>\n                <Statistic size='small'>\n                  <Statistic.Value>\n                    {covidMetric.cases===null?'0':covidMetric.cases.toLocaleString()}\n                  </Statistic.Value>\n                  <Statistic.Label>Total Cases</Statistic.Label>\n                </Statistic>\n                <Statistic style={{paddingLeft: '2em'}} size='small'>\n                  <Statistic.Value>\n                    {covidMetric.deaths===null?'0':covidMetric.deaths.toLocaleString()}\n                  </Statistic.Value>\n                  <Statistic.Label>Total Deaths</Statistic.Label>\n                </Statistic>\n                <span style={{padding: '3em', color: '#bdbfc1'}}>Last updated on {covidMetric.t==='n/a'?'N/A':(new Date(covidMetric.t*1000).toLocaleDateString())}</span>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n          <Divider horizontal style={{fontWeight: 300, color: '#b1b3b3', fontSize: '1.2em', paddingTop: '1em'}}>COVID-19 Outcome Variables</Divider>\n          <Grid columns={2} centered>\n            <Grid.Row>\n              <Grid.Column>\n                <VictoryChart theme={VictoryTheme.material}\n                  width={550}\n                  height={300}       \n                  padding={{left: 50, right: 60, top: 60, bottom: 30}}>\n                  <VictoryLabel text=\"Average Daily COVID-19 Cases / 100,000\" x={140} y={20} textAnchor=\"middle\"/>\n                  <VictoryLegend\n                    x={10} y={35}\n                    orientation=\"horizontal\"\n                    colorScale={[\"#b1b3b3\", \"#84754e\", \"#0033a0\"]}\n                    data ={[\n                      {name: \"nation\"}, {name: \"state\"}, {name: \"county\"}\n                      ]}\n                  />\n                  <VictoryAxis\n                    tickFormat={(t)=> new Date(t*1000).toLocaleDateString()}\n                    tickValues={[\n                      dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/4)*3 - 1].t,\n                      dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/4)*2 - 1].t,\n                      dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/4) - 1].t,\n                      dataTS[\"_nation\"][dataTS[\"_nation\"].length-1].t]}/>\n                  <VictoryAxis dependentAxis tickCount={5}\n                    tickFormat={(y) => (y<1000?y:(y/1000+'k'))}\n                    />\n                  <VictoryGroup \n                    colorScale={[\"#b1b3b3\", \"#84754e\", \"#0033a0\"]}\n                  >\n                    <VictoryLine data={dataTS[\"_nation\"]}\n                      x='t' y='caseRateMA'\n                      />\n                    <VictoryLine data={dataTS[stateFips]}\n                      x='t' y='caseRateMA'\n                      />\n                    <VictoryLine data={dataTS[stateFips+countyFips]?dataTS[stateFips+countyFips]:dataTS[\"_\"]}\n                      x='t' y='caseRateMA'\n                      />\n                  </VictoryGroup>\n                </VictoryChart>\n              </Grid.Column>\n              <Grid.Column>\n                <VictoryChart theme={VictoryTheme.material}\n                  width={550}\n                  height={300}       \n                  padding={{left: 50, right: 60, top: 60, bottom: 30}}>\n                  <VictoryLabel text=\"Average Daily COVID-19 Deaths / 100,000\" x={140} y={20} textAnchor=\"middle\"/>\n                  <VictoryLegend\n                    x={10} y={35}\n                    orientation=\"horizontal\"\n                    colorScale={[\"#b1b3b3\", \"#84754e\", \"#0033a0\"]}\n                    data ={[\n                      {name: \"nation\"}, {name: \"state\"}, {name: \"county\"}\n                      ]}\n                  />\n                  <VictoryAxis\n                    tickFormat={(t)=> new Date(t*1000).toLocaleDateString()}\n                    tickValues={[\n                      dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/4)*3 - 1].t,\n                      dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/4)*2 - 1].t,\n                      dataTS[\"_nation\"][dataTS[\"_nation\"].length - Math.round(dataTS[\"_nation\"].length/4) - 1].t,\n                      dataTS[\"_nation\"][dataTS[\"_nation\"].length-1].t]}/>\n                  <VictoryAxis dependentAxis tickCount={5}\n                    tickFormat={(y) => (y<1000?y:(y/1000+'k'))}\n                    />\n                  <VictoryGroup \n                    colorScale={[\"#b1b3b3\", \"#84754e\", \"#0033a0\"]}\n                  >\n                    <VictoryLine data={dataTS[\"_nation\"]}\n                      x='t' y='mortalityMA'\n                      />\n                    <VictoryLine data={dataTS[stateFips]}\n                      x='t' y='mortalityMA'\n                      />\n                    <VictoryLine data={dataTS[stateFips+countyFips]?dataTS[stateFips+countyFips]:dataTS[\"_\"]}\n                      x='t' y='mortalityMA'\n                      />\n                  </VictoryGroup>\n                </VictoryChart>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row columns={2}>\n              <Grid.Column>\n                <BarChart \n                  title=\"\" \n                  var=\"caserate7day\" \n                  stateFips={stateFips}\n                  countyFips={countyFips}\n                  data={data} />\n              </Grid.Column>\n              <Grid.Column>\n                <BarChart \n                  title=\"\" \n                  var=\"covidmortality7day\" \n                  stateFips={stateFips}\n                  countyFips={countyFips}\n                  data={data} />\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n          <Divider horizontal style={{fontWeight: 300, color: '#b1b3b3', fontSize: '1.2em', paddingTop: '1em'}}>Exposure Variables</Divider>\n          <Grid>\n            <Grid.Row columns={3}>                    \n              <Grid.Column>\n                <BarChart \n                  title=\"% African American\" \n                  var=\"black\" \n                  width={350}\n                  stateFips={stateFips}\n                  countyFips={countyFips}\n                  data={data} />\n                <BarChart \n                  title=\"% in Poverty\" \n                  var=\"poverty\" \n                  width={350}                 \n                  stateFips={stateFips}\n                  countyFips={countyFips}\n                  data={data} />\n                <BarChart \n                  title=\"% Uninsured\" \n                  var=\"PCTUI\" \n                  width={350}\n                  stateFips={stateFips}\n                  countyFips={countyFips}\n                  data={data} />  \n              </Grid.Column>\n              <Grid.Column>\n                <BarChart \n                  title=\"% Diabetes\" \n                  var=\"diabetes\" \n                  width={350}\n                  stateFips={stateFips}\n                  countyFips={countyFips}\n                  data={data} /> \n                <BarChart \n                  title=\"% Obese\" \n                  var=\"obesity\"\n                  width={350} \n                  stateFips={stateFips}\n                  countyFips={countyFips}\n                  data={data} />\n                <BarChart \n                  title=\"% Over 65 y/o\" \n                  var=\"age65over\" \n                  width={350}\n                  stateFips={stateFips}\n                  countyFips={countyFips}\n                  data={data} />\n              </Grid.Column>\n              <Grid.Column>\n                <BarChart \n                  title=\"% in Group Quarters\" \n                  var=\"groupquater\" \n                  width={350}\n                  stateFips={stateFips}\n                  countyFips={countyFips}\n                  data={data} />\n                <BarChart \n                  title=\"% Male\" \n                  var=\"male\" \n                  width={350}\n                  stateFips={stateFips}\n                  countyFips={countyFips}\n                  data={data} />\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n          <Divider horizontal style={{fontWeight: 300, color: '#b1b3b3', fontSize: '1.2em', paddingTop: '1em'}}>Bivariate Relationships of Outcomes and Exposure Variables</Divider>\n          <Grid columns={3}>\n            <Grid.Row>\n              <Grid.Column>\n                <ScatterChart x=\"cases\" y=\"deaths\" \n                  showLegend={true}\n                  varMap={varMap}\n                  xlog={true} \n                  ylog={true} \n                  stateName={stateName}\n                  countyName={countyName}\n                  countyFips={countyFips} \n                  stateFips={stateFips}\n                  data={data} />\n              </Grid.Column>\n              <Grid.Column>\n                <ScatterChart x=\"caserate\" y=\"covidmortality\" \n                  varMap={varMap}\n                  stateName={stateName}\n                  countyName={countyName}\n                  countyFips={countyFips} \n                  stateFips={stateFips}\n                  data={data} />\n              </Grid.Column>\n              <Grid.Column>\n                <ScatterChart x=\"RPL_THEME1\" y=\"covidmortality\"\n                 varMap={varMap} \n                  stateName={stateName}\n                  countyName={countyName}\n                  countyFips={countyFips} \n                  stateFips={stateFips}\n                  data={data} />\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                <ScatterChart x=\"RPL_THEME2\" y=\"covidmortality\"\n                  showLegend={true}\n                  varMap={varMap}\n                  stateName={stateName}\n                  countyName={countyName}\n                  countyFips={countyFips} \n                  stateFips={stateFips}\n                  data={data} />\n              </Grid.Column>\n              <Grid.Column>\n                <ScatterChart x=\"RPL_THEME3\" y=\"covidmortality\"\n                  varMap={varMap}\n                  stateName={stateName}\n                  countyName={countyName}\n                  countyFips={countyFips} \n                  stateFips={stateFips}\n                  data={data} />\n              </Grid.Column>\n              <Grid.Column>\n                <ScatterChart x=\"RPL_THEME4\" y=\"covidmortality\"\n                  varMap={varMap}\n                  stateName={stateName}\n                  countyName={countyName}\n                  countyFips={countyFips} \n                  stateFips={stateFips}\n                  data={data} />\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                <ScatterChart x=\"popden\" y=\"covidmortality\"\n                  showLegend={true}\n                  xlog={true}\n                  varMap={varMap}\n                  stateName={stateName}\n                  countyName={countyName}\n                  countyFips={countyFips} \n                  stateFips={stateFips}\n                  data={data} />\n              </Grid.Column>\n              <Grid.Column>\n                <ScatterChart x=\"hhincome\" y=\"covidmortality\"\n                  varMap={varMap}\n                  xlog={true}\n                  rescaleX={true}\n                  stateName={stateName}\n                  countyName={countyName}\n                  countyFips={countyFips} \n                  stateFips={stateFips}\n                  data={data} />\n              </Grid.Column>\n              <Grid.Column>\n                <ScatterChart x=\"black\" y=\"covidmortality\"\n                  varMap={varMap}\n                  stateName={stateName}\n                  countyName={countyName}\n                  countyFips={countyFips} \n                  stateFips={stateFips}\n                  data={data} />\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n          <Divider horizontal style={{fontWeight: 300, color: '#b1b3b3', fontSize: '1.2em', paddingTop: '1em'}}>Data Table</Divider>\n          <Table striped compact basic='very'>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell>Variable Name</Table.HeaderCell>\n                <Table.HeaderCell>{countyName}</Table.HeaderCell>\n                <Table.HeaderCell>{stateName}</Table.HeaderCell>\n                <Table.HeaderCell>United States</Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {_.map(data[stateFips+countyFips], \n                (v, k) => (<Table.Row key={k}>\n                  <Table.Cell>{varMap[k]?varMap[k].name:k}</Table.Cell>\n                  <Table.Cell>{isNaN(v)?v:(Math.round(v*100)/100)}</Table.Cell>\n                  <Table.Cell>{isNaN(data[stateFips][k])?data[stateFips][k]:(Math.round(data[stateFips][k]*100)/100)}</Table.Cell>\n                  <Table.Cell>{isNaN(data['_nation'][k])?data['_nation'][k]:(Math.round(data['_nation'][k]*100)/100)}</Table.Cell>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n          </div>\n        }\n        <Notes />\n      </Container>\n      <ReactTooltip>{tooltipContent}</ReactTooltip>\n    </div>\n    );\n  } else{\n    return <Loader active inline='centered' />\n  }\n\n\n\n}","import React, { useEffect, useState } from 'react'\nimport { Container, Dropdown, Header, Grid } from 'semantic-ui-react'\nimport AppBar from './AppBar';\nimport Geographies from './Geographies';\nimport Geography from './Geography';\nimport ComposableMap from './ComposableMap';\nimport { useParams, useHistory } from 'react-router-dom';\nimport Notes from './Notes';\nimport ReactTooltip from \"react-tooltip\";\nimport stateOptions from \"./stateOptions.json\";\nimport configs from \"./state_config.json\";\nimport _ from 'lodash';\nimport { scaleQuantile } from \"d3-scale\";\n\nexport default function CountyCompare() {\n\n  const [stateFips, setStateFips] = useState();\n  const [measureA, setMeasureA] = useState();\n  const [measureB, setMeasureB] = useState();  \n  const [colorScaleA, setColorScaleA] = useState();\n  const [colorScaleB, setColorScaleB] = useState();\n  const [config, setConfig] = useState();\n  const [tooltipContent, setTooltipContent] = useState('');\n  const [data, setData] = useState();\n  const [varMap, setVarMap] = useState({});\n  const [measureOptions, setMeasureOptions] = useState([]);\n\n  useEffect(()=>{\n    fetch('/data/rawdata/variable_mapping.json').then(res => res.json())\n      .then(x => {\n        setVarMap(x);\n        setMeasureOptions(_.filter(_.map(x, d=> {\n          return {key: d.name, value: d.name, text: d.name};\n        }), d => d.key !== \"Urban-Rural Status\"));\n      });\n  }, []);\n\n  useEffect(()=>{\n    \n    const configMatched = configs.find(s => s.fips === stateFips);\n    setConfig(configMatched);\n\n    if (stateFips && varMap){\n      fetch('/data/data.json').then(res => res.json())\n        .then(data => {\n          let coldata = {};\n          const dataFltrd = _.filter(_.map(data, (d, k)=>{d.fips=k; return d;}), (d)=> (\n                 d.fips.length===5 &&\n                 d.fips.substring(0,2)===stateFips));\n          _.each(dataFltrd, (d) => {\n            _.each(d, (v, k)=>{\n              if (varMap[k]){\n                if (!(varMap[k].name in coldata)){\n                  coldata[varMap[k].name] = {};\n                }\n                coldata[varMap[k].name][d.fips] = v; \n              }\n            });\n          });\n          setData(coldata);\n        });\n      setMeasureA(null);\n      setMeasureB(null);\n      setColorScaleA(null);\n      setColorScaleB(null);\n    }\n  }, [stateFips]);\n\n  useEffect(() => {\n    if (measureA){\n      const cs = scaleQuantile()\n        .domain(_.map(data[measureA], d=>d))\n        .range([\n          \"#ffedea\",\n          \"#ffcec5\",\n          \"#ffad9f\",\n          \"#ff8a75\",\n          \"#ff5533\",\n          \"#e2492d\",\n          \"#be3d26\",\n          \"#9a311f\",\n          \"#782618\"\n        ]);\n      let scaleMap = {}\n      _.each(data[measureA], d=>{\n        scaleMap[d] = cs(d)});\n      setColorScaleA(scaleMap);\n    }\n  }, [measureA]);\n\n  useEffect(() => {\n    if (measureB){\n      const cs = scaleQuantile()\n        .domain(_.map(data[measureB], d=>d))\n        .range([\n          \"#ffedea\",\n          \"#ffcec5\",\n          \"#ffad9f\",\n          \"#ff8a75\",\n          \"#ff5533\",\n          \"#e2492d\",\n          \"#be3d26\",\n          \"#9a311f\",\n          \"#782618\"\n        ]);\n      let scaleMap = {}\n      _.each(data[measureB], d=>{\n        scaleMap[d] = cs(d)});\n      setColorScaleB(scaleMap);\n    }\n  }, [measureB]);  \n\n  return (\n      <div>\n        <AppBar menu='countyCompare'/>\n        <Container style={{marginTop: '8em'}}>\n          <Header as='h3'>\n            <Header.Content style={{fontWeight: 400}}>\n              Side-by-Side View of Counties in&nbsp;\n              <Dropdown\n                icon=''\n                style={{background: '#fff', \n                        fontWeight: 400, \n                        width: '200px',\n                        borderTop: 'none',\n                        borderLeft: 'none',\n                        borderRight: 'none', \n                        borderBottom: '1px solid #bdbfc1',\n                        borderRadius: 0,\n                        minHeight: '2.2em',\n                        paddingBottom: '0.2em'}}\n                placeholder='Select State'\n                inline\n                search\n                selection\n                options={stateOptions}\n                onChange={(e, { value }) => {\n                  setStateFips(value);\n                }}\n              />\n            </Header.Content>\n          </Header>\n          {config &&\n          <Grid columns={2} style={{paddingTop: '2em', minHeight: '400px'}}>\n            <Grid.Row>\n              <Grid.Column>\n                <Grid columns={2} centered>\n                  <Grid.Column>\n                    <Dropdown\n                      style={{background: '#fff', \n                              fontWeight: 400, \n                              borderTop: 'none',\n                              borderLeft: 'none',\n                              borderRight: 'none', \n                              borderBottom: '1ox solid #bdbfc1',\n                              borderRadius: 0}}\n                      placeholder='Select Measure'\n                      search\n                      selection\n                      value={measureA}\n                      options={measureOptions}\n                      onChange={(e, { value }) => {\n                        setMeasureA(value)\n                      }}\n                    />\n                  </Grid.Column>\n                </Grid>\n              </Grid.Column>\n              <Grid.Column>\n                <Grid columns={2} centered>\n                  <Grid.Column>\n                    <Dropdown\n                      style={{background: '#fff', \n                              fontWeight: 400, \n                              borderTop: 'none',\n                              borderLeft: 'none',\n                              borderRight: 'none', \n                              borderBottom: '1ox solid #bdbfc1',\n                              borderRadius: 0}}\n                      placeholder='Select Measure'\n                      fluid\n                      labeled\n                      search\n                      selection\n                      value={measureB}\n                      options={measureOptions}\n                      onChange={(e, { value }) => {\n                        setMeasureB(value)\n                      }}\n                    />\n                  </Grid.Column>\n                </Grid>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                <ComposableMap projection=\"geoAlbersUsa\" \n                  projectionConfig={{scale:`${config.scale}`}} \n                  width={500} \n                  height={600} \n                  data-tip=\"\"\n                  offsetX={config.offsetX}\n                  offsetY={config.offsetY}>\n                  <Geographies geography={config.url}>\n                    {({geographies}) => geographies.map(geo => \n                      <Geography \n                        key={geo.rsmKey} \n                        geography={geo} \n                        onMouseEnter={()=>{\n                          if(measureA && colorScaleA){\n                            const cur = data[measureA][geo.properties.COUNTYFP];\n                            setTooltipContent(cur?(Math.round(cur*100)/100):'');\n                          }\n                        }}\n                        onMouseLeave={()=>{\n                          setTooltipContent(\"\")\n                        }}\n                        fill={(measureA && colorScaleA && data[measureA][stateFips+geo.properties.COUNTYFP])?\n                                colorScaleA[data[measureA][stateFips+geo.properties.COUNTYFP]] : \"#EEE\"}\n                      />\n                    )}\n                  </Geographies>\n                </ComposableMap>\n              </Grid.Column>\n              <Grid.Column>\n                <ComposableMap projection=\"geoAlbersUsa\" \n                  projectionConfig={{scale:`${config.scale}`}} \n                  width={500} \n                  height={600} \n                  data-tip=\"\"\n                  offsetX={config.offsetX}\n                  offsetY={config.offsetY}>\n                  <Geographies geography={config.url}>\n                    {({geographies}) => geographies.map(geo => \n                      <Geography \n                        key={geo.rsmKey} \n                        geography={geo} \n                        onMouseEnter={()=>{\n                          if(measureB && colorScaleB){\n                            const cur = data[measureB][geo.properties.COUNTYFP];\n                            setTooltipContent(cur?(Math.round(cur*100)/100):'');\n                          }\n                        }}\n                        onMouseLeave={()=>{\n                          setTooltipContent(\"\")\n                        }}\n                        fill = {(measureB && colorScaleB && data[measureB][stateFips+geo.properties.COUNTYFP])?\n                                colorScaleB[data[measureB][stateFips+geo.properties.COUNTYFP]] : \"#EEE\"}\n                      />\n                    )}\n                  </Geographies>\n                </ComposableMap>\n                <ReactTooltip>{tooltipContent}</ReactTooltip>\n              </Grid.Column>\n            </Grid.Row>  \n          </Grid>\n          }\n          <Notes />\n        </Container>\n\n      </div>\n    );\n\n}","import React from 'react'\nimport AppBar from './AppBar';\nimport Notes from './Notes';\nimport { Container, Grid, List, Divider, Image, Header } from 'semantic-ui-react'\n\nexport default function AboutUs(props){\n\n  return (\n    <div>\n      <AppBar menu='aboutUs'/>\n      <Container style={{marginTop: '8em'}}>\n        <Header as='h1' style={{fontWeight: 400}}>\n          <Header.Content>\n            About Us\n            <Header.Subheader style={{fontWeight: 300}}>We are a group of epidemiologists, doctors, and software engineers from Emory University and University of Michigan.</Header.Subheader>\n          </Header.Content>\n        </Header>\n\n        <List relaxed={true} size=\"large\">\n          <List.Item>\n            <List.Header>Shivani A. Patel, PhD</List.Header>\n            Assitant Professor of Global Health at the Rollins School of Public Health. PI of this project.\n          </List.Item>\n          <List.Item>\n            <List.Header>K. M. Venkat Narayan, MD</List.Header>\n            OC Hubert Professor of Global Health and Epidemiology, Rollins School of Public Health\n          </List.Item>\n          <List.Item>\n            <List.Header>Carlos Del Rio, MD</List.Header>\n            Professor of Medicine in the Division of Infectious Diseases at Emory University School of Medicine\n          </List.Item>\n          <List.Item>\n            <List.Header>Neil K. Mehta, PhD</List.Header>\n            Assistant Professor of Health Management and Policy at University of Michigan\n          </List.Item>\n          <List.Item>\n            <List.Header>Vince Marconi, MD</List.Header>\n            Professor of Medicine at Emory University\n          </List.Item>\n          <List.Item>\n            <List.Header>Michael Kramer, PhD</List.Header>\n            Associate Professor of Epidemiology at Emory University\n          </List.Item>\n          <List.Item>\n            <List.Header>Rob O'Reilly, PhD</List.Header>\n            Numeric Data Services Leader at the Emory Center for Digital Scholarship\n          </List.Item>\n          <List.Item>\n            <List.Header>Joyce Ho, PhD</List.Header>\n            Assistant Professor of Computer Science at Emory University\n          </List.Item>\n          <List.Item>\n            <List.Header>Yubin Park, PhD</List.Header>\n            Principal at Bonsai Research, LLC. Software development lead for the COVID-19 Health Equity Interactive Dashboard.\n          </List.Item>\n          <List.Item>\n            <List.Header>Daesung Choi, PhD</List.Header>\n            Postdoctoral Research Associate in the Department of Global Health at Emory University\n          </List.Item>\n          <List.Item>\n            <List.Header>Jing Zhang, PhD student</List.Header>\n            Department of Computer Science at Emory University\n          </List.Item>\n          <List.Item>\n            <List.Header>Mark Hutcheson</List.Header>\n            Managing Director at Emory Global Diabetes Research Center\n          </List.Item>\n        </List>\n      <Notes />\n      </Container>\n    </div>);\n}\n","// React\nimport React from \"react\";\n// Components & Hooks\nimport USMap from \"./USMap\";\nimport StateMap from \"./StateMap\";\nimport CountyReport from \"./CountyReport\";\nimport CountyCompare from \"./CountyCompare\";\nimport AboutUs from \"./AboutUs\";\nimport 'semantic-ui-css/semantic.min.css'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\n\nApp.propTypes = {};\nexport default function App() {\n\n  return (\n      <Router>\n        <Switch>\n          <Route path='/compare-counties'>\n            <CountyCompare />\n          </Route>\n          <Route path='/about-us'>\n            <AboutUs />\n          </Route>          \n          <Route path='/:stateFips/:countyFips'>\n            <CountyReport />\n          </Route>  \n          <Route path='/:stateFips'>\n            <StateMap />\n          </Route>\n          <Route path='/'>\n            <USMap />\n          </Route>\n          <Route path=\"*\">\n            <Redirect to='/'/>\n          </Route>\n        </Switch>\n      </Router>\n  );\n}\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}