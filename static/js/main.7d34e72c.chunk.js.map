{"version":3,"sources":["components/AppBar.js","components/MapProvider.js","utils.js","components/useGeographies.js","components/Geographies.js","components/Geography.js","components/ComposableMap.js","components/Marker.js","components/Annotation.js","components/Notes.js","components/USMap.js","components/StateMap.js","components/CountyReport.js","components/CountyCompare.js","components/App.js","index.js"],"names":["AppBar","props","history","useHistory","Menu","borderless","fixed","Container","Item","as","header","onClick","push","style","fontWeight","color","lineHeight","active","menu","content","name","position","Image","size","src","geoPath","d3Geo","projections","MapContext","createContext","MapProvider","width","height","offsetX","offsetY","projection","projectionConfig","restProps","center","cx","cy","rotate","rx","ry","rz","parallels","p1","p2","s","scale","projMemo","useMemo","scl","proj","translate","forEach","d","makeProjection","useCallback","value","path","Provider","getFeatures","geographies","parseGeographies","Array","isArray","feats","feature","objects","Object","keys","features","useGeographies","geography","useContext","useState","setGeographies","useEffect","url","window","fetch","then","res","ok","Error","statusText","json","catch","error","console","log","geos","map","i","rsmKey","svgPath","prepareFeatures","Geographies","children","className","length","memo","onMouseEnter","onMouseLeave","onMouseDown","onMouseUp","onFocus","onBlur","isPressed","setPressed","isFocused","setFocus","tabIndex","evt","ComposableMap","Marker","coordinates","x","y","transform","Annotation","subject","connectorProps","dx","dy","curve","connectorPath","curvature","curveX","curveY","createConnectorPath","fill","stroke","Notes","paddingTop","Divider","Grid","Row","Column","List","MapLabels","offsets","VT","NH","MA","RI","CT","NJ","DE","MD","DC","geo","centroid","geoCentroid","cur","stateLabels","find","val","id","key","indexOf","fontSize","textAnchor","alignmentBaseline","USMap","stateName","setStateName","fips","setFips","tooltipContent","setTooltipContent","dataScatter","setDataScatter","dataBar","setDataBar","setStateLabels","colorScale","setColorScale","data","cs","scaleQuantile","domain","_","range","scaleMap","each","marginTop","Breadcrumb","Section","hidden","columns","Header","Content","Subheader","data-tip","stateFips","substring","configMatched","configs","padding","left","right","top","bottom","orientation","sortKey","datum","fillOpacity","filter","label","dependentAxis","axisLabel","tickCount","tickFormat","Math","round","Loader","inline","StateMap","useParams","config","setConfig","countyFips","setCountyFips","countyName","setCountyName","dataLine","setDataLine","link","properties","COUNTYFP","NAME","default","hover","outline","pressed","theme","VictoryTheme","material","minDomain","t","Date","toLocaleDateString","_state","domainPadding","horizontal","offset","_nation","slice","CountyReport","case","death","covidMetric","setCovidMetric","scatterX0","scatterX1","fips2county","takeRight","Statistic","Value","toLocaleString","Label","paddingLeft","text","sortBy","tickLabelComponent","angle","textAlign","_scatter","Table","striped","compact","basic","HeaderCell","Body","nameShort","Cell","CountyCompare","setStateFips","measureA","setMeasureA","measureB","setMeasureB","colorScaleA","setColorScaleA","colorScaleB","setColorScaleB","coldata","dataFltrd","k","item","Dropdown","icon","background","borderTop","borderLeft","borderRight","borderBottom","borderRadius","minHeight","paddingBottom","placeholder","search","selection","options","stateOptions","onChange","e","centered","measureOptions","fluid","labeled","App","to","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.7d34e72c.chunk.js","sourcesContent":["import React from \"react\";\nimport ErrorBoundary from \"react-error-boundary\";\nimport { Container, Menu, Image } from 'semantic-ui-react';\n\nimport { useHistory } from 'react-router-dom';\n\n\nexport default function AppBar(props) {\n\n  const history = useHistory();\n\n  return (\n    <ErrorBoundary>\n      <Menu borderless fixed='top'>\n        <Container>\n          <Menu.Item as='a' header onClick={() => history.push('/emory-covid19')}>\n            <span style={{fontWeight: 400, color: '#002878', lineHeight: 1.2}}>\n           COVID-19<br/>Health Equity<br/>Dashboard\n           </span>\n          </Menu.Item>\n          <Menu.Item \n            active={props.menu==='countyReport'} \n            content='Home'\n            onClick={() => history.push('/emory-covid19')}\n            name='countyReport'/>\n          <Menu.Item \n            active={props.menu==='countyCompare'} \n            content='Compare Counties'\n            onClick={() => history.push('/emory-covid19/compare-counties')}\n            name='countyCompare'/>\n          <Menu.Menu position='right'>\n            <Menu.Item as='a' header>\n              <Image size='small' src='/emory-covid19/logo.png' />\n            </Menu.Item>\n          </Menu.Menu>\n        </Container>\n      </Menu>\n    </ErrorBoundary>\n  );\n}\n\n\n\n","\nimport React, {\n  createContext,\n  useMemo,\n  useCallback,\n} from \"react\"\nimport PropTypes from \"prop-types\"\nimport * as d3Geo from \"d3-geo\"\n\nconst { geoPath, ...projections } = d3Geo\n\nconst MapContext = createContext()\n\nconst makeProjection = ({\n  projectionConfig = {},\n  projection = \"geoEqualEarth\",\n  width = 800,\n  height = 600,\n  offsetX = 0,\n  offsetY = 0\n}) => {\n  const isFunc = typeof projection === \"function\"\n\n  if (isFunc) return projection\n\n  const scl = projectionConfig.scale || null;\n\n  let proj = projections[projection]().translate([width/2 + (offsetX)*scl/1000 ,\n                                              height/2 + (offsetY)*scl/1000]);\n\n  const supported = [\n    proj.center ? \"center\" : null,\n    proj.rotate ? \"rotate\" : null,\n    proj.scale ? \"scale\" : null,\n    proj.parallels ? \"parallels\" : null,\n  ]\n\n  supported.forEach(d => {\n    if (!d) return\n    proj = proj[d](projectionConfig[d] || proj[d]())\n  })\n\n  return proj\n}\n\nconst MapProvider = ({\n  width,\n  height,\n  offsetX,\n  offsetY,\n  projection,\n  projectionConfig,\n  ...restProps\n}) => {\n  const [cx, cy] = projectionConfig.center || []\n  const [rx, ry, rz] = projectionConfig.rotate || []\n  const [p1, p2] = projectionConfig.parallels || []\n  const s = projectionConfig.scale || null\n\n  const projMemo = useMemo(() => {\n    return makeProjection({\n      projectionConfig: {\n        center: (cx || cx === 0) || (cy || cy === 0) ? [cx, cy] : null,\n        rotate: (rx || rx === 0) || (ry || ry === 0) ? [rx, ry, rz] : null,\n        parallels: (p1 || p1 === 0) || (p2 || p2 === 0) ? [p1, p2] : null,\n        scale: s,\n      },\n      projection,\n      width,\n      height,\n      offsetX,\n      offsetY,\n    })\n  }, [ width, height, projection, cx, cy, rx, ry, rz, p1, p2, s, offsetX, offsetY ])\n\n  const proj = useCallback(projMemo, [projMemo])\n\n  const value = useMemo(() => {\n    return {\n      width,\n      height,\n      projection: proj,\n      path: geoPath().projection(proj),\n    }\n  }, [ width, height, proj ])\n\n  return (<MapContext.Provider value={value} {...restProps} />)\n}\n\nMapProvider.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  offsetX: PropTypes.number,\n  offsetY: PropTypes.number,\n  projection: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n  ]),\n  projectionConfig: PropTypes.object,\n}\n\nexport { MapProvider, MapContext }\n","\nimport { feature } from \"topojson-client\"\n\nexport function getCoords(w, h, t) {\n  const xOffset = (w * t.k - w) / 2\n  const yOffset = (h * t.k - h) / 2\n  return [w / 2 - (xOffset + t.x) / t.k, h / 2 - (yOffset + t.y) / t.k]\n}\n\nexport function fetchGeographies(url) {\n  return fetch(url)\n    .then(res => {\n      if (!res.ok) {\n        throw Error(res.statusText)\n      }\n      return res.json()\n    }).catch(error => {\n      console.log(\"There was a problem when fetching the data: \", error)\n    })\n}\n\nexport function getFeatures(geographies, parseGeographies) {\n  if (Array.isArray(geographies)) return parseGeographies ? parseGeographies(geographies) : geographies\n  const feats = feature(\n    geographies,\n    geographies.objects[Object.keys(geographies.objects)[0]]\n  ).features\n  return parseGeographies ? parseGeographies(feats) : feats\n}\n\nexport function prepareFeatures(geographies, path) {\n  return geographies ? geographies.map((d, i) => {\n    return {\n      ...d,\n      rsmKey: `geo-${i}`,\n      svgPath: path(d),\n    }\n  }) : []\n}\n\nexport function createConnectorPath(dx = 30, dy = 30, curve = 0.5) {\n  const curvature = Array.isArray(curve) ? curve : [curve, curve]\n  const curveX = dx / 2 * curvature[0]\n  const curveY = dy / 2 * curvature[1]\n  return `M${0},${0} Q${-dx / 2 - curveX},${-dy / 2 + curveY} ${-dx},${-dy}`\n}\n\nexport function isString(geo) { return typeof geo === \"string\" }\n","\nimport { useMemo, useState, useEffect, useContext } from \"react\"\nimport { MapContext } from \"./MapProvider\"\n\nimport { fetchGeographies, getFeatures, prepareFeatures, isString } from \"../utils\"\n\nexport default function useGeographies({ geography, parseGeographies }) {\n  const { path } = useContext(MapContext)\n  const [geographies, setGeographies] = useState()\n\n  useEffect(() => {\n    if (typeof window === `undefined`) return\n\n    if (isString(geography)) {\n      fetchGeographies(geography).then(geos => {\n        if (geos) setGeographies(getFeatures(geos, parseGeographies))\n      })\n    } else {\n      setGeographies(getFeatures(geography, parseGeographies))\n    }\n  }, [geography, parseGeographies])\n\n  const output = useMemo(() => {\n    return prepareFeatures(geographies, path)\n  }, [geographies, path])\n\n  return { geographies: output }\n}\n","\nimport React, { useContext } from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { MapContext } from \"./MapProvider\"\nimport useGeographies from \"./useGeographies\"\n\nconst Geographies = ({\n  geography,\n  children,\n  parseGeographies,\n  className = \"\",\n  ...restProps\n}) => {\n  const { path, projection } = useContext(MapContext)\n  const { geographies } = useGeographies({ geography, parseGeographies })\n\n  return (\n    <g className={`rsm-geographies ${className}`} {...restProps}>\n      {\n        geographies && geographies.length > 0 &&\n        children({ geographies, path, projection })\n      }\n    </g>\n  )\n}\n\nGeographies.propTypes = {\n  geography: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.object,\n    PropTypes.array,\n  ]),\n  children: PropTypes.func,\n  parseGeographies: PropTypes.func,\n  className: PropTypes.string,\n}\n\nexport default Geographies\n","\nimport React, { useState, memo } from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst Geography = ({\n  geography,\n  onMouseEnter,\n  onMouseLeave,\n  onMouseDown,\n  onMouseUp,\n  onFocus,\n  onBlur,\n  style = {},\n  className = \"\",\n  ...restProps\n}) => {\n  const [isPressed, setPressed] = useState(false)\n  const [isFocused, setFocus] = useState(false)\n\n  function handleMouseEnter(evt) {\n    setFocus(true)\n    if (onMouseEnter) onMouseEnter(evt)\n  }\n\n  function handleMouseLeave(evt) {\n    setFocus(false)\n    if (isPressed) setPressed(false)\n    if (onMouseLeave) onMouseLeave(evt)\n  }\n\n  function handleFocus(evt) {\n    setFocus(true)\n    if (onFocus) onFocus(evt)\n  }\n\n  function handleBlur(evt) {\n    setFocus(false)\n    if (isPressed) setPressed(false)\n    if (onBlur) onBlur(evt)\n  }\n\n  function handleMouseDown(evt) {\n    setPressed(true)\n    if (onMouseDown) onMouseDown(evt)\n  }\n\n  function handleMouseUp(evt) {\n    setPressed(false)\n    if (onMouseUp) onMouseUp(evt)\n  }\n\n  return (\n    <path\n      tabIndex=\"0\"\n      className={`rsm-geography ${className}`}\n      d={geography.svgPath}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      style={style[isPressed || isFocused ? (isPressed ? \"pressed\" : \"hover\") : \"default\"]}\n      {...restProps}\n    />\n  )\n}\n\nGeography.propTypes = {\n  geography: PropTypes.object,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onMouseDown: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  style: PropTypes.object,\n  className: PropTypes.string,\n}\n\nexport default memo(Geography)\n","\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { MapProvider } from \"./MapProvider\"\n\nconst ComposableMap = ({\n  width = 800,\n  height = 600,\n  offsetX = 0,\n  offsetY = 0,\n  projection = \"geoEqualEarth\",\n  projectionConfig = {},\n  className = \"\",\n  ...restProps\n}) => {\n  return (\n    <MapProvider\n      width={width}\n      height={height}\n      offsetX={offsetX}\n      offsetY={offsetY}\n      projection={projection}\n      projectionConfig={projectionConfig}\n    >\n      <svg\n        width={width}\n        height={height}\n        className={`rsm-svg ${className}`}\n        {...restProps}\n      />\n    </MapProvider>\n  )\n}\n\nComposableMap.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  projection: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n  ]),\n  projectionConfig: PropTypes.object,\n  className: PropTypes.string,\n}\n\nexport default ComposableMap\n","\nimport React, { useContext, useState } from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { MapContext } from \"./MapProvider\"\n\nconst Marker = ({\n  coordinates,\n  children,\n  onMouseEnter,\n  onMouseLeave,\n  onMouseDown,\n  onMouseUp,\n  onFocus,\n  onBlur,\n  style = {},\n  className = \"\",\n  ...restProps\n}) => {\n  const { projection } = useContext(MapContext)\n  const [isPressed, setPressed] = useState(false)\n  const [isFocused, setFocus] = useState(false)\n\n  const [x, y] = projection(coordinates)\n\n  function handleMouseEnter(evt) {\n    setFocus(true)\n    if (onMouseEnter) onMouseEnter(evt)\n  }\n\n  function handleMouseLeave(evt) {\n    setFocus(false)\n    if (isPressed) setPressed(false)\n    if (onMouseLeave) onMouseLeave(evt)\n  }\n\n  function handleFocus(evt) {\n    setFocus(true)\n    if (onFocus) onFocus(evt)\n  }\n\n  function handleBlur(evt) {\n    setFocus(false)\n    if (isPressed) setPressed(false)\n    if (onBlur) onBlur(evt)\n  }\n\n  function handleMouseDown(evt) {\n    setPressed(true)\n    if (onMouseDown) onMouseDown(evt)\n  }\n\n  function handleMouseUp(evt) {\n    setPressed(false)\n    if (onMouseUp) onMouseUp(evt)\n  }\n\n  return (\n    <g\n      transform={`translate(${x}, ${y})`}\n      className={`rsm-marker ${className}`}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      style={style[isPressed || isFocused ? (isPressed ? \"pressed\" : \"hover\") : \"default\"]}\n      {...restProps}\n    >\n      {children}\n    </g>\n  )\n}\n\nMarker.propTypes = {\n  coordinates: PropTypes.array,\n  children: PropTypes.oneOfType([\n    PropTypes.node,\n    PropTypes.arrayOf(PropTypes.node),\n  ]),\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onMouseDown: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  style: PropTypes.object,\n  className: PropTypes.string,\n}\n\nexport default Marker\n","\nimport React, { useContext } from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { MapContext } from \"./MapProvider\"\nimport { createConnectorPath } from \"../utils\"\n\nconst Annotation = ({\n  subject,\n  children,\n  connectorProps,\n  dx = 30,\n  dy = 30,\n  curve = 0,\n  className = \"\",\n  ...restProps\n}) => {\n  const { projection } = useContext(MapContext)\n  const [x, y] = projection(subject)\n  const connectorPath = createConnectorPath(dx, dy, curve)\n\n  return (\n    <g\n      transform={`translate(${x + dx}, ${y + dy})`}\n      className={`rsm-annotation ${className}`}\n      {...restProps}\n    >\n      <path d={connectorPath} fill=\"transparent\" stroke=\"#000\" {...connectorProps} />\n      {children}\n    </g>\n  )\n}\n\nAnnotation.propTypes = {\n  subject: PropTypes.array,\n  children: PropTypes.oneOfType([\n    PropTypes.node,\n    PropTypes.arrayOf(PropTypes.node),\n  ]),\n  dx: PropTypes.number,\n  dy: PropTypes.number,\n  curve: PropTypes.number,\n  connectorProps: PropTypes.object,\n  className: PropTypes.string,\n}\n\nexport default Annotation\n","import React from 'react'\nimport { Grid, List, Divider } from 'semantic-ui-react'\n\nexport default function Notes(props){\n\n  return (\n    <div style={{paddingTop: '4em'}}>\n    <Divider/>\n    <Grid>\n      <Grid.Row>\n        <Grid.Column>\n          <small>\n          Variable Definitions: <br/>\n          <List as='ul'>\n            <List.Item as='li'>COVID Case Rate / 1M: the variable definition will go here</List.Item>\n            <List.Item as='li'>COVID Mortality / 100k: the variable definition will go here</List.Item>\n            <List.Item as='li'># of Primary Care / 1M: the variable definition will go here</List.Item>\n            <List.Item as='li'>% Diabetes: the variable definition will go here</List.Item>\n            <List.Item as='li'>% Obesity: the variable definition will go here</List.Item>\n            <List.Item as='li'>% Hispanics: the variable definition will go here</List.Item>\n            <List.Item as='li'>% Blacks: the variable definition will go here</List.Item>\n            <List.Item as='li'>% Poverty: the variable definition will go here</List.Item>\n            <List.Item as='li'>% Unemployed: the variable definition will go here</List.Item>\n            <List.Item as='li'>% Over 65 Yrs: the variable definition will go here</List.Item> \n            <List.Item as='li'>% Long Commute: the variable definition will go here</List.Item>                                       \n          </List>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Non nisi est sit amet facilisis. Turpis massa sed elementum tempus. Semper viverra nam libero justo laoreet sit amet. Consequat interdum varius sit amet mattis vulputate enim nulla. Vel pretium lectus quam id leo in vitae. Diam in arcu cursus euismod. Donec enim diam vulputate ut pharetra sit amet. In iaculis nunc sed augue lacus viverra vitae congue. Ullamcorper eget nulla facilisi etiam. Tristique magna sit amet purus gravida quis blandit. Varius vel pharetra vel turpis. Arcu odio ut sem nulla. Est pellentesque elit ullamcorper dignissim cras. Faucibus turpis in eu mi bibendum. Semper feugiat nibh sed pulvinar proin gravida hendrerit lectus. Accumsan lacus vel facilisis volutpat est velit egestas dui.\n          <br/>\n          Bibendum arcu vitae elementum curabitur. Etiam sit amet nisl purus in mollis. Vel turpis nunc eget lorem dolor. Id velit ut tortor pretium viverra suspendisse. Nec tincidunt praesent semper feugiat nibh sed. Tortor at auctor urna nunc id cursus metus. Convallis tellus id interdum velit laoreet id donec. Eleifend quam adipiscing vitae proin sagittis nisl rhoncus. Quis viverra nibh cras pulvinar. Quisque id diam vel quam elementum. Urna condimentum mattis pellentesque id nibh. Faucibus interdum posuere lorem ipsum. Tortor condimentum lacinia quis vel eros donec ac odio tempor. Tempor commodo ullamcorper a lacus vestibulum sed. Massa sapien faucibus et molestie ac.\n          <br/>\n          Cras fermentum odio eu feugiat pretium nibh. Sem integer vitae justo eget magna fermentum iaculis. Sed ullamcorper morbi tincidunt ornare. Scelerisque purus semper eget duis at tellus at urna condimentum. Euismod nisi porta lorem mollis aliquam ut porttitor leo a. Luctus venenatis lectus magna fringilla urna porttitor. Laoreet sit amet cursus sit amet dictum sit. Et egestas quis ipsum suspendisse ultrices gravida dictum. At varius vel pharetra vel turpis nunc eget. Interdum velit euismod in pellentesque massa. Risus nullam eget felis eget. Mauris cursus mattis molestie a iaculis at erat pellentesque. Lectus mauris ultrices eros in cursus turpis massa. Et ligula ullamcorper malesuada proin libero nunc consequat. Ornare arcu odio ut sem nulla pharetra. Ullamcorper morbi tincidunt ornare massa eget egestas.\n          <br/>\n          Odio pellentesque diam volutpat commodo sed egestas egestas fringilla. Dui faucibus in ornare quam. Velit scelerisque in dictum non consectetur a. Sapien nec sagittis aliquam malesuada bibendum arcu vitae elementum curabitur. Odio pellentesque diam volutpat commodo sed egestas. Sollicitudin tempor id eu nisl nunc mi ipsum faucibus. Condimentum mattis pellentesque id nibh. Velit dignissim sodales ut eu sem integer vitae justo. Diam vulputate ut pharetra sit. Montes nascetur ridiculus mus mauris vitae ultricies leo integer malesuada. Nam aliquam sem et tortor consequat id porta nibh venenatis. Sed tempus urna et pharetra pharetra massa massa. Dolor magna eget est lorem ipsum dolor. Egestas fringilla phasellus faucibus scelerisque eleifend donec. Morbi tincidunt augue interdum velit. Semper risus in hendrerit gravida rutrum. Vestibulum rhoncus est pellentesque elit ullamcorper. Lacus suspendisse faucibus interdum posuere lorem ipsum dolor sit. Eu non diam phasellus vestibulum lorem sed risus.\n          <br/>\n          Congue quisque egestas diam in arcu cursus euismod quis. Eget dolor morbi non arcu risus quis varius. Quis lectus nulla at volutpat. Nisl vel pretium lectus quam id leo. Morbi tristique senectus et netus. Enim tortor at auctor urna nunc id cursus. Molestie nunc non blandit massa enim nec dui nunc. Quam elementum pulvinar etiam non quam. Velit aliquet sagittis id consectetur purus ut faucibus pulvinar. Duis ultricies lacus sed turpis tincidunt id aliquet risus feugiat. Etiam erat velit scelerisque in dictum non. Purus in mollis nunc sed id semper risus in hendrerit. Facilisis volutpat est velit egestas dui id ornare arcu. Lorem donec massa sapien faucibus et molestie ac feugiat sed. Integer quis auctor elit sed. Semper auctor neque vitae tempus quam pellentesque nec. Auctor urna nunc id cursus metus aliquam eleifend mi in. Sapien nec sagittis aliquam malesuada bibendum.\n          </small>\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n    </div>);\n}\n","import React, { useEffect, useState } from 'react'\nimport { Container, Grid, Breadcrumb, Header, List, Loader, Divider } from 'semantic-ui-react'\nimport AppBar from './AppBar';\nimport { geoCentroid } from \"d3-geo\";\nimport Geographies from './Geographies';\nimport Geography from './Geography';\nimport ComposableMap from './ComposableMap';\nimport Marker from './Marker';\nimport Annotation from './Annotation';\nimport ReactTooltip from \"react-tooltip\";\nimport { VictoryChart, \n  VictoryGroup, \n  VictoryBar, \n  VictoryTheme, \n  VictoryAxis, \n  VictoryLegend,\n  VictoryLine,  \n  VictoryLabel, \n  VictoryScatter,\n} from 'victory';\nimport { useHistory } from \"react-router-dom\";\nimport Notes from './Notes';\nimport _ from 'lodash';\nimport { scaleQuantile } from \"d3-scale\";\nimport configs from \"./state_config.json\";\n\n\n//const geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/counties-10m.json\"\n\nfunction MapLabels(props){\n\n  const offsets = {\n    VT: [50, -8],\n    NH: [34, 2],\n    MA: [30, -1],\n    RI: [28, 2],\n    CT: [35, 10],\n    NJ: [34, 1],\n    DE: [33, 0],\n    MD: [47, 10],\n    DC: [49, 21],\n  };\n\n  return (\n    <svg>\n      {props.geographies.map(geo => {\n          const centroid = geoCentroid(geo);\n          const cur = props.stateLabels.find(s => s.val === geo.id);\n          return (\n            <g key={geo.rsmKey + \"-name\"}>\n              {cur &&\n                centroid[0] > -160 &&\n                centroid[0] < -67 &&\n                (Object.keys(offsets).indexOf(cur.id) === -1 ? (\n                  <Marker coordinates={centroid}>\n                    <text y=\"2\" fontSize={14} textAnchor=\"middle\" fill=\"#eee\">\n                      {cur.id}\n                    </text>\n                  </Marker>\n                ) : (\n                  <Annotation\n                    subject={centroid}\n                    dx={offsets[cur.id][0]}\n                    dy={offsets[cur.id][1]}\n                  >\n                    <text x={4} fontSize={14} alignmentBaseline=\"middle\">\n                      {cur.id}\n                    </text>\n                  </Annotation>\n                ))}\n            </g>\n          );\n        })}\n    </svg>\n    );\n}\n\nexport default function USMap(props) {\n\n  const [stateName, setStateName] = useState('Georgia');\n  const [fips, setFips] = useState('13');\n  const [tooltipContent, setTooltipContent] = useState('');\n  const history = useHistory();\n  const [dataScatter, setDataScatter] = useState();\n  const [dataBar, setDataBar] = useState();\n  //const [dataLine, setDataLine] = useState();\n  const [stateLabels, setStateLabels] = useState();\n  const [colorScale, setColorScale] = useState();\n\n\n  useEffect(() => {\n\n    fetch('/emory-covid19/data/data_county.json').then(res => res.json())\n      .then(data => {\n        setDataBar(data);\n        const cs = scaleQuantile()\n        .domain(_.map(data, d=>d['covidmortalitycounty']))\n        .range([\n          \"#3ea9dc\",\n          \"#3b9dd1\",\n          \"#3890c7\",\n          \"#3484bd\",\n          \"#317ab5\",\n          \"#2964a2\",\n          \"#1d478a\",\n          \"#0d2e75\",\n          \"#012169\",\n        ]);\n      let scaleMap = {}\n      _.each(data, d=>{\n        scaleMap[d['covidmortalitycounty']] = cs(d['covidmortalitycounty'])});\n      setColorScale(scaleMap);\n      });\n    \n    //fetch('/emory-covid19/data/linechartNV.json').then(res => res.json())\n    //  .then(data => setDataLine(data));\n\n    fetch('/emory-covid19/data/allstates.json').then(res => res.json())\n      .then(data => setStateLabels(data));\n\n    fetch('/emory-covid19/data/scatter.json').then(res => res.json())\n      .then(data => setDataScatter(data));\n  }, [])\n\n  if (dataBar && dataScatter && stateLabels) {\n\n  return (\n      <div>\n        <AppBar menu='countyReport'/>\n        <Container style={{marginTop: '8em'}}>\n          <Breadcrumb>\n            <Breadcrumb.Section active>United States</Breadcrumb.Section>\n            <Breadcrumb.Divider />\n          </Breadcrumb>\n          <Divider hidden />\n          <Grid columns={16}>\n            <Grid.Row>\n              <Grid.Column width={9}>\n                <Header as='h2' style={{fontWeight: 400}}>\n                  <Header.Content>\n                    The health impacts of COVID-19 vary dramatically \n                    from community to community. <br/>\n                    How does your community compare?\n                    <Header.Subheader style={{fontWeight: 300}}>Click on a state below to drill down to your county data.</Header.Subheader>\n                  </Header.Content>\n                </Header>\n                <ComposableMap \n                  projection=\"geoAlbersUsa\" \n                  data-tip=\"\"\n                  width={600} \n                  height={450}\n                  projectionConfig={{scale: 750}}\n                   >\n                  <Geographies geography={geoUrl}>\n                    {({ geographies }) => \n                      <svg>\n                        {geographies.map(geo => (\n                          <Geography\n                            key={geo.rsmKey}\n                            geography={geo}\n                            onMouseEnter={()=>{\n                              //console.log(geo); \n                              const stateFips = geo.id.substring(0,2);\n                              const configMatched = configs.find(s => s.fips === stateFips);\n\n                              setFips(stateFips);\n                              setStateName(configMatched.name);\n                              //setStateName(geo.id.substring(0,2));\n                              //setStateName(geo.properties.name); \n                              setTooltipContent('Click to see county-level data')\n                            }}\n                            onMouseLeave={()=>{\n                              setTooltipContent(\"\")\n                            }}\n                            onClick={()=>{\n                              history.push(\"/emory-covid19/\"+geo.id.substring(0,2)+\"\");\n                            }}\n                            fill={fips===geo.id.substring(0,2)?'#f2a900':\n                            ((colorScale && dataBar[geo.id] && dataBar[geo.id]['covidmortalitycounty'])?\n                                colorScale[dataBar[geo.id]['covidmortalitycounty']] : \"#41b7e7\")}\n                          />\n                        ))}\n                        <MapLabels geographies={geographies} stateLabels={stateLabels}/>\n                      </svg>\n                    }\n                  </Geographies>\n                </ComposableMap>\n              </Grid.Column>\n              <Grid.Column width={7}>\n                <Header style={{fontWeight: 400}}>\n                  <Header.Content>\n                    A Snapshot of Health Disparities in {stateName}\n                    <Header.Subheader style={{fontWeight: 300}}>\n                      This is one example of health disparities regarding the impacts of COVID-19. \n                      As can be seen, the proportion of African American residents is correlated with COVID-19 mortality.\n                      Drill down to your county data by clicking on the map.\n                    </Header.Subheader>\n                  </Header.Content>\n                </Header>\n                <Grid>\n                  <Grid.Row>\n                    <VictoryChart\n                      width={500}\n                      height={400}\n                      scale={{y: 'log'}}\n                      padding={{left: 100, right: 50, top: 50, bottom: 50}}>\n                      <VictoryLegend\n                        x={10} y={10}\n                        orientation=\"horizontal\"\n                        colorScale={[\"#bdbfc1\", \"#f2a900\"]}\n                        data ={[\n                          {name: ('Other counties in '+ 'US')}, {name: 'Counties in '+stateName}\n                          ]}\n                      />\n                      <VictoryScatter\n                        sortKey={(d) => d.fips.substring(0,2)===fips}\n                        style={{ data: { fill: ({datum}) => datum.fips.substring(0,2)===fips?\"#f2a900\":\"#bdbfc1\",\n                                 fillOpacity: ({datum}) => datum.fips.substring(0,2)===fips?1.0:0.5} }}\n                        data={_.filter(dataScatter, (d)=> (d['% Blacks'] && d['COVID Mortality / 100k']))}\n                        size={4}\n                        x={'% Blacks'}\n                        y={'COVID Mortality / 100k'}\n                      />\n                      <VictoryAxis label={'% African American'}/>\n                      <VictoryAxis dependentAxis \n                        label={'COVID Mortality / 100k (log-scale)'} \n                        style={{ axisLabel: {padding: 40} }} \n                        tickCount={5}\n                        tickFormat={(y) => (Math.round(y*100)/100)}/>\n                    </VictoryChart>\n                  </Grid.Row>\n                  <Grid.Row style={{paddingTop: 0}}>\n                    <small style={{color: '#bdbfc1'}}>\n                    Data last updated: MM/DD/YYYY, updated every week<br/>\n                    The chart does not contain those counties with less than 10,000 population and less than 5% African American.\n                    Data sources: TBD\n                    </small>\n                  </Grid.Row>\n                </Grid>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n          <Notes />\n        </Container>\n        <ReactTooltip>{tooltipContent}</ReactTooltip>\n      </div>\n      );\n  } else {\n    return <Loader active inline='centered' />\n  }\n}","import React, { useEffect, useState } from 'react'\nimport { Container, Grid, Breadcrumb, Header, Loader, Divider } from 'semantic-ui-react'\nimport AppBar from './AppBar';\nimport Geographies from './Geographies';\nimport Geography from './Geography';\nimport ComposableMap from './ComposableMap';\nimport { VictoryChart, \n  VictoryGroup, \n  VictoryBar, \n  VictoryTheme, \n  VictoryAxis, \n  VictoryLegend,\n  VictoryLine } from 'victory';\n\nimport { useParams, useHistory } from 'react-router-dom';\nimport Notes from './Notes';\nimport ReactTooltip from \"react-tooltip\";\n\n\nimport configs from \"./state_config.json\";\n\n//import dataState from \"../data/data_state.json\";\n//import dataCountyPct from \"../data/data_county_pct.json\";\n\nexport default function StateMap(props) {\n\n  let { stateFips } = useParams();\n  const [config, setConfig] = useState();\n  const [stateName, setStateName] = useState('');\n  const [countyFips, setCountyFips] = useState('');\n  const [countyName, setCountyName] = useState('{County}');\n  const history = useHistory();\n  const [dataBar, setDataBar] = useState();\n  const [dataLine, setDataLine] = useState();\n  const [tooltipContent, setTooltipContent] = useState('');\n\n\n  useEffect(()=>{\n    \n    const configMatched = configs.find(s => s.fips === stateFips);\n\n    setConfig(configMatched);\n\n    setStateName(configMatched.name);\n\n    fetch('/emory-covid19/data/barchartSV'+stateFips+'.json').then(res => res.json())\n      .then(data => setDataBar(data));\n    \n    fetch('/emory-covid19/data/linechartSV'+stateFips+'.json').then(res => res.json())\n      .then(data => setDataLine(data));\n\n  }, [stateFips]);\n\n  if (dataBar && dataLine) {\n\n  return (\n      <div>\n        <AppBar menu='countyReport'/>\n        <Container style={{marginTop: '8em'}}>\n          {config &&\n          <div>\n          <Breadcrumb>\n            <Breadcrumb.Section link onClick={() => history.push('/emory-covid19')}>United States</Breadcrumb.Section>\n            <Breadcrumb.Divider />\n            <Breadcrumb.Section active>{stateName}</Breadcrumb.Section>\n            <Breadcrumb.Divider />\n          </Breadcrumb>\n          <Divider hidden/>\n          <Grid columns={16}>\n            <Grid.Row>\n              <Grid.Column width={8}>\n                <Header as='h2' style={{fontWeight: 400}}>\n                  <Header.Content>\n                    Covid-19 Outcomes in {stateName}\n                    <Header.Subheader style={{fontWeight: 300}}>\n                    Health determinants impact COVID-19 outcomes. \n                    </Header.Subheader>\n                    <Header.Subheader style={{fontWeight: 300}}>Click on a state below to drill down to your county data.</Header.Subheader>\n                  </Header.Content>\n                </Header>\n                <ComposableMap projection=\"geoAlbersUsa\" \n                  projectionConfig={{scale:`${config.scale}`}} \n                  width={500} \n                  height={600} \n                  data-tip=\"\"\n                  offsetX={config.offsetX}\n                  offsetY={config.offsetY}>\n                  <Geographies geography={config.url}>\n                    {({geographies}) => geographies.map(geo =>\n                      <Geography \n                        key={geo.rsmKey} \n                        geography={geo} \n                        onClick={()=>{\n                          history.push(\"/emory-covid19/\" + stateFips + \"/\" +geo.properties.COUNTYFP);\n                        }}\n                        onMouseEnter={()=>{\n                          setCountyFips(geo.properties.COUNTYFP);\n                          setCountyName(geo.properties.NAME);\n                          setTooltipContent('Click to see more county data');\n                        }}\n                        onMouseLeave={()=>{\n                          setTooltipContent(\"\")\n                        }}\n                        style={{\n                              default: {\n                                fill: \"#d0d0ce\",\n                                stroke: '#fff'\n                              },\n                              hover: {\n                                fill: \"#0033a0\",\n                                outline: \"none\"\n                              },\n                              pressed: {\n                                fill: \"#0033a0\",\n                                outline: \"none\"\n                              }\n                            }}/>\n                    )}\n                  </Geographies>\n                </ComposableMap>\n              </Grid.Column>\n              <Grid.Column width={8}>\n                <Header style={{fontWeight: 400}}>\n                  <Header.Content>\n                    Statistics of {countyName}\n                    <Header.Subheader style={{fontWeight: 300}}>\n                      New cases and new deaths are shown in 7-days moving averages.\n                    </Header.Subheader>\n                  </Header.Content>\n                </Header>\n                <Grid>\n                  <Grid.Row columns={2}>\n                    <Grid.Column>\n                      <VictoryChart theme={VictoryTheme.material}\n                        height={250}\n                        scale={{y: 'log'}}\n                        minDomain={{y:1}}>\n                        <VictoryLegend\n                          x={10} y={10}\n                          orientation=\"horizontal\"\n                          colorScale={[\"#0033a0\", \"#da291c\"]}\n                          data ={[\n                            {name: \"new cases\"}, {name: \"new deaths\"}\n                            ]}\n                        />\n                        <VictoryAxis tickCount={2}\n                          tickFormat={(t)=> new Date(t*1000).toLocaleDateString()}/>\n                        <VictoryAxis dependentAxis tickCount={5}\n                          tickFormat={(y) => (y<1000?y:(y/1000+'k'))}\n                          />\n                        <VictoryGroup \n                          colorScale={[\"#0033a0\", \"#da291c\"]}\n                        >\n                          <VictoryLine data={dataLine[countyFips]?dataLine[countyFips]:dataLine[\"\"]}\n                            x='t' y='dcase'\n                            />\n                          <VictoryLine data={dataLine[countyFips]?dataLine[countyFips]:dataLine[\"\"]}\n                            x='t' y='ddeath'\n                            />\n                        </VictoryGroup>  \n                      </VictoryChart>\n                    </Grid.Column>\n                    <Grid.Column>\n                      <VictoryChart theme={VictoryTheme.material}\n                        height={250}       \n                        scale={{y: 'log'}}                 \n                        minDomain={{y:1}}>\n                        <VictoryLegend\n                          x={10} y={10}\n                          orientation=\"horizontal\"\n                          colorScale={[\"#f2a900\", \"#0033a0\"]}\n                          data ={[\n                            {name: \"state new cases\"}, {name: \"county new cases\"}\n                            ]}\n                        />\n                        <VictoryAxis tickCount={2}\n                          tickFormat={(t)=> new Date(t*1000).toLocaleDateString()}/>\n                        <VictoryAxis dependentAxis tickCount={5}\n                          tickFormat={(y) => (y<1000?y:(y/1000+'k'))}\n\n                          />\n                        <VictoryGroup \n                          colorScale={[\"#f2a900\", \"#0033a0\"]}\n                        >\n                          <VictoryLine data={dataLine._state}\n                            x='t' y='dcase'\n                            />\n                          <VictoryLine data={dataLine[countyFips]?dataLine[countyFips]:dataLine[\"\"]}\n                            x='t' y='dcase'\n                            />\n                        </VictoryGroup>\n                      </VictoryChart>\n                    </Grid.Column>\n                  </Grid.Row>\n                  <Grid.Row columns={2}>\n                    <Grid.Column>\n                      <VictoryChart\n                        theme={VictoryTheme.material}\n                        domainPadding={20}\n                        padding={{left: 150, top: 50, bottom: 50}}\n                        height={400}\n                      >\n                        <VictoryAxis />\n                        <VictoryAxis dependentAxis tickCount={2}/>\n                        <VictoryGroup horizontal\n                          offset={10}\n                          style={{data: {width: 7}}}\n                          colorScale={[\"#b1b3b3\", \"#d0d0ce\", \"#0033a0\"]}\n                        >\n                          <VictoryBar\n                            data={dataBar._nation.slice(6)}\n                            x=\"nameShort\"\n                            y=\"value\"\n                          />\n                          <VictoryBar\n                            data={dataBar._state.slice(6)}\n                            x=\"nameShort\"\n                            y=\"value\"\n                          />\n                          <VictoryBar\n                            data={dataBar[countyFips]?dataBar[countyFips].slice(6):[]}\n                            x=\"nameShort\"\n                            y=\"value\"\n                          />\n                        </VictoryGroup>\n                      </VictoryChart>\n                    </Grid.Column>\n                    <Grid.Column>\n                      <VictoryChart\n                        theme={VictoryTheme.material}\n                        domainPadding={20}\n                        padding={{left: 150, top: 50, bottom: 50}}\n                        height={400}\n                      >\n                        <VictoryLegend\n                          x={10} y={10}\n                          orientation=\"horizontal\"\n                          colorScale={[\"#b1b3b3\", \"#d0d0ce\", \"#0033a0\"]}\n                          data ={[\n                            {name: \"nation\"}, {name: \"state\"}, {name: \"county\"}\n                            ]}\n                        />\n                        <VictoryAxis />\n                        <VictoryAxis dependentAxis tickCount={2}/>\n                        <VictoryGroup horizontal\n                          offset={10}\n                          style={{data: {width: 7}}}\n                          colorScale={[\"#b1b3b3\", \"#d0d0ce\", \"#0033a0\"]}\n                        >\n                          <VictoryBar\n                            data={dataBar._nation.slice(0,6)}\n                            x=\"nameShort\"\n                            y=\"value\"\n                          />\n                          <VictoryBar\n                            data={dataBar._state.slice(0,6)}\n                            x=\"nameShort\"\n                            y=\"value\"\n                          />\n                          <VictoryBar\n                            data={dataBar[countyFips]?dataBar[countyFips].slice(0,6):[]}\n                            x=\"nameShort\"\n                            y=\"value\"\n                          />\n                        </VictoryGroup>\n                      </VictoryChart>\n                    </Grid.Column>\n                  </Grid.Row>\n                </Grid>\n              </Grid.Column>\n            </Grid.Row>\n            \n          </Grid>\n          </div>\n        }\n        <Notes />\n      </Container>\n      <ReactTooltip>{tooltipContent}</ReactTooltip>\n    </div>\n    );\n  } else{\n    return <Loader active inline='centered' />\n  }\n\n\n\n\n}","import React, { useEffect, useState } from 'react'\nimport { Container, Grid, Breadcrumb, Header, Loader, Statistic, Table, Divider } from 'semantic-ui-react'\nimport AppBar from './AppBar';\nimport Geographies from './Geographies';\nimport Geography from './Geography';\nimport ComposableMap from './ComposableMap';\nimport { VictoryChart, \n  VictoryGroup, \n  VictoryBar, \n  VictoryTheme, \n  VictoryAxis, \n  VictoryLegend,\n  VictoryLine,\n  VictoryLabel, \n  VictoryScatter,\n} from 'victory';\n\nimport { useParams, useHistory } from 'react-router-dom';\nimport Notes from './Notes';\nimport ReactTooltip from \"react-tooltip\";\nimport fips2county from './fips2county.json'\nimport configs from \"./state_config.json\";\nimport _ from 'lodash';\n\n\nexport default function CountyReport() {\n\n  let { stateFips, countyFips } = useParams();\n  const [config, setConfig] = useState();\n  const [stateName, setStateName] = useState('');\n  const [countyName, setCountyName] = useState('');\n  const history = useHistory();\n  const [dataBar, setDataBar] = useState();\n  const [dataLine, setDataLine] = useState();\n  const [tooltipContent, setTooltipContent] = useState('');\n  const [covidMetric, setCovidMetric] = useState({case: 'N/A', death: 'N/A', t: 'n/a'});\n  const scatterX0 = 'COVID Mortality / 100k';\n  const scatterX1 = 'COVID Case Rate / 1M';\n  const scatterX2 = '% Over 65 Yrs';\n  const scatterX3 = '% Poverty';\n  const scatterX4 = '% Unemployed';\n\n  useEffect(()=>{\n\n    const configMatched = configs.find(s => s.fips === stateFips);\n    setConfig(configMatched);\n    setStateName(configMatched.name);\n    setCountyName(fips2county[stateFips+countyFips]);\n\n    fetch('/emory-covid19/data/barchartSV'+stateFips+'.json').then(res => res.json())\n      .then(data => setDataBar(data));\n    \n    fetch('/emory-covid19/data/linechartSV'+stateFips+'.json').then(res => res.json())\n      .then(data => setDataLine(data));\n\n  }, [stateFips]);\n\n  useEffect(() => {\n    if (dataLine && dataLine[countyFips]){\n      setCovidMetric(_.takeRight(dataLine[countyFips])[0]);\n    }\n  }, [dataLine])\n\n  if (dataBar && dataLine) {\n\n  return (\n      <div>\n        <AppBar menu='countyReport'/>\n        <Container style={{marginTop: '8em'}}>\n          {config &&\n          <div>\n          <Breadcrumb>\n            <Breadcrumb.Section link onClick={() => history.push('/emory-covid19')}>United States</Breadcrumb.Section>\n            <Breadcrumb.Divider />\n            <Breadcrumb.Section link onClick={() => history.push('/emory-covid19/'+stateFips)}>{stateName}</Breadcrumb.Section>\n            <Breadcrumb.Divider />\n            <Breadcrumb.Section active>{countyName}</Breadcrumb.Section>\n            <Breadcrumb.Divider />\n          </Breadcrumb>\n          <Header as='h2'>\n            <Header.Content>\n              Covid-19 Outcomes in {countyName}\n              <Header.Subheader>\n              Health determinants impact COVID-19 outcomes. \n              </Header.Subheader>\n            </Header.Content>\n          </Header>\n          <Grid style={{paddingTop: '2em'}}>\n            <Grid.Row>\n              <Grid.Column>\n                <Statistic size='small'>\n                  <Statistic.Value>\n                    {covidMetric.case===null?'0':covidMetric.case.toLocaleString()}\n                  </Statistic.Value>\n                  <Statistic.Label>Cases</Statistic.Label>\n                </Statistic>\n                <Statistic style={{paddingLeft: '2em'}} size='small'>\n                  <Statistic.Value>\n                    {covidMetric.death===null?'0':covidMetric.death.toLocaleString()}\n                  </Statistic.Value>\n                  <Statistic.Label>Death</Statistic.Label>\n                </Statistic>\n                <span style={{padding: '3em', color: '#bdbfc1'}}>Last updated on {covidMetric.t==='n/a'?'N/A':(new Date(covidMetric.t*1000).toLocaleDateString())}</span>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n          <Grid columns={3}>\n            <Grid.Row>\n              <Grid.Column>\n                <VictoryChart theme={VictoryTheme.material}\n                  height={250}\n                  scale={{y: 'log'}}\n                  padding={{left: 50, right: 10, top: 60, bottom: 30}}\n                  minDomain={{y:1}}>\n                  <VictoryLabel text=\"Cases & Deaths over Time\" x={180} y={20} textAnchor=\"middle\"/>\n                  <VictoryLegend\n                    x={10} y={35}\n                    orientation=\"horizontal\"\n                    colorScale={[\"#e31b23\", \"#333333\"]}\n                    data ={[\n                      {name: \"new cases\"}, {name: \"new deaths\"}\n                      ]}\n                  />\n                  <VictoryAxis tickCount={2}\n                    tickFormat={(t)=> new Date(t*1000).toLocaleDateString()}/>\n                  <VictoryAxis dependentAxis tickCount={5}\n                    tickFormat={(y) => (y<1000?y:(y/1000+'k'))}\n                    />\n                  <VictoryGroup \n                    colorScale={[\"#e31b23\", \"#333333\"]}\n                  >\n                    <VictoryLine data={dataLine[countyFips]?dataLine[countyFips]:dataLine[\"\"]}\n                      x='t' y='dcase'\n                      />\n                    <VictoryLine data={dataLine[countyFips]?dataLine[countyFips]:dataLine[\"\"]}\n                      x='t' y='ddeath'\n                      />\n                  </VictoryGroup>  \n                </VictoryChart>\n              </Grid.Column>\n              <Grid.Column>\n                <VictoryChart theme={VictoryTheme.material}\n                  height={250}\n                  scale={{y: 'log'}}\n                  padding={{left: 50, right: 10, top: 60, bottom: 30}}\n                  minDomain={{y:1}}>\n                  <VictoryLabel text=\"County vs. State Cases over Time\" x={180} y={20} textAnchor=\"middle\"/>\n                  <VictoryLegend\n                    x={10} y={35}\n                    orientation=\"horizontal\"\n                    colorScale={[\"#df7a1c\", \"#e31b23\"]}\n                    data ={[\n                      {name: \"state new cases\"}, {name: \"county new cases\"}\n                      ]}\n                  />\n                  <VictoryAxis tickCount={2}\n                    tickFormat={(t)=> new Date(t*1000).toLocaleDateString()}/>\n                  <VictoryAxis dependentAxis tickCount={5}\n                    tickFormat={(y) => (y<1000?y:(y/1000+'k'))}\n                    />\n                  <VictoryGroup \n                    colorScale={[\"#df7a1c\", \"#e31b23\"]}\n                  >\n                    <VictoryLine data={dataLine._state}\n                      x='t' y='dcase'\n                      />\n                    <VictoryLine data={dataLine[countyFips]?dataLine[countyFips]:dataLine[\"\"]}\n                      x='t' y='dcase'\n                      />\n                  </VictoryGroup>  \n                </VictoryChart>\n              </Grid.Column>\n              <Grid.Column>\n                <VictoryChart theme={VictoryTheme.material}\n                  height={250}\n                  scale={{y: 'log'}}\n                  padding={{left: 50, right: 10, top: 60, bottom: 30}}\n                  minDomain={{y:1}}>\n                  <VictoryLabel text=\"County vs. State Deaths over Time\" x={180} y={20} textAnchor=\"middle\"/>\n                  <VictoryLegend\n                    x={10} y={35}\n                    orientation=\"horizontal\"\n                    colorScale={[\"#df7a1c\", \"#e31b23\"]}\n                    data ={[\n                      {name: \"state new deaths\"}, {name: \"county new deaths\"}\n                      ]}\n                  />\n                  <VictoryAxis tickCount={2}\n                    tickFormat={(t)=> new Date(t*1000).toLocaleDateString()}/>\n                  <VictoryAxis dependentAxis tickCount={5}\n                    tickFormat={(y) => (y<1000?y:(y/1000+'k'))}\n                    />\n                  <VictoryGroup \n                    colorScale={[\"#df7a1c\", \"#e31b23\"]}\n                  >\n                    <VictoryLine data={dataLine._state}\n                      x='t' y='ddeath'\n                      />\n                    <VictoryLine data={dataLine[countyFips]?dataLine[countyFips]:dataLine[\"\"]}\n                      x='t' y='ddeath'\n                      />\n                  </VictoryGroup>  \n                </VictoryChart>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n          <Grid columns={1}>\n            <Grid.Row>\n              <Grid.Column>\n                <VictoryChart\n                  theme={VictoryTheme.material}\n                  domainPadding={20}\n                  width={960}\n                  height={300}\n                  padding={{left: 50, right: 10, top: 60, bottom: 80}}\n                >\n                  <VictoryLabel text=\"Heatlh Determinants and COVID Statistics\" x={480} y={20} textAnchor=\"middle\"/>\n                  <VictoryLegend\n                    x={80} y={40}\n                    orientation=\"horizontal\"\n                    colorScale={[\"#bdbfc1\", \"#f4c082\", \"#e31b23\"]}\n                    data ={[\n                      {name: \"nation\"}, {name: \"state\"}, {name: \"county\"}\n                      ]}\n                  />\n                  <VictoryGroup\n                    offset={10}\n                    style={{data: {width: 5}}}\n                    colorScale={[\"#bdbfc1\", \"#f4c082\", \"#e31b23\"]}\n                  >\n                    <VictoryBar\n                      data={_.sortBy(dataBar._nation, 'seq')}\n                      x=\"nameShort\"\n                      y=\"value\"\n                    />\n                    <VictoryBar\n                      data={_.sortBy(dataBar._state, 'seq')}\n                      x=\"nameShort\"\n                      y=\"value\"\n                    />\n                    <VictoryBar\n                      data={_.sortBy(dataBar[countyFips], 'seq')}\n                      x=\"nameShort\"\n                      y=\"value\"\n                    />\n                  </VictoryGroup>\n                  <VictoryAxis tickLabelComponent={<VictoryLabel angle={-45} textAnchor=\"end\" style={{fontSize: '8px'}}/>} /> \n                  <VictoryAxis dependentAxis/> \n                </VictoryChart>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n          <Grid columns={1} textAlign='center'>\n            <Grid.Row>\n              <Grid.Column>\n              <small style={{fontWeight: 700}}>{'Statistics of '+countyName + ' and Other Counties in '+ stateName}</small>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n          <Grid columns={4}>\n            <Grid.Row>\n              <Grid.Column>\n                <VictoryChart\n                  width={400}\n                  height={300}\n                  padding={{left: 80, right: 10, top: 50, bottom: 50}}>\n                  <VictoryLegend\n                    x={10} y={10}\n                    orientation=\"horizontal\"\n                    colorScale={[\"#bdbfc1\", \"#e31b23\"]}\n                    data ={[\n                      {name: ('Other counties in '+ stateName)}, {name: countyName}\n                      ]}\n                  />\n                  <VictoryScatter\n                    sortKey={(d) => d.fips===countyFips}\n                    style={{ data: { fill: ({datum}) => datum.fips===countyFips?\"#e31b23\":\"#bdbfc1\",\n                             fillOpacity: ({datum}) => datum.fips===countyFips?1.0:0.5} }}\n                    data={_.filter(dataBar._scatter, (d)=> (d[scatterX0] && d[scatterX1]))}\n                    size={5}\n                    x={scatterX1}\n                    y={scatterX0}\n                  />\n                  <VictoryAxis label={scatterX1}/>\n                  <VictoryAxis dependentAxis label={scatterX0} style={{ axisLabel: {padding: 40} }} />\n                </VictoryChart>\n              </Grid.Column>\n              <Grid.Column>\n                <VictoryChart\n                  width={400}\n                  height={300}\n                  padding={{left: 80, right: 10, top: 50, bottom: 50}}>\n                  <VictoryScatter\n                    sortKey={(d) => d.fips===countyFips}\n                    style={{ data: { fill: ({datum}) => datum.fips===countyFips?\"#e31b23\":\"#bdbfc1\",\n                             fillOpacity: ({datum}) => datum.fips===countyFips?1.0:0.5} }}\n                    data={_.filter(dataBar._scatter, (d)=> (d[scatterX0] && d[scatterX2]))}\n                    size={5}\n                    x={scatterX2}\n                    y={scatterX0}\n                  />\n                  <VictoryAxis label={scatterX2}/>\n                  <VictoryAxis dependentAxis label={scatterX0} style={{ axisLabel: {padding: 40} }} />\n                </VictoryChart>\n              </Grid.Column>\n              <Grid.Column>\n                <VictoryChart\n                  width={400}\n                  height={300}\n                  padding={{left: 80, right: 10, top: 50, bottom: 50}}>\n                  <VictoryScatter\n                    sortKey={(d) => d.fips===countyFips}\n                    style={{ data: { fill: ({datum}) => datum.fips===countyFips?\"#e31b23\":\"#bdbfc1\",\n                             fillOpacity: ({datum}) => datum.fips===countyFips?1.0:0.5} }}\n                    data={_.filter(dataBar._scatter, (d)=> (d[scatterX1] && d[scatterX3]))}\n                    size={5}\n                    x={scatterX3}\n                    y={scatterX1}\n                  />\n                  <VictoryAxis label={scatterX3}/>\n                  <VictoryAxis dependentAxis label={scatterX1} style={{ axisLabel: {padding: 40} }} />\n                </VictoryChart>\n              </Grid.Column>\n              <Grid.Column>\n                <VictoryChart\n                  width={400}\n                  height={300}\n                  padding={{left: 80, right: 10, top: 50, bottom: 50}}>\n                  <VictoryScatter\n                    sortKey={(d) => d.fips===countyFips}\n                    style={{ data: { fill: ({datum}) => datum.fips===countyFips?\"#e31b23\":\"#bdbfc1\",\n                             fillOpacity: ({datum}) => datum.fips===countyFips?1.0:0.5} }}\n                    data={_.filter(dataBar._scatter, (d)=> (d[scatterX1] && d[scatterX4]))}\n                    size={5}\n                    x={scatterX4}\n                    y={scatterX1}\n                  />\n                  <VictoryAxis label={scatterX4}/>\n                  <VictoryAxis dependentAxis label={scatterX1} style={{ axisLabel: {padding: 40} }} />\n                </VictoryChart>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n          <Header as='h4'>\n            <Header.Content>\n              Data Table\n            </Header.Content>\n          </Header>\n          <Table striped compact basic='very'>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell>Variable Name</Table.HeaderCell>\n                <Table.HeaderCell>{countyName}</Table.HeaderCell>\n                <Table.HeaderCell>{stateName}</Table.HeaderCell>\n                <Table.HeaderCell>United States</Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {_.map(_.sortBy(dataBar[countyFips], 'seq'), \n                (d) => (<Table.Row key={d.nameShort}>\n                  <Table.Cell>{d.nameShort}</Table.Cell>\n                  <Table.Cell>{Math.round(d.value*100)/100}</Table.Cell>\n                  <Table.Cell>{Math.round(_.find(dataBar._state, (x) => x.name==d.name).value*100)/100}</Table.Cell>\n                  <Table.Cell>{Math.round(_.find(dataBar._nation, (x) => x.name==d.name).value*100)/100}</Table.Cell>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n          </div>\n        }\n        <Notes />\n      </Container>\n      <ReactTooltip>{tooltipContent}</ReactTooltip>\n    </div>\n    );\n  } else{\n    return <Loader active inline='centered' />\n  }\n\n\n\n}","import React, { useEffect, useState } from 'react'\nimport { Container, Dropdown, Header, Grid } from 'semantic-ui-react'\nimport AppBar from './AppBar';\nimport Geographies from './Geographies';\nimport Geography from './Geography';\nimport ComposableMap from './ComposableMap';\nimport { useParams, useHistory } from 'react-router-dom';\nimport Notes from './Notes';\nimport ReactTooltip from \"react-tooltip\";\nimport stateOptions from \"./stateOptions.json\";\nimport measureOptions from \"./measureOptions.json\";\nimport configs from \"./state_config.json\";\nimport _ from 'lodash';\nimport { scaleQuantile } from \"d3-scale\";\n\nexport default function CountyCompare() {\n\n  const [stateFips, setStateFips] = useState();\n  const [measureA, setMeasureA] = useState();\n  const [measureB, setMeasureB] = useState();  \n  const [colorScaleA, setColorScaleA] = useState();\n  const [colorScaleB, setColorScaleB] = useState();\n  const [config, setConfig] = useState();\n  const [tooltipContent, setTooltipContent] = useState('');\n  const [dataBar, setDataBar] = useState();\n\n  useEffect(()=>{\n    \n    const configMatched = configs.find(s => s.fips === stateFips);\n    setConfig(configMatched);\n\n    if (stateFips){\n      fetch('/emory-covid19/data/barchartSV' + stateFips + '.json').then(res => res.json())\n        .then(data => {\n          let coldata = {};\n          const dataFltrd = _.filter(data, (d, k)=>{\n              _.each(d, (item)=> {item.fips = k});\n              return ([\"scatter\", \"nation\", \"state\", \"\"].indexOf(k) < 0);\n            });\n          _.each(dataFltrd, (d) => {\n            _.each(d, (item)=>{\n              if (!(item.nameShort in coldata)){\n                coldata[item.nameShort] = {}\n              }\n              coldata[item.nameShort][item.fips] = item.value; \n            });\n          });\n          setDataBar(coldata);\n        });\n      setMeasureA(null);\n      setMeasureB(null);\n      setColorScaleA(null);\n      setColorScaleB(null);\n    }\n  }, [stateFips]);\n\n  useEffect(() => {\n    if (measureA){\n      const cs = scaleQuantile()\n        .domain(_.map(dataBar[measureA], d=>d))\n        .range([\n          \"#ffedea\",\n          \"#ffcec5\",\n          \"#ffad9f\",\n          \"#ff8a75\",\n          \"#ff5533\",\n          \"#e2492d\",\n          \"#be3d26\",\n          \"#9a311f\",\n          \"#782618\"\n        ]);\n      let scaleMap = {}\n      _.each(dataBar[measureA], d=>{\n        scaleMap[d] = cs(d)});\n      setColorScaleA(scaleMap);\n    }\n  }, [measureA]);\n\n  useEffect(() => {\n    if (measureB){\n      const cs = scaleQuantile()\n        .domain(_.map(dataBar[measureB], d=>d))\n        .range([\n          \"#ffedea\",\n          \"#ffcec5\",\n          \"#ffad9f\",\n          \"#ff8a75\",\n          \"#ff5533\",\n          \"#e2492d\",\n          \"#be3d26\",\n          \"#9a311f\",\n          \"#782618\"\n        ]);\n      let scaleMap = {}\n      _.each(dataBar[measureB], d=>{\n        scaleMap[d] = cs(d)});\n      setColorScaleB(scaleMap);\n    }\n  }, [measureB]);  \n\n  return (\n      <div>\n        <AppBar menu='countyCompare'/>\n        <Container style={{marginTop: '8em'}}>\n          <Header as='h3'>\n            <Header.Content style={{fontWeight: 400}}>\n              Side-by-Side View of Counties in&nbsp;\n              <Dropdown\n                icon=''\n                style={{background: '#fff', \n                        fontWeight: 400, \n                        width: '200px',\n                        borderTop: 'none',\n                        borderLeft: 'none',\n                        borderRight: 'none', \n                        borderBottom: '1px solid #bdbfc1',\n                        borderRadius: 0,\n                        minHeight: '2.2em',\n                        paddingBottom: '0.2em'}}\n                placeholder='Select State'\n                inline\n                search\n                selection\n                options={stateOptions}\n                onChange={(e, { value }) => {\n                  setStateFips(value);\n                }}\n              />\n            </Header.Content>\n          </Header>\n          {config &&\n          <Grid columns={2} style={{paddingTop: '2em', minHeight: '400px'}}>\n            <Grid.Row>\n              <Grid.Column>\n                <Grid columns={2} centered>\n                  <Grid.Column>\n                    <Dropdown\n                      style={{background: '#fff', \n                              fontWeight: 400, \n                              borderTop: 'none',\n                              borderLeft: 'none',\n                              borderRight: 'none', \n                              borderBottom: '1ox solid #bdbfc1',\n                              borderRadius: 0}}\n                      placeholder='Select Measure'\n                      search\n                      selection\n                      value={measureA}\n                      options={measureOptions}\n                      onChange={(e, { value }) => {\n                        setMeasureA(value)\n                      }}\n                    />\n                  </Grid.Column>\n                </Grid>\n              </Grid.Column>\n              <Grid.Column>\n                <Grid columns={2} centered>\n                  <Grid.Column>\n                    <Dropdown\n                      style={{background: '#fff', \n                              fontWeight: 400, \n                              borderTop: 'none',\n                              borderLeft: 'none',\n                              borderRight: 'none', \n                              borderBottom: '1ox solid #bdbfc1',\n                              borderRadius: 0}}\n                      placeholder='Select Measure'\n                      fluid\n                      labeled\n                      search\n                      selection\n                      value={measureB}\n                      options={measureOptions}\n                      onChange={(e, { value }) => {\n                        setMeasureB(value)\n                      }}\n                    />\n                  </Grid.Column>\n                </Grid>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                <ComposableMap projection=\"geoAlbersUsa\" \n                  projectionConfig={{scale:`${config.scale}`}} \n                  width={500} \n                  height={600} \n                  data-tip=\"\"\n                  offsetX={config.offsetX}\n                  offsetY={config.offsetY}>\n                  <Geographies geography={config.url}>\n                    {({geographies}) => geographies.map(geo => \n                      <Geography \n                        key={geo.rsmKey} \n                        geography={geo} \n                        onMouseEnter={()=>{\n                          if(measureA && colorScaleA){\n                            const cur = dataBar[measureA][geo.properties.COUNTYFP];\n                            setTooltipContent(cur?(Math.round(cur*100)/100):'');\n                          }\n                        }}\n                        onMouseLeave={()=>{\n                          setTooltipContent(\"\")\n                        }}\n                        fill={(measureA && colorScaleA && dataBar[measureA][geo.properties.COUNTYFP])?\n                                colorScaleA[dataBar[measureA][geo.properties.COUNTYFP]] : \"#EEE\"}\n                      />\n                    )}\n                  </Geographies>\n                </ComposableMap>\n              </Grid.Column>\n              <Grid.Column>\n                <ComposableMap projection=\"geoAlbersUsa\" \n                  projectionConfig={{scale:`${config.scale}`}} \n                  width={500} \n                  height={600} \n                  data-tip=\"\"\n                  offsetX={config.offsetX}\n                  offsetY={config.offsetY}>\n                  <Geographies geography={config.url}>\n                    {({geographies}) => geographies.map(geo => \n                      <Geography \n                        key={geo.rsmKey} \n                        geography={geo} \n                        onMouseEnter={()=>{\n                          if(measureB && colorScaleB){\n                            const cur = dataBar[measureB][geo.properties.COUNTYFP];\n                            setTooltipContent(cur?(Math.round(cur*100)/100):'');\n                          }\n                        }}\n                        onMouseLeave={()=>{\n                          setTooltipContent(\"\")\n                        }}\n                        fill = {(measureB && colorScaleB && dataBar[measureB][geo.properties.COUNTYFP])?\n                                colorScaleB[dataBar[measureB][geo.properties.COUNTYFP]] : \"#EEE\"}\n                      />\n                    )}\n                  </Geographies>\n                </ComposableMap>\n                <ReactTooltip>{tooltipContent}</ReactTooltip>\n              </Grid.Column>\n            </Grid.Row>  \n          </Grid>\n          }\n          <Notes />\n        </Container>\n\n      </div>\n    );\n\n}","// React\nimport React from \"react\";\n// Components & Hooks\nimport USMap from \"./USMap\";\nimport StateMap from \"./StateMap\";\nimport CountyReport from \"./CountyReport\";\nimport CountyCompare from \"./CountyCompare\";\nimport 'semantic-ui-css/semantic.min.css'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\n\nApp.propTypes = {};\nexport default function App() {\n\n  return (\n      <Router>\n        <Switch>\n          <Route path='/emory-covid19/compare-counties'>\n            <CountyCompare />\n          </Route>\n          <Route path='/emory-covid19/:stateFips/:countyFips'>\n            <CountyReport />\n          </Route>  \n          <Route path='/emory-covid19/:stateFips'>\n            <StateMap />\n          </Route>\n          <Route path='/emory-covid19'>\n            <USMap />\n          </Route>\n          <Route path=\"*\">\n            <Redirect to='/emory-covid19/'/>\n          </Route>\n        </Switch>\n      </Router>\n  );\n}\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}