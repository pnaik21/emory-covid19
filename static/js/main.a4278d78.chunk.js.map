{"version":3,"sources":["components/AppBar.js","components/MapProvider.js","utils.js","components/useGeographies.js","components/Geographies.js","components/Geography.js","components/ComposableMap.js","components/Marker.js","components/Annotation.js","components/Notes.js","components/USMap.js","components/StateMap.js","components/CountyReport.js","components/CountyCompare.js","components/App.js","index.js"],"names":["AppBar","props","history","useHistory","Menu","borderless","fixed","Container","Item","as","header","onClick","push","style","fontWeight","color","lineHeight","active","menu","content","name","position","Image","size","src","geoPath","d3Geo","projections","MapContext","createContext","MapProvider","width","height","offsetX","offsetY","projection","projectionConfig","restProps","center","cx","cy","rotate","rx","ry","rz","parallels","p1","p2","s","scale","projMemo","useMemo","scl","proj","translate","forEach","d","makeProjection","useCallback","value","path","Provider","getFeatures","geographies","parseGeographies","Array","isArray","feats","feature","objects","Object","keys","features","useGeographies","geography","useContext","useState","setGeographies","useEffect","url","window","fetch","then","res","ok","Error","statusText","json","catch","error","console","log","geos","map","i","rsmKey","svgPath","prepareFeatures","Geographies","children","className","length","memo","onMouseEnter","onMouseLeave","onMouseDown","onMouseUp","onFocus","onBlur","isPressed","setPressed","isFocused","setFocus","tabIndex","evt","ComposableMap","Marker","coordinates","x","y","transform","Annotation","subject","connectorProps","dx","dy","curve","connectorPath","curvature","curveX","curveY","createConnectorPath","fill","stroke","Notes","paddingTop","Divider","Grid","Row","Column","columns","List","href","hidden","MapLabels","offsets","VT","NH","MA","RI","CT","NJ","DE","MD","DC","geo","centroid","geoCentroid","cur","stateLabels","find","val","id","key","indexOf","fontSize","textAnchor","alignmentBaseline","USMap","stateName","setStateName","fips","setFips","tooltipContent","setTooltipContent","dataScatter","setDataScatter","dataBar","setDataBar","setStateLabels","colorScale","setColorScale","data","cs","scaleQuantile","domain","_","range","scaleMap","each","marginTop","Breadcrumb","Section","Header","Content","Subheader","data-tip","stateFips","substring","configMatched","configs","padding","left","right","top","bottom","orientation","sortKey","datum","fillOpacity","filter","label","dependentAxis","axisLabel","tickCount","tickFormat","Math","round","Loader","inline","StateMap","useParams","config","setConfig","countyFips","setCountyFips","countyName","setCountyName","dataLine","setDataLine","link","properties","COUNTYFP","NAME","default","hover","outline","pressed","theme","VictoryTheme","material","minDomain","t","Date","toLocaleDateString","_state","domainPadding","horizontal","offset","_nation","slice","CountyReport","case","death","covidMetric","setCovidMetric","scatterX0","scatterX1","fips2county","takeRight","Statistic","Value","toLocaleString","Label","paddingLeft","text","sortBy","tickLabelComponent","angle","textAlign","_scatter","Table","striped","compact","basic","HeaderCell","Body","nameShort","Cell","CountyCompare","setStateFips","measureA","setMeasureA","measureB","setMeasureB","colorScaleA","setColorScaleA","colorScaleB","setColorScaleB","coldata","dataFltrd","k","item","Dropdown","icon","background","borderTop","borderLeft","borderRight","borderBottom","borderRadius","minHeight","paddingBottom","placeholder","search","selection","options","stateOptions","onChange","e","centered","measureOptions","fluid","labeled","App","to","rootElement","document","getElementById","ReactDOM","render"],"mappings":"y0nFAOe,SAASA,EAAOC,GAE7B,MAAMC,EAAUC,cAEhB,OACE,kBAAC,IAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,YAAU,EAACC,MAAM,OACrB,kBAACC,EAAA,EAAD,KACE,kBAACH,EAAA,EAAKI,KAAN,CAAWC,GAAG,IAAIC,QAAM,EAACC,QAAS,IAAMT,EAAQU,KAAK,mBACnD,0BAAMC,MAAO,CAACC,WAAY,IAAKC,MAAO,UAAWC,WAAY,MAA7D,WACO,6BADP,gBACyB,6BADzB,cAIF,kBAACZ,EAAA,EAAKI,KAAN,CACES,OAAqB,iBAAbhB,EAAMiB,KACdC,QAAQ,OACRR,QAAS,IAAMT,EAAQU,KAAK,kBAC5BQ,KAAK,iBACP,kBAAChB,EAAA,EAAKI,KAAN,CACES,OAAqB,kBAAbhB,EAAMiB,KACdC,QAAQ,mBACRR,QAAS,IAAMT,EAAQU,KAAK,mCAC5BQ,KAAK,kBACP,kBAAChB,EAAA,EAAKA,KAAN,CAAWiB,SAAS,SAClB,kBAACjB,EAAA,EAAKI,KAAN,CAAWC,GAAG,IAAIC,QAAM,GACtB,kBAACY,EAAA,EAAD,CAAOC,KAAK,QAAQC,IAAI,iC,6CCvB9BC,EAA4BC,IAAhBC,E,YAAgBD,E,aAE9BE,EAAaC,0BAkCbC,EAAe,IAQd,IAPLC,EAOI,EAPJA,MACAC,EAMI,EANJA,OACAC,EAKI,EALJA,QACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,WACAC,EAEI,EAFJA,iBACGC,EACC,8FACaD,EAAiBE,QAAU,GADxC,mBACGC,EADH,KACOC,EADP,OAEiBJ,EAAiBK,QAAU,GAF5C,mBAEGC,EAFH,KAEOC,EAFP,KAEWC,EAFX,OAGaR,EAAiBS,WAAa,GAH3C,mBAGGC,EAHH,KAGOC,EAHP,KAIEC,EAAIZ,EAAiBa,OAAS,KAE9BC,EAAWC,kBAAQ,IA9CJ,GACrBf,mBAAmB,GACnBD,aAAa,gBACbJ,QAAQ,IACRC,SAAS,IACTC,UAAU,EACVC,UAAU,MAIV,GAFqC,oBAAfC,EAEV,OAAOA,EAEnB,MAAMiB,EAAMhB,EAAiBa,OAAS,KAEtC,IAAII,EAAO1B,EAAYQ,KAAcmB,UAAU,CAACvB,EAAM,EAAKE,EAASmB,EAAI,IAC5BpB,EAAO,EAAKE,EAASkB,EAAI,MAcrE,MAZkB,CAChBC,EAAKf,OAAS,SAAW,KACzBe,EAAKZ,OAAS,SAAW,KACzBY,EAAKJ,MAAQ,QAAU,KACvBI,EAAKR,UAAY,YAAc,MAGvBU,QAAQC,IACXA,IACLH,EAAOA,EAAKG,GAAGpB,EAAiBoB,IAAMH,EAAKG,SAGtCH,GAkBEI,CAAe,CACpBrB,iBAAkB,CAChBE,OAASC,GAAa,IAAPA,GAAcC,GAAa,IAAPA,EAAY,CAACD,EAAIC,GAAM,KAC1DC,OAASC,GAAa,IAAPA,GAAcC,GAAa,IAAPA,EAAY,CAACD,EAAIC,EAAIC,GAAM,KAC9DC,UAAYC,GAAa,IAAPA,GAAcC,GAAa,IAAPA,EAAY,CAACD,EAAIC,GAAM,KAC7DE,MAAOD,GAETb,aACAJ,QACAC,SACAC,UACAC,YAED,CAAEH,EAAOC,EAAQG,EAAYI,EAAIC,EAAIE,EAAIC,EAAIC,EAAIE,EAAIC,EAAIC,EAAGf,EAASC,IAElEmB,EAAOK,sBAAYR,EAAU,CAACA,IAE9BS,EAAQR,kBAAQ,KACb,CACLpB,QACAC,SACAG,WAAYkB,EACZO,KAAMnC,IAAUU,WAAWkB,KAE5B,CAAEtB,EAAOC,EAAQqB,IAEpB,OAAQ,kBAACzB,EAAWiC,SAAZ,eAAqBF,MAAOA,GAAWtB,K,sBCjE1C,SAASyB,EAAYC,EAAaC,GACvC,GAAIC,MAAMC,QAAQH,GAAc,OAAOC,EAAmBA,EAAiBD,GAAeA,EAC1F,MAAMI,EAAQC,YACZL,EACAA,EAAYM,QAAQC,OAAOC,KAAKR,EAAYM,SAAS,KACrDG,SACF,OAAOR,EAAmBA,EAAiBG,GAASA,ECrBvC,SAASM,GAAe,UAAEC,EAAF,iBAAaV,IAAqB,MAC/DJ,EAASe,qBAAW/C,GAApBgC,KAD8D,EAEhCgB,qBAFgC,mBAE/Db,EAF+D,KAElDc,EAFkD,KAoBtE,OAhBAC,oBAAU,KDDL,IAA0BC,ECEzB,qBAAOC,SDoCuC,kBClCrCN,GDJgBK,ECKVL,EDJdO,MAAMF,GACVG,KAAKC,IACJ,IAAKA,EAAIC,GACP,MAAMC,MAAMF,EAAIG,YAElB,OAAOH,EAAII,SACVC,MAAMC,IACPC,QAAQC,IAAI,+CAAgDF,MCHhCP,KAAKU,IAC3BA,GAAMf,EAAef,EAAY8B,EAAM5B,MAG7Ca,EAAef,EAAYY,EAAWV,MAEvC,CAACU,EAAWV,IAMR,CAAED,YAJMZ,kBAAQ,IDQlB,SAAyBY,EAAaH,GAC3C,OAAOG,EAAcA,EAAY8B,IAAI,CAACrC,EAAGsC,IAChC,eACFtC,EADL,CAEEuC,OAAO,OAAD,OAASD,GACfE,QAASpC,EAAKJ,MAEb,GCdIyC,CAAgBlC,EAAaH,GACnC,CAACG,EAAaH,KCcJsC,MA/BM,IAMd,IALLxB,EAKI,EALJA,UACAyB,EAII,EAJJA,SACAnC,EAGI,EAHJA,iBAGI,IAFJoC,iBAEI,MAFQ,GAER,EADD/D,EACC,+EACyBsC,qBAAW/C,GAAhCgC,EADJ,EACIA,KAAMzB,EADV,EACUA,WACN4B,EAAgBU,EAAe,CAAEC,YAAWV,qBAA5CD,YAER,OACE,qCAAGqC,UAAS,0BAAqBA,IAAiB/D,GAE9C0B,GAAeA,EAAYsC,OAAS,GACpCF,EAAS,CAAEpC,cAAaH,OAAMzB,iBC2DvBmE,qBA5EI,IAWZ,IAVL5B,EAUI,EAVJA,UACA6B,EASI,EATJA,aACAC,EAQI,EARJA,aACAC,EAOI,EAPJA,YACAC,EAMI,EANJA,UACAC,EAKI,EALJA,QACAC,EAII,EAJJA,OAII,IAHJ/F,aAGI,MAHI,GAGJ,MAFJuF,iBAEI,MAFQ,GAER,EADD/D,EACC,oIAC4BuC,oBAAS,GADrC,mBACGiC,EADH,KACcC,EADd,OAE0BlC,oBAAS,GAFnC,mBAEGmC,EAFH,KAEcC,EAFd,KAoCJ,OACE,wCACEC,SAAS,IACTb,UAAS,wBAAmBA,GAC5B5C,EAAGkB,EAAUsB,QACbO,aArCJ,SAA0BW,GACxBF,GAAS,GACLT,GAAcA,EAAaW,IAoC7BV,aAjCJ,SAA0BU,GACxBF,GAAS,GACLH,GAAWC,GAAW,GACtBN,GAAcA,EAAaU,IA+B7BP,QA5BJ,SAAqBO,GACnBF,GAAS,GACLL,GAASA,EAAQO,IA2BnBN,OAxBJ,SAAoBM,GAClBF,GAAS,GACLH,GAAWC,GAAW,GACtBF,GAAQA,EAAOM,IAsBjBT,YAnBJ,SAAyBS,GACvBJ,GAAW,GACPL,GAAaA,EAAYS,IAkB3BR,UAfJ,SAAuBQ,GACrBJ,GAAW,GACPJ,GAAWA,EAAUQ,IAcvBrG,MAAOA,EAAMgG,GAAaE,EAAaF,EAAY,UAAY,QAAW,YACtExE,MCjBK8E,MAxCQ,IAShB,IAAD,IARJpF,aAQI,MARI,IAQJ,MAPJC,cAOI,MAPK,IAOL,MANJC,eAMI,MANM,EAMN,MALJC,eAKI,MALM,EAKN,MAJJC,kBAII,MAJS,gBAIT,MAHJC,wBAGI,MAHe,GAGf,MAFJgE,iBAEI,MAFQ,GAER,EADD/D,EACC,kGACJ,OACE,kBAACP,EAAD,CACEC,MAAOA,EACPC,OAAQA,EACRC,QAASA,EACTC,QAASA,EACTC,WAAYA,EACZC,iBAAkBA,GAElB,uCACEL,MAAOA,EACPC,OAAQA,EACRoE,UAAS,kBAAaA,IAClB/D,MC8DG+E,MArFC,IAYT,IAXLC,EAWI,EAXJA,YACAlB,EAUI,EAVJA,SACAI,EASI,EATJA,aACAC,EAQI,EARJA,aACAC,EAOI,EAPJA,YACAC,EAMI,EANJA,UACAC,EAKI,EALJA,QACAC,EAII,EAJJA,OAII,IAHJ/F,aAGI,MAHI,GAGJ,MAFJuF,iBAEI,MAFQ,GAER,EADD/D,EACC,+IACIF,EAAewC,qBAAW/C,GAA1BO,WADJ,EAE4ByC,oBAAS,GAFrC,mBAEGiC,EAFH,KAEcC,EAFd,OAG0BlC,oBAAS,GAHnC,mBAGGmC,EAHH,KAGcC,EAHd,OAKW7E,EAAWkF,GALtB,mBAKGC,EALH,KAKMC,EALN,KAuCJ,OACE,qCACEC,UAAS,oBAAeF,EAAf,aAAqBC,EAArB,KACTnB,UAAS,qBAAgBA,GACzBG,aApCJ,SAA0BW,GACxBF,GAAS,GACLT,GAAcA,EAAaW,IAmC7BV,aAhCJ,SAA0BU,GACxBF,GAAS,GACLH,GAAWC,GAAW,GACtBN,GAAcA,EAAaU,IA8B7BP,QA3BJ,SAAqBO,GACnBF,GAAS,GACLL,GAASA,EAAQO,IA0BnBN,OAvBJ,SAAoBM,GAClBF,GAAS,GACLH,GAAWC,GAAW,GACtBF,GAAQA,EAAOM,IAqBjBT,YAlBJ,SAAyBS,GACvBJ,GAAW,GACPL,GAAaA,EAAYS,IAiB3BR,UAdJ,SAAuBQ,GACrBJ,GAAW,GACPJ,GAAWA,EAAUQ,IAavBrG,MAAOA,EAAMgG,GAAaE,EAAaF,EAAY,UAAY,QAAW,YACtExE,GAEH8D,ICxBQsB,MAvCK,IASb,IARLC,EAQI,EARJA,QACAvB,EAOI,EAPJA,SACAwB,EAMI,EANJA,eAMI,IALJC,UAKI,MALC,GAKD,MAJJC,UAII,MAJC,GAID,MAHJC,aAGI,MAHI,EAGJ,MAFJ1B,iBAEI,MAFQ,GAER,EADD/D,EACC,8FAEWF,EADQwC,qBAAW/C,GAA1BO,YACkBuF,GAFtB,mBAEGJ,EAFH,KAEMC,EAFN,KAGEQ,ENqBD,SAA6BH,EAAK,GAAIC,EAAK,GAAIC,EAAQ,IAC5D,MAAME,EAAY/D,MAAMC,QAAQ4D,GAASA,EAAQ,CAACA,EAAOA,GACnDG,EAASL,EAAK,EAAII,EAAU,GAC5BE,EAASL,EAAK,EAAIG,EAAU,GAClC,MAAM,IAAN,OAAW,EAAX,IAAgB,EAAhB,MAAuBJ,EAAK,EAAIK,EAAhC,aAA2CJ,EAAK,EAAIK,EAApD,aAA+DN,EAA/D,aAAsEC,GMzBhDM,CAAoBP,EAAIC,EAAIC,GAElD,OACE,qCACEN,UAAS,oBAAeF,EAAIM,EAAnB,aAA0BL,EAAIM,EAA9B,KACTzB,UAAS,yBAAoBA,IACzB/D,GAEJ,wCAAMmB,EAAGuE,EAAeK,KAAK,cAAcC,OAAO,QAAWV,IAC5DxB,I,qDCzBQ,SAASmC,EAAMrI,GAE5B,OACE,yBAAKY,MAAO,CAAC0H,WAAY,MAAOzH,WAAY,MAC5C,kBAAC0H,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,IAAN,KACE,kBAACD,EAAA,EAAKE,OAAN,KACE,y2BAGoS,6BAHpS,0oBAOA,iGAPA,OAWJ,kBAACF,EAAA,EAAKC,IAAN,CAAUE,QAAS,GACjB,kBAACH,EAAA,EAAKE,OAAN,KACE,+BACE,2CAAmB,6BACnB,kBAACE,EAAA,EAAD,CAAMpI,GAAG,MACP,kBAACoI,EAAA,EAAKrI,KAAN,CAAWC,GAAG,MAAK,uBAAGqI,KAAK,kCAAR,+CACnB,kBAACD,EAAA,EAAKrI,KAAN,CAAWC,GAAG,MAAK,uBAAGqI,KAAK,+CAAR,wDACnB,kBAACD,EAAA,EAAKrI,KAAN,CAAWC,GAAG,MAAd,8EACA,kBAACoI,EAAA,EAAKrI,KAAN,CAAWC,GAAG,MAAd,mDACA,kBAACoI,EAAA,EAAKrI,KAAN,CAAWC,GAAG,MAAd,iCACA,kBAACoI,EAAA,EAAKrI,KAAN,CAAWC,GAAG,MAAd,+CAEF,uCAAe,6BAVjB,uHAYE,kBAACoI,EAAA,EAAD,CAAMpI,GAAG,MACP,kBAACoI,EAAA,EAAKrI,KAAN,CAAWC,GAAG,MAAd,qGACA,kBAACoI,EAAA,EAAKrI,KAAN,CAAWC,GAAG,MAAd,oHACA,kBAACoI,EAAA,EAAKrI,KAAN,CAAWC,GAAG,MAAd,2HACA,kBAACoI,EAAA,EAAKrI,KAAN,CAAWC,GAAG,MAAd,qGACA,kBAACoI,EAAA,EAAKrI,KAAN,CAAWC,GAAG,MAAd,gEACA,kBAACoI,EAAA,EAAKrI,KAAN,CAAWC,GAAG,MAAd,+EACA,kBAACoI,EAAA,EAAKrI,KAAN,CAAWC,GAAG,MAAd,+FACA,kBAACoI,EAAA,EAAKrI,KAAN,CAAWC,GAAG,MAAd,8EACA,kBAACoI,EAAA,EAAKrI,KAAN,CAAWC,GAAG,MAAd,2HACA,kBAACoI,EAAA,EAAKrI,KAAN,CAAWC,GAAG,MAAd,6GACA,kBAACoI,EAAA,EAAKrI,KAAN,CAAWC,GAAG,MAAd,+EACA,kBAACoI,EAAA,EAAKrI,KAAN,CAAWC,GAAG,MAAd,iFAIN,kBAACgI,EAAA,EAAKE,OAAN,KACE,+BACE,mDAA2B,6BAC3B,kBAACE,EAAA,EAAD,CAAMpI,GAAG,MACP,kBAACoI,EAAA,EAAKrI,KAAN,CAAWC,GAAG,MAAK,mDAAnB,yDACA,kBAACoI,EAAA,EAAKrI,KAAN,CAAWC,GAAG,MAAK,qDAAnB,6DACA,kBAACoI,EAAA,EAAKrI,KAAN,CAAWC,GAAG,MAAK,qDAAnB,8EACA,kBAACoI,EAAA,EAAKrI,KAAN,CAAWC,GAAG,MAAK,yCAAnB,2DACA,kBAACoI,EAAA,EAAKrI,KAAN,CAAWC,GAAG,MAAK,wCAAnB,0DACA,kBAACoI,EAAA,EAAKrI,KAAN,CAAWC,GAAG,MAAK,0CAAnB,sDACA,kBAACoI,EAAA,EAAKrI,KAAN,CAAWC,GAAG,MAAK,uCAAnB,8DACA,kBAACoI,EAAA,EAAKrI,KAAN,CAAWC,GAAG,MAAK,wCAAnB,6FACG,uBAAGqI,KAAK,uFAAR,0CADH,KAEA,kBAACD,EAAA,EAAKrI,KAAN,CAAWC,GAAG,MAAK,2CAAnB,uEACA,kBAACoI,EAAA,EAAKrI,KAAN,CAAWC,GAAG,MAAK,4CAAnB,qEACA,kBAACoI,EAAA,EAAKrI,KAAN,CAAWC,GAAG,MAAK,6CAAnB,iGAEF,kBAAC+H,EAAA,EAAD,CAASO,QAAM,IACf,kBAACzH,EAAA,EAAD,CAAOC,KAAK,QAAQC,IAAI,4BAjB1B,sDAsBJ,kBAACiH,EAAA,EAAKC,IAAN,KACE,kBAACD,EAAA,EAAKE,OAAN,S,sCC9CR,SAASK,EAAU/I,GAEjB,MAAMgJ,EAAU,CACdC,GAAI,CAAC,IAAK,GACVC,GAAI,CAAC,GAAI,GACTC,GAAI,CAAC,IAAK,GACVC,GAAI,CAAC,GAAI,GACTC,GAAI,CAAC,GAAI,IACTC,GAAI,CAAC,GAAI,GACTC,GAAI,CAAC,GAAI,GACTC,GAAI,CAAC,GAAI,IACTC,GAAI,CAAC,GAAI,KAGX,OACE,6BACGzJ,EAAM8D,YAAY8B,IAAI8D,IACnB,MAAMC,EAAWC,YAAYF,GACvBG,EAAM7J,EAAM8J,YAAYC,KAAKhH,GAAKA,EAAEiH,MAAQN,EAAIO,IACtD,OACE,uBAAGC,IAAKR,EAAI5D,OAAS,SAClB+D,GACCF,EAAS,IAAM,KACfA,EAAS,IAAM,MAC4B,IAA1CtF,OAAOC,KAAK0E,GAASmB,QAAQN,EAAII,IAChC,kBAAC,EAAD,CAAQ7C,YAAauC,GACnB,0BAAMrC,EAAE,IAAI8C,SAAU,GAAIC,WAAW,SAASlC,KAAK,QAChD0B,EAAII,KAIT,kBAAC,EAAD,CACExC,QAASkC,EACThC,GAAIqB,EAAQa,EAAII,IAAI,GACpBrC,GAAIoB,EAAQa,EAAII,IAAI,IAEpB,0BAAM5C,EAAG,EAAG+C,SAAU,GAAIE,kBAAkB,UACzCT,EAAII,UAWZ,SAASM,EAAMvK,GAAQ,MAAD,EAED2E,mBAAS,WAFR,mBAE5B6F,EAF4B,KAEjBC,EAFiB,OAGX9F,mBAAS,MAHE,mBAG5B+F,EAH4B,KAGtBC,EAHsB,OAIShG,mBAAS,IAJlB,mBAI5BiG,EAJ4B,KAIZC,EAJY,KAK7B5K,EAAUC,cALmB,EAMGyE,qBANH,mBAM5BmG,EAN4B,KAMfC,EANe,OAOLpG,qBAPK,mBAO5BqG,EAP4B,KAOnBC,EAPmB,OASGtG,qBATH,mBAS5BmF,EAT4B,KASfoB,EATe,OAUCvG,qBAVD,mBAU5BwG,EAV4B,KAUhBC,EAVgB,KA+CnC,OAlCAvG,oBAAU,KAERG,MAAM,wCAAwCC,KAAKC,GAAOA,EAAII,QAC3DL,KAAKoG,IACJJ,EAAWI,GACX,MAAMC,EAAKC,cACVC,OAAOC,IAAE7F,IAAIyF,EAAM9H,GAAGA,EAAC,uBACvBmI,MAAM,CACL,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAEJ,IAAIC,EAAW,GACfF,IAAEG,KAAKP,EAAM9H,IACXoI,EAASpI,EAAC,sBAA4B+H,EAAG/H,EAAC,wBAC5C6H,EAAcO,KAMhB3G,MAAM,sCAAsCC,KAAKC,GAAOA,EAAII,QACzDL,KAAKoG,GAAQH,EAAeG,IAE/BrG,MAAM,oCAAoCC,KAAKC,GAAOA,EAAII,QACvDL,KAAKoG,GAAQN,EAAeM,KAC9B,IAECL,GAAWF,GAAehB,EAG1B,6BACE,kBAAC/J,EAAD,CAAQkB,KAAK,iBACb,kBAACX,EAAA,EAAD,CAAWM,MAAO,CAACiL,UAAW,QAC5B,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAWC,QAAZ,CAAoB/K,QAAM,GAA1B,iBACA,kBAAC8K,EAAA,EAAWvD,QAAZ,OAEF,kBAACA,EAAA,EAAD,CAASO,QAAM,IACf,kBAACN,EAAA,EAAD,CAAMG,QAAS,IACb,kBAACH,EAAA,EAAKC,IAAN,KACE,kBAACD,EAAA,EAAKE,OAAN,CAAa5G,MAAO,GAClB,kBAACkK,EAAA,EAAD,CAAQxL,GAAG,KAAKI,MAAO,CAACC,WAAY,MAClC,kBAACmL,EAAA,EAAOC,QAAR,sFAE+B,6BAF/B,mCAIE,kBAACD,EAAA,EAAOE,UAAR,CAAkBtL,MAAO,CAACC,WAAY,MAAtC,+DAGJ,kBAAC,EAAD,CACEqB,WAAW,eACXiK,WAAS,GACTrK,MAAO,IACPC,OAAQ,IACRI,iBAAkB,CAACa,MAAO,MAE1B,kBAAC,EAAD,CAAayB,UA9HhB,6DA+HM,EAAGX,iBACF,6BACGA,EAAY8B,IAAI8D,GACf,kBAAC,EAAD,CACEQ,IAAKR,EAAI5D,OACTrB,UAAWiF,EACXpD,aAAc,KAEZ,MAAM8F,EAAY1C,EAAIO,GAAGoC,UAAU,EAAE,GAC/BC,EAAgBC,EAAQxC,KAAKhH,GAAKA,EAAE2H,OAAS0B,GAEnDzB,EAAQyB,GACR3B,EAAa6B,EAAcnL,MAG3B0J,EAAkB,mCAEpBtE,aAAc,KACZsE,EAAkB,KAEpBnK,QAAS,KACPT,EAAQU,KAAK,kBAAkB+I,EAAIO,GAAGoC,UAAU,EAAE,KAEpDlE,KAAMuC,IAAOhB,EAAIO,GAAGoC,UAAU,EAAE,GAAG,UACjClB,GAAcH,EAAQtB,EAAIO,KAAOe,EAAQtB,EAAIO,IAAZ,qBAC/BkB,EAAWH,EAAQtB,EAAIO,IAAZ,sBAA2C,aAG9D,kBAAClB,EAAD,CAAWjF,YAAaA,EAAagG,YAAaA,QAM5D,kBAACtB,EAAA,EAAKE,OAAN,CAAa5G,MAAO,GAClB,kBAACkK,EAAA,EAAD,CAAQpL,MAAO,CAACC,WAAY,MAC1B,kBAACmL,EAAA,EAAOC,QAAR,4CACuCzB,EACrC,kBAACwB,EAAA,EAAOE,UAAR,CAAkBtL,MAAO,CAACC,WAAY,MAAtC,6OAOJ,kBAAC2H,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,IAAN,KACE,kBAAC,IAAD,CACE3G,MAAO,IACPC,OAAQ,IACRiB,MAAO,CAACsE,EAAG,OACXkF,QAAS,CAACC,KAAM,IAAKC,MAAO,GAAIC,IAAK,GAAIC,OAAQ,KACjD,kBAAC,IAAD,CACEvF,EAAG,GAAIC,EAAG,GACVuF,YAAY,aACZ1B,WAAY,CAAC,UAAW,WACxBE,KAAO,CACL,CAAClK,KAAO,wBAA8B,CAACA,KAAM,eAAeqJ,MAGhE,kBAAC,IAAD,CACEsC,QAAUvJ,GAAMA,EAAEmH,KAAK2B,UAAU,EAAE,KAAK3B,EACxC9J,MAAO,CAAEyK,KAAM,CAAElD,KAAM,EAAE4E,WAAWA,EAAMrC,KAAK2B,UAAU,EAAE,KAAK3B,EAAK,UAAU,UACtEsC,YAAa,EAAED,WAAWA,EAAMrC,KAAK2B,UAAU,EAAE,KAAK3B,EAAK,EAAI,KACxEW,KAAMI,IAAEwB,OAAOnC,EAAcvH,GAAMA,EAAE,aAAeA,EAAE,2BACtDjC,KAAM,EACN+F,EAAG,WACHC,EAAG,2BAEL,kBAAC,IAAD,CAAa4F,MAAO,uBACpB,kBAAC,IAAD,CAAaC,eAAa,EACxBD,MAAO,qCACPtM,MAAO,CAAEwM,UAAW,CAACZ,QAAS,KAC9Ba,UAAW,EACXC,WAAahG,GAAOiG,KAAKC,MAAQ,IAAFlG,GAAO,QAG5C,kBAACkB,EAAA,EAAKC,IAAN,CAAU7H,MAAO,CAAC0H,WAAY,IAC5B,2BAAO1H,MAAO,CAACE,MAAO,YAAtB,oDACiD,6BADjD,wIAUV,kBAACuH,EAAD,OAEF,kBAAC,IAAD,KAAeuC,IAIZ,kBAAC6C,EAAA,EAAD,CAAQzM,QAAM,EAAC0M,OAAO,a,wCCjOlB,SAASC,GAAS3N,GAAQ,IAEjCoM,EAAcwB,cAAdxB,UAFgC,QAGVzH,qBAHU,mBAG/BkJ,EAH+B,KAGvBC,EAHuB,OAIJnJ,mBAAS,IAJL,mBAI/B6F,EAJ+B,KAIpBC,EAJoB,OAKF9F,mBAAS,IALP,mBAK/BoJ,EAL+B,KAKnBC,EALmB,OAMFrJ,mBAAS,YANP,mBAM/BsJ,EAN+B,KAMnBC,EANmB,KAOhCjO,EAAUC,cAPsB,EAQRyE,qBARQ,mBAQ/BqG,EAR+B,KAQtBC,EARsB,OASNtG,qBATM,mBAS/BwJ,EAT+B,KASrBC,EATqB,OAUMzJ,mBAAS,IAVf,mBAU/BiG,EAV+B,KAUfC,GAVe,KA6BtC,OAhBAhG,oBAAU,KAER,MAAMyH,EAAgBC,EAAQxC,KAAKhH,GAAKA,EAAE2H,OAAS0B,GAEnD0B,EAAUxB,GAEV7B,EAAa6B,EAAcnL,MAE3B6D,MAAM,iCAAiCoH,EAAU,SAASnH,KAAKC,GAAOA,EAAII,QACvEL,KAAKoG,GAAQJ,EAAWI,IAE3BrG,MAAM,kCAAkCoH,EAAU,SAASnH,KAAKC,GAAOA,EAAII,QACxEL,KAAKoG,GAAQ+C,EAAY/C,KAE3B,CAACe,IAEApB,GAAWmD,EAGX,6BACE,kBAACpO,EAAD,CAAQkB,KAAK,iBACb,kBAACX,EAAA,EAAD,CAAWM,MAAO,CAACiL,UAAW,QAC3BgC,GACD,6BACA,kBAAC/B,EAAA,EAAD,KACE,kBAACA,EAAA,EAAWC,QAAZ,CAAoBsC,MAAI,EAAC3N,QAAS,IAAMT,EAAQU,KAAK,mBAArD,iBACA,kBAACmL,EAAA,EAAWvD,QAAZ,MACA,kBAACuD,EAAA,EAAWC,QAAZ,CAAoB/K,QAAM,GAAEwJ,GAC5B,kBAACsB,EAAA,EAAWvD,QAAZ,OAEF,kBAACA,EAAA,EAAD,CAASO,QAAM,IACf,kBAACN,EAAA,EAAD,CAAMG,QAAS,IACb,kBAACH,EAAA,EAAKC,IAAN,KACE,kBAACD,EAAA,EAAKE,OAAN,CAAa5G,MAAO,GAClB,kBAACkK,EAAA,EAAD,CAAQxL,GAAG,KAAKI,MAAO,CAACC,WAAY,MAClC,kBAACmL,EAAA,EAAOC,QAAR,6BACwBzB,EACtB,kBAACwB,EAAA,EAAOE,UAAR,CAAkBtL,MAAO,CAACC,WAAY,MAAtC,iDAGA,kBAACmL,EAAA,EAAOE,UAAR,CAAkBtL,MAAO,CAACC,WAAY,MAAtC,+DAGJ,kBAAC,EAAD,CAAeqB,WAAW,eACxBC,iBAAkB,CAACa,MAAM,GAAD,OAAI6K,EAAO7K,QACnClB,MAAO,IACPC,OAAQ,IACRoK,WAAS,GACTnK,QAAS6L,EAAO7L,QAChBC,QAAS4L,EAAO5L,SAChB,kBAAC,EAAD,CAAawC,UAAWoJ,EAAO/I,KAC5B,EAAEhB,iBAAiBA,EAAY8B,IAAI8D,GAClC,kBAAC,EAAD,CACEQ,IAAKR,EAAI5D,OACTrB,UAAWiF,EACXhJ,QAAS,KACPT,EAAQU,KAAK,kBAAoByL,EAAY,IAAK1C,EAAI4E,WAAWC,WAEnEjI,aAAc,KACZ0H,EAActE,EAAI4E,WAAWC,UAC7BL,EAAcxE,EAAI4E,WAAWE,MAC7B3D,GAAkB,kCAEpBtE,aAAc,KACZsE,GAAkB,KAEpBjK,MAAO,CACD6N,QAAS,CACPtG,KAAM,UACNC,OAAQ,QAEVsG,MAAO,CACLvG,KAAM,UACNwG,QAAS,QAEXC,QAAS,CACPzG,KAAM,UACNwG,QAAS,eAO3B,kBAACnG,EAAA,EAAKE,OAAN,CAAa5G,MAAO,GAClB,kBAACkK,EAAA,EAAD,CAAQpL,MAAO,CAACC,WAAY,MAC1B,kBAACmL,EAAA,EAAOC,QAAR,sBACiBgC,EACf,kBAACjC,EAAA,EAAOE,UAAR,CAAkBtL,MAAO,CAACC,WAAY,MAAtC,mEAKJ,kBAAC2H,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,IAAN,CAAUE,QAAS,GACjB,kBAACH,EAAA,EAAKE,OAAN,KACE,kBAAC,IAAD,CAAcmG,MAAOC,IAAaC,SAChChN,OAAQ,IACRiB,MAAO,CAACsE,EAAG,OACX0H,UAAW,CAAC1H,EAAE,IACd,kBAAC,IAAD,CACED,EAAG,GAAIC,EAAG,GACVuF,YAAY,aACZ1B,WAAY,CAAC,UAAW,WACxBE,KAAO,CACL,CAAClK,KAAM,aAAc,CAACA,KAAM,iBAGhC,kBAAC,IAAD,CAAakM,UAAW,EACtBC,WAAa2B,GAAK,IAAIC,KAAO,IAAFD,GAAQE,uBACrC,kBAAC,IAAD,CAAahC,eAAa,EAACE,UAAW,EACpCC,WAAahG,GAAOA,EAAE,IAAKA,EAAGA,EAAE,IAAK,MAEvC,kBAAC,IAAD,CACE6D,WAAY,CAAC,UAAW,YAExB,kBAAC,IAAD,CAAaE,KAAM8C,EAASJ,GAAYI,EAASJ,GAAYI,EAAS,IACpE9G,EAAE,IAAIC,EAAE,UAEV,kBAAC,IAAD,CAAa+D,KAAM8C,EAASJ,GAAYI,EAASJ,GAAYI,EAAS,IACpE9G,EAAE,IAAIC,EAAE,cAKhB,kBAACkB,EAAA,EAAKE,OAAN,KACE,kBAAC,IAAD,CAAcmG,MAAOC,IAAaC,SAChChN,OAAQ,IACRiB,MAAO,CAACsE,EAAG,OACX0H,UAAW,CAAC1H,EAAE,IACd,kBAAC,IAAD,CACED,EAAG,GAAIC,EAAG,GACVuF,YAAY,aACZ1B,WAAY,CAAC,UAAW,WACxBE,KAAO,CACL,CAAClK,KAAM,mBAAoB,CAACA,KAAM,uBAGtC,kBAAC,IAAD,CAAakM,UAAW,EACtBC,WAAa2B,GAAK,IAAIC,KAAO,IAAFD,GAAQE,uBACrC,kBAAC,IAAD,CAAahC,eAAa,EAACE,UAAW,EACpCC,WAAahG,GAAOA,EAAE,IAAKA,EAAGA,EAAE,IAAK,MAGvC,kBAAC,IAAD,CACE6D,WAAY,CAAC,UAAW,YAExB,kBAAC,IAAD,CAAaE,KAAM8C,EAASiB,OAC1B/H,EAAE,IAAIC,EAAE,UAEV,kBAAC,IAAD,CAAa+D,KAAM8C,EAASJ,GAAYI,EAASJ,GAAYI,EAAS,IACpE9G,EAAE,IAAIC,EAAE,cAMlB,kBAACkB,EAAA,EAAKC,IAAN,CAAUE,QAAS,GACjB,kBAACH,EAAA,EAAKE,OAAN,KACE,kBAAC,IAAD,CACEmG,MAAOC,IAAaC,SACpBM,cAAe,GACf7C,QAAS,CAACC,KAAM,IAAKE,IAAK,GAAIC,OAAQ,IACtC7K,OAAQ,KAER,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAaoL,eAAa,EAACE,UAAW,IACtC,kBAAC,IAAD,CAAciC,YAAU,EACtBC,OAAQ,GACR3O,MAAO,CAACyK,KAAM,CAACvJ,MAAO,IACtBqJ,WAAY,CAAC,UAAW,UAAW,YAEnC,kBAAC,IAAD,CACEE,KAAML,EAAQwE,QAAQC,MAAM,GAC5BpI,EAAE,YACFC,EAAE,UAEJ,kBAAC,IAAD,CACE+D,KAAML,EAAQoE,OAAOK,MAAM,GAC3BpI,EAAE,YACFC,EAAE,UAEJ,kBAAC,IAAD,CACE+D,KAAML,EAAQ+C,GAAY/C,EAAQ+C,GAAY0B,MAAM,GAAG,GACvDpI,EAAE,YACFC,EAAE,aAKV,kBAACkB,EAAA,EAAKE,OAAN,KACE,kBAAC,IAAD,CACEmG,MAAOC,IAAaC,SACpBM,cAAe,GACf7C,QAAS,CAACC,KAAM,IAAKE,IAAK,GAAIC,OAAQ,IACtC7K,OAAQ,KAER,kBAAC,IAAD,CACEsF,EAAG,GAAIC,EAAG,GACVuF,YAAY,aACZ1B,WAAY,CAAC,UAAW,UAAW,WACnCE,KAAO,CACL,CAAClK,KAAM,UAAW,CAACA,KAAM,SAAU,CAACA,KAAM,aAG9C,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAagM,eAAa,EAACE,UAAW,IACtC,kBAAC,IAAD,CAAciC,YAAU,EACtBC,OAAQ,GACR3O,MAAO,CAACyK,KAAM,CAACvJ,MAAO,IACtBqJ,WAAY,CAAC,UAAW,UAAW,YAEnC,kBAAC,IAAD,CACEE,KAAML,EAAQwE,QAAQC,MAAM,EAAE,GAC9BpI,EAAE,YACFC,EAAE,UAEJ,kBAAC,IAAD,CACE+D,KAAML,EAAQoE,OAAOK,MAAM,EAAE,GAC7BpI,EAAE,YACFC,EAAE,UAEJ,kBAAC,IAAD,CACE+D,KAAML,EAAQ+C,GAAY/C,EAAQ+C,GAAY0B,MAAM,EAAE,GAAG,GACzDpI,EAAE,YACFC,EAAE,mBAatB,kBAACe,EAAD,OAEF,kBAAC,IAAD,KAAeuC,IAIV,kBAAC6C,EAAA,EAAD,CAAQzM,QAAM,EAAC0M,OAAO,a,4CChQlB,SAASgC,KAAgB,IAAD,EAEL9B,cAA1BxB,EAF+B,EAE/BA,UAAW2B,EAFoB,EAEpBA,WAFoB,QAGTpJ,qBAHS,mBAG9BkJ,EAH8B,KAGtBC,EAHsB,OAIHnJ,mBAAS,IAJN,mBAI9B6F,EAJ8B,KAInBC,EAJmB,OAKD9F,mBAAS,IALR,mBAK9BsJ,EAL8B,KAKlBC,EALkB,KAM/BjO,EAAUC,cANqB,EAOPyE,qBAPO,mBAO9BqG,EAP8B,KAOrBC,EAPqB,OAQLtG,qBARK,mBAQ9BwJ,EAR8B,KAQpBC,EARoB,OASOzJ,mBAAS,IAThB,mBAS9BiG,EAT8B,aAUCjG,mBAAS,CAACgL,KAAM,MAAOC,MAAO,MAAOX,EAAG,SAVzC,mBAU9BY,EAV8B,KAUjBC,EAViB,KAW/BC,EAAY,yBACZC,GAAY,uBA8BlB,OArBAnL,oBAAU,KAER,MAAMyH,EAAgBC,EAAQxC,KAAKhH,GAAKA,EAAE2H,OAAS0B,GACnD0B,EAAUxB,GACV7B,EAAa6B,EAAcnL,MAC3B+M,EAAc+B,GAAY7D,EAAU2B,IAEpC/I,MAAM,iCAAiCoH,EAAU,SAASnH,KAAKC,GAAOA,EAAII,QACvEL,KAAKoG,GAAQJ,EAAWI,IAE3BrG,MAAM,kCAAkCoH,EAAU,SAASnH,KAAKC,GAAOA,EAAII,QACxEL,KAAKoG,GAAQ+C,EAAY/C,KAE3B,CAACe,IAEJvH,oBAAU,KACJsJ,GAAYA,EAASJ,IACvB+B,EAAerE,IAAEyE,UAAU/B,EAASJ,IAAa,KAElD,CAACI,IAEAnD,GAAWmD,EAGX,6BACE,kBAACpO,EAAD,CAAQkB,KAAK,iBACb,kBAACX,EAAA,EAAD,CAAWM,MAAO,CAACiL,UAAW,QAC3BgC,GACD,6BACA,kBAAC/B,EAAA,EAAD,KACE,kBAACA,EAAA,EAAWC,QAAZ,CAAoBsC,MAAI,EAAC3N,QAAS,IAAMT,EAAQU,KAAK,mBAArD,iBACA,kBAACmL,EAAA,EAAWvD,QAAZ,MACA,kBAACuD,EAAA,EAAWC,QAAZ,CAAoBsC,MAAI,EAAC3N,QAAS,IAAMT,EAAQU,KAAK,kBAAkByL,IAAa5B,GACpF,kBAACsB,EAAA,EAAWvD,QAAZ,MACA,kBAACuD,EAAA,EAAWC,QAAZ,CAAoB/K,QAAM,GAAEiN,GAC5B,kBAACnC,EAAA,EAAWvD,QAAZ,OAEF,kBAACyD,EAAA,EAAD,CAAQxL,GAAG,MACT,kBAACwL,EAAA,EAAOC,QAAR,6BACwBgC,EACtB,kBAACjC,EAAA,EAAOE,UAAR,wDAKJ,kBAAC1D,EAAA,EAAD,CAAM5H,MAAO,CAAC0H,WAAY,QACxB,kBAACE,EAAA,EAAKC,IAAN,KACE,kBAACD,EAAA,EAAKE,OAAN,KACE,kBAACyH,GAAA,EAAD,CAAW7O,KAAK,SACd,kBAAC6O,GAAA,EAAUC,MAAX,KACsB,OAAnBP,EAAYF,KAAY,IAAIE,EAAYF,KAAKU,kBAEhD,kBAACF,GAAA,EAAUG,MAAX,qBAEF,kBAACH,GAAA,EAAD,CAAWvP,MAAO,CAAC2P,YAAa,OAAQjP,KAAK,SAC3C,kBAAC6O,GAAA,EAAUC,MAAX,KACuB,OAApBP,EAAYD,MAAa,IAAIC,EAAYD,MAAMS,kBAElD,kBAACF,GAAA,EAAUG,MAAX,qBAEF,0BAAM1P,MAAO,CAAC4L,QAAS,MAAO1L,MAAO,YAArC,mBAAkF,QAAhB+O,EAAYZ,EAAU,MAAO,IAAIC,KAAmB,IAAdW,EAAYZ,GAAQE,yBAIlI,kBAAC3G,EAAA,EAAD,CAAMG,QAAS,GACb,kBAACH,EAAA,EAAKC,IAAN,KACE,kBAACD,EAAA,EAAKE,OAAN,KACE,kBAAC,IAAD,CAAcmG,MAAOC,IAAaC,SAChChN,OAAQ,IACRiB,MAAO,CAACsE,EAAG,OACXkF,QAAS,CAACC,KAAM,GAAIC,MAAO,GAAIC,IAAK,GAAIC,OAAQ,IAChDoC,UAAW,CAAC1H,EAAE,IACd,kBAAC,KAAD,CAAckJ,KAAK,4CAA4CnJ,EAAG,IAAKC,EAAG,GAAI+C,WAAW,WACzF,kBAAC,IAAD,CACEhD,EAAG,GAAIC,EAAG,GACVuF,YAAY,aACZ1B,WAAY,CAAC,UAAW,WACxBE,KAAO,CACL,CAAClK,KAAM,aAAc,CAACA,KAAM,iBAGhC,kBAAC,IAAD,CAAakM,UAAW,EACtBC,WAAa2B,GAAK,IAAIC,KAAO,IAAFD,GAAQE,uBACrC,kBAAC,IAAD,CAAahC,eAAa,EAACE,UAAW,EACpCC,WAAahG,GAAOA,EAAE,IAAKA,EAAGA,EAAE,IAAK,MAEvC,kBAAC,IAAD,CACE6D,WAAY,CAAC,UAAW,YAExB,kBAAC,IAAD,CAAaE,KAAM8C,EAASJ,GAAYI,EAASJ,GAAYI,EAAS,IACpE9G,EAAE,IAAIC,EAAE,UAEV,kBAAC,IAAD,CAAa+D,KAAM8C,EAASJ,GAAYI,EAASJ,GAAYI,EAAS,IACpE9G,EAAE,IAAIC,EAAE,cAKhB,kBAACkB,EAAA,EAAKE,OAAN,KACE,kBAAC,IAAD,CAAcmG,MAAOC,IAAaC,SAChChN,OAAQ,IACRiB,MAAO,CAACsE,EAAG,OACXkF,QAAS,CAACC,KAAM,GAAIC,MAAO,GAAIC,IAAK,GAAIC,OAAQ,IAChDoC,UAAW,CAAC1H,EAAE,IACd,kBAAC,KAAD,CAAckJ,KAAK,0CAA0CnJ,EAAG,IAAKC,EAAG,GAAI+C,WAAW,WACvF,kBAAC,IAAD,CACEhD,EAAG,GAAIC,EAAG,GACVuF,YAAY,aACZ1B,WAAY,CAAC,UAAW,WACxBE,KAAO,CACL,CAAClK,KAAM,mBAAoB,CAACA,KAAM,uBAGtC,kBAAC,IAAD,CAAakM,UAAW,EACtBC,WAAa2B,GAAK,IAAIC,KAAO,IAAFD,GAAQE,uBACrC,kBAAC,IAAD,CAAahC,eAAa,EAACE,UAAW,EACpCC,WAAahG,GAAOA,EAAE,IAAKA,EAAGA,EAAE,IAAK,MAEvC,kBAAC,IAAD,CACE6D,WAAY,CAAC,UAAW,YAExB,kBAAC,IAAD,CAAaE,KAAM8C,EAASiB,OAC1B/H,EAAE,IAAIC,EAAE,UAEV,kBAAC,IAAD,CAAa+D,KAAM8C,EAASJ,GAAYI,EAASJ,GAAYI,EAAS,IACpE9G,EAAE,IAAIC,EAAE,aAKhB,kBAACkB,EAAA,EAAKE,OAAN,KACE,kBAAC,IAAD,CAAcmG,MAAOC,IAAaC,SAChChN,OAAQ,IACRiB,MAAO,CAACsE,EAAG,OACXkF,QAAS,CAACC,KAAM,GAAIC,MAAO,GAAIC,IAAK,GAAIC,OAAQ,IAChDoC,UAAW,CAAC1H,EAAE,IACd,kBAAC,KAAD,CAAckJ,KAAK,2CAA2CnJ,EAAG,IAAKC,EAAG,GAAI+C,WAAW,WACxF,kBAAC,IAAD,CACEhD,EAAG,GAAIC,EAAG,GACVuF,YAAY,aACZ1B,WAAY,CAAC,UAAW,WACxBE,KAAO,CACL,CAAClK,KAAM,oBAAqB,CAACA,KAAM,wBAGvC,kBAAC,IAAD,CAAakM,UAAW,EACtBC,WAAa2B,GAAK,IAAIC,KAAO,IAAFD,GAAQE,uBACrC,kBAAC,IAAD,CAAahC,eAAa,EAACE,UAAW,EACpCC,WAAahG,GAAOA,EAAE,IAAKA,EAAGA,EAAE,IAAK,MAEvC,kBAAC,IAAD,CACE6D,WAAY,CAAC,UAAW,YAExB,kBAAC,IAAD,CAAaE,KAAM8C,EAASiB,OAC1B/H,EAAE,IAAIC,EAAE,WAEV,kBAAC,IAAD,CAAa+D,KAAM8C,EAASJ,GAAYI,EAASJ,GAAYI,EAAS,IACpE9G,EAAE,IAAIC,EAAE,gBAOpB,kBAACkB,EAAA,EAAD,CAAMG,QAAS,GACb,kBAACH,EAAA,EAAKC,IAAN,KACE,kBAACD,EAAA,EAAKE,OAAN,KACE,kBAAC,IAAD,CACEmG,MAAOC,IAAaC,SACpBM,cAAe,GACfvN,MAAO,IACPC,OAAQ,IACRyK,QAAS,CAACC,KAAM,GAAIC,MAAO,GAAIC,IAAK,GAAIC,OAAQ,KAEhD,kBAAC,KAAD,CAAc4D,KAAK,2CAA2CnJ,EAAG,IAAKC,EAAG,GAAI+C,WAAW,WACxF,kBAAC,IAAD,CACEhD,EAAG,GAAIC,EAAG,GACVuF,YAAY,aACZ1B,WAAY,CAAC,UAAW,UAAW,WACnCE,KAAO,CACL,CAAClK,KAAM,UAAW,CAACA,KAAM,SAAU,CAACA,KAAM,aAG9C,kBAAC,IAAD,CACEoO,OAAQ,GACR3O,MAAO,CAACyK,KAAM,CAACvJ,MAAO,IACtBqJ,WAAY,CAAC,UAAW,UAAW,YAEnC,kBAAC,IAAD,CACEE,KAAMI,IAAEgF,OAAOzF,EAAQwE,QAAS,OAChCnI,EAAE,YACFC,EAAE,UAEJ,kBAAC,IAAD,CACE+D,KAAMI,IAAEgF,OAAOzF,EAAQoE,OAAQ,OAC/B/H,EAAE,YACFC,EAAE,UAEJ,kBAAC,IAAD,CACE+D,KAAMI,IAAEgF,OAAOzF,EAAQ+C,GAAa,OACpC1G,EAAE,YACFC,EAAE,WAGN,kBAAC,IAAD,CAAaoJ,mBAAoB,kBAAC,KAAD,CAAcC,OAAQ,GAAItG,WAAW,MAAMzJ,MAAO,CAACwJ,SAAU,WAC9F,kBAAC,IAAD,CAAa+C,eAAa,QAKlC,kBAAC3E,EAAA,EAAD,CAAMG,QAAS,EAAGiI,UAAU,UAC1B,kBAACpI,EAAA,EAAKC,IAAN,KACE,kBAACD,EAAA,EAAKE,OAAN,KACA,2BAAO9H,MAAO,CAACC,WAAY,MAAO,iBAAiBoN,EAAa,0BAA2BzD,MAI/F,kBAAChC,EAAA,EAAD,CAAMG,QAAS,GACb,kBAACH,EAAA,EAAKC,IAAN,KACE,kBAACD,EAAA,EAAKE,OAAN,KACE,kBAAC,IAAD,CACE5G,MAAO,IACPC,OAAQ,IACRiB,MAAO,CAACsE,EAAG,MAAOD,EAAG,OACrBmF,QAAS,CAACC,KAAM,GAAIC,MAAO,GAAIC,IAAK,GAAIC,OAAQ,KAChD,kBAAC,IAAD,CACEvF,EAAG,GAAIC,EAAG,GACVuF,YAAY,aACZ1B,WAAY,CAAC,UAAW,WACxBE,KAAO,CACL,CAAClK,KAAO,qBAAsBqJ,GAAa,CAACrJ,KAAM8M,MAGtD,kBAAC,IAAD,CACEnB,QAAUvJ,GAAMA,EAAEmH,OAAOqD,EACzBnN,MAAO,CAAEyK,KAAM,CAAElD,KAAM,EAAE4E,WAAWA,EAAMrC,OAAOqD,EAAW,UAAU,UAC7Df,YAAa,EAAED,WAAWA,EAAMrC,OAAOqD,EAAW,EAAI,KAC/D1C,KAAMI,IAAEwB,OAAOjC,EAAQ6F,SAAWtN,GAAMA,EAAEwM,IAAcxM,EAAEyM,KAC1D1O,KAAM,EACN+F,EAAG2I,GACH1I,EAAGyI,IAEL,kBAAC,IAAD,CAAa7C,MAAO8C,GAAY,YAC9B3C,UAAW,EACXC,WAAahG,GAAOiG,KAAKC,MAAQ,IAAFlG,GAAO,MACxC,kBAAC,IAAD,CAAa6F,eAAa,EAACD,MAAO6C,EAAY,YAC5CnP,MAAO,CAAEwM,UAAW,CAACZ,QAAS,KAC9Ba,UAAW,EACXC,WAAahG,GAAOiG,KAAKC,MAAQ,IAAFlG,GAAO,QAG5C,kBAACkB,EAAA,EAAKE,OAAN,KACE,kBAAC,IAAD,CACE5G,MAAO,IACPC,OAAQ,IACRiB,MAAO,CAACsE,EAAG,OACXkF,QAAS,CAACC,KAAM,GAAIC,MAAO,GAAIC,IAAK,GAAIC,OAAQ,KAChD,kBAAC,IAAD,CACEE,QAAUvJ,GAAMA,EAAEmH,OAAOqD,EACzBnN,MAAO,CAAEyK,KAAM,CAAElD,KAAM,EAAE4E,WAAWA,EAAMrC,OAAOqD,EAAW,UAAU,UAC7Df,YAAa,EAAED,WAAWA,EAAMrC,OAAOqD,EAAW,EAAI,KAC/D1C,KAAMI,IAAEwB,OAAOjC,EAAQ6F,SAAWtN,GAAMA,EAAEwM,IAAcxM,EA7QxD,kBA8QAjC,KAAM,EACN+F,EA/QA,gBAgRAC,EAAGyI,IAEL,kBAAC,IAAD,CAAa7C,MAlRX,kBAmRF,kBAAC,IAAD,CAAaC,eAAa,EAACD,MAAO6C,EAAY,YAC5CnP,MAAO,CAAEwM,UAAW,CAACZ,QAAS,KAC9Ba,UAAW,EACXC,WAAahG,GAAOiG,KAAKC,MAAQ,IAAFlG,GAAO,QAG5C,kBAACkB,EAAA,EAAKE,OAAN,KACE,kBAAC,IAAD,CACE5G,MAAO,IACPC,OAAQ,IACRiB,MAAO,CAACsE,EAAG,OACXkF,QAAS,CAACC,KAAM,GAAIC,MAAO,GAAIC,IAAK,GAAIC,OAAQ,KAChD,kBAAC,IAAD,CACEE,QAAUvJ,GAAMA,EAAEmH,OAAOqD,EACzBnN,MAAO,CAAEyK,KAAM,CAAElD,KAAM,EAAE4E,WAAWA,EAAMrC,OAAOqD,EAAW,UAAU,UAC7Df,YAAa,EAAED,WAAWA,EAAMrC,OAAOqD,EAAW,EAAI,KAC/D1C,KAAMI,IAAEwB,OAAOjC,EAAQ6F,SAAWtN,GAAMA,EAAEyM,KAAczM,EAlSxD,cAmSAjC,KAAM,EACN+F,EApSA,YAqSAC,EAAG0I,KAEL,kBAAC,IAAD,CAAa9C,MAvSX,cAwSF,kBAAC,IAAD,CAAaC,eAAa,EAACD,MAAO8C,GAAY,YAC5CpP,MAAO,CAAEwM,UAAW,CAACZ,QAAS,KAC9Ba,UAAW,EACXC,WAAahG,GAAOiG,KAAKC,MAAQ,IAAFlG,GAAO,QAG5C,kBAACkB,EAAA,EAAKE,OAAN,KACE,kBAAC,IAAD,CACE5G,MAAO,IACPC,OAAQ,IACRiB,MAAO,CAACsE,EAAG,OACXkF,QAAS,CAACC,KAAM,GAAIC,MAAO,GAAIC,IAAK,GAAIC,OAAQ,KAChD,kBAAC,IAAD,CACEE,QAAUvJ,GAAMA,EAAEmH,OAAOqD,EACzBnN,MAAO,CAAEyK,KAAM,CAAElD,KAAM,EAAE4E,WAAWA,EAAMrC,OAAOqD,EAAW,UAAU,UAC7Df,YAAa,EAAED,WAAWA,EAAMrC,OAAOqD,EAAW,EAAI,KAC/D1C,KAAMI,IAAEwB,OAAOjC,EAAQ6F,SAAWtN,GAAMA,EAAEyM,KAAczM,EAvTxD,iBAwTAjC,KAAM,EACN+F,EAzTA,eA0TAC,EAAG0I,KAEL,kBAAC,IAAD,CAAa9C,MA5TX,iBA6TF,kBAAC,IAAD,CAAaC,eAAa,EAACD,MAAO8C,GAAY,YAC5CpP,MAAO,CAAEwM,UAAW,CAACZ,QAAS,KAC9Ba,UAAW,EACXC,WAAahG,GAAOiG,KAAKC,MAAQ,IAAFlG,GAAO,SAI9C,kBAACkB,EAAA,EAAKC,IAAN,KACE,kBAACD,EAAA,EAAKE,OAAN,KACE,kBAAC,IAAD,CACE5G,MAAO,IACPC,OAAQ,IACRiB,MAAO,CAACsE,EAAG,OACXkF,QAAS,CAACC,KAAM,GAAIC,MAAO,GAAIC,IAAK,GAAIC,OAAQ,KAChD,kBAAC,IAAD,CACEE,QAAUvJ,GAAMA,EAAEmH,OAAOqD,EACzBnN,MAAO,CAAEyK,KAAM,CAAElD,KAAM,EAAE4E,WAAWA,EAAMrC,OAAOqD,EAAW,UAAU,UAC7Df,YAAa,EAAED,WAAWA,EAAMrC,OAAOqD,EAAW,EAAI,KAC/D1C,KAAMI,IAAEwB,OAAOjC,EAAQ6F,SAAWtN,GAAMA,EAAEwM,IAAcxM,EAAEyM,KAC1D1O,KAAM,EACN+F,EAhVA,aAiVAC,EAAG0I,KAEL,kBAAC,IAAD,CAAa9C,MAnVX,eAoVF,kBAAC,IAAD,CAAaC,eAAa,EAACD,MAAO8C,GAAY,YAC5CpP,MAAO,CAAEwM,UAAW,CAACZ,QAAS,KAC9Ba,UAAW,EACXC,WAAahG,GAAOiG,KAAKC,MAAQ,IAAFlG,GAAO,QAG5C,kBAACkB,EAAA,EAAKE,OAAN,KACE,kBAAC,IAAD,CACE5G,MAAO,IACPC,OAAQ,IACRiB,MAAO,CAACsE,EAAG,OACXkF,QAAS,CAACC,KAAM,GAAIC,MAAO,GAAIC,IAAK,GAAIC,OAAQ,KAChD,kBAAC,IAAD,CACEE,QAAUvJ,GAAMA,EAAEmH,OAAOqD,EACzBnN,MAAO,CAAEyK,KAAM,CAAElD,KAAM,EAAE4E,WAAWA,EAAMrC,OAAOqD,EAAW,UAAU,UAC7Df,YAAa,EAAED,WAAWA,EAAMrC,OAAOqD,EAAW,EAAI,KAC/D1C,KAAMI,IAAEwB,OAAOjC,EAAQ6F,SAAWtN,GAAMA,EAAEwM,IAAcxM,EAvWxD,kBAwWAjC,KAAM,EACN+F,EArWA,YAsWAC,EAAG0I,KAEL,kBAAC,IAAD,CAAa9C,MAxWX,cAyWF,kBAAC,IAAD,CAAaC,eAAa,EAACD,MAAO8C,GAAY,YAC5CpP,MAAO,CAAEwM,UAAW,CAACZ,QAAS,KAC9Ba,UAAW,EACXC,WAAahG,GAAOiG,KAAKC,MAAQ,IAAFlG,GAAO,QAG5C,kBAACkB,EAAA,EAAKE,OAAN,KACE,kBAAC,IAAD,CACE5G,MAAO,IACPC,OAAQ,IACRiB,MAAO,CAACsE,EAAG,OACXkF,QAAS,CAACC,KAAM,GAAIC,MAAO,GAAIC,IAAK,GAAIC,OAAQ,KAChD,kBAAC,IAAD,CACEE,QAAUvJ,GAAMA,EAAEmH,OAAOqD,EACzBnN,MAAO,CAAEyK,KAAM,CAAElD,KAAM,EAAE4E,WAAWA,EAAMrC,OAAOqD,EAAW,UAAU,UAC7Df,YAAa,EAAED,WAAWA,EAAMrC,OAAOqD,EAAW,EAAI,KAC/D1C,KAAMI,IAAEwB,OAAOjC,EAAQ6F,SAAWtN,GAAMA,EAAEyM,KAAczM,EA5XxD,cA6XAjC,KAAM,EACN+F,EA1XA,cA2XAC,EAAG0I,KAEL,kBAAC,IAAD,CAAa9C,MA7XX,gBA8XF,kBAAC,IAAD,CAAaC,eAAa,EAACD,MAAO8C,GAAY,YAC5CpP,MAAO,CAAEwM,UAAW,CAACZ,QAAS,KAC9Ba,UAAW,EACXC,WAAahG,GAAOiG,KAAKC,MAAQ,IAAFlG,GAAO,QAG5C,kBAACkB,EAAA,EAAKE,OAAN,KACE,kBAAC,IAAD,CACE5G,MAAO,IACPC,OAAQ,IACRiB,MAAO,CAACsE,EAAG,OACXkF,QAAS,CAACC,KAAM,GAAIC,MAAO,GAAIC,IAAK,GAAIC,OAAQ,KAChD,kBAAC,IAAD,CACEE,QAAUvJ,GAAMA,EAAEmH,OAAOqD,EACzBnN,MAAO,CAAEyK,KAAM,CAAElD,KAAM,EAAE4E,WAAWA,EAAMrC,OAAOqD,EAAW,UAAU,UAC7Df,YAAa,EAAED,WAAWA,EAAMrC,OAAOqD,EAAW,EAAI,KAC/D1C,KAAMI,IAAEwB,OAAOjC,EAAQ6F,SAAWtN,GAAMA,EAAEyM,KAAczM,EAjZxD,iBAkZAjC,KAAM,EACN+F,EA/YA,WAgZAC,EAAG0I,KAEL,kBAAC,IAAD,CAAa9C,MAlZX,aAmZF,kBAAC,IAAD,CAAaC,eAAa,EAACD,MAAO8C,GAAY,YAC5CpP,MAAO,CAAEwM,UAAW,CAACZ,QAAS,KAC9Ba,UAAW,EACXC,WAAahG,GAAOiG,KAAKC,MAAQ,IAAFlG,GAAO,UAKhD,kBAAC0E,EAAA,EAAD,CAAQxL,GAAG,MACT,kBAACwL,EAAA,EAAOC,QAAR,oBAIF,kBAAC6E,GAAA,EAAD,CAAOC,SAAO,EAACC,SAAO,EAACC,MAAM,QAC3B,kBAACH,GAAA,EAAM9E,OAAP,KACE,kBAAC8E,GAAA,EAAMrI,IAAP,KACE,kBAACqI,GAAA,EAAMI,WAAP,sBACA,kBAACJ,GAAA,EAAMI,WAAP,KAAmBjD,GACnB,kBAAC6C,GAAA,EAAMI,WAAP,KAAmB1G,GACnB,kBAACsG,GAAA,EAAMI,WAAP,wBAGJ,kBAACJ,GAAA,EAAMK,KAAP,KACG1F,IAAE7F,IAAI6F,IAAEgF,OAAOzF,EAAQ+C,GAAa,OAClCxK,GAAO,kBAACuN,GAAA,EAAMrI,IAAP,CAAWyB,IAAK3G,EAAE6N,WACxB,kBAACN,GAAA,EAAMO,KAAP,KAAa9N,EAAE6N,WACf,kBAACN,GAAA,EAAMO,KAAP,KAAa9D,KAAKC,MAAc,IAARjK,EAAEG,OAAW,KACrC,kBAACoN,GAAA,EAAMO,KAAP,KAAa9D,KAAKC,MAA0D,IAApD/B,IAAE1B,KAAKiB,EAAQoE,OAAS/H,GAAMA,EAAElG,MAAMoC,EAAEpC,MAAMuC,OAAW,KACjF,kBAACoN,GAAA,EAAMO,KAAP,KAAa9D,KAAKC,MAA2D,IAArD/B,IAAE1B,KAAKiB,EAAQwE,QAAUnI,GAAMA,EAAElG,MAAMoC,EAAEpC,MAAMuC,OAAW,UAO5F,kBAAC2E,EAAD,OAEF,kBAAC,IAAD,KAAeuC,IAIV,kBAAC6C,EAAA,EAAD,CAAQzM,QAAM,EAAC0M,OAAO,a,kCCzdlB,SAAS4D,KAAiB,MAAD,EAEJ3M,qBAFI,mBAE/ByH,EAF+B,KAEpBmF,EAFoB,OAGN5M,qBAHM,mBAG/B6M,EAH+B,KAGrBC,EAHqB,OAIN9M,qBAJM,mBAI/B+M,EAJ+B,KAIrBC,EAJqB,OAKAhN,qBALA,mBAK/BiN,EAL+B,KAKlBC,EALkB,OAMAlN,qBANA,mBAM/BmN,EAN+B,KAMlBC,EANkB,OAOVpN,qBAPU,mBAO/BkJ,EAP+B,KAOvBC,EAPuB,OAQMnJ,mBAAS,IARf,mBAQ/BiG,EAR+B,KAQfC,EARe,OASRlG,qBATQ,mBAS/BqG,EAT+B,KAStBC,EATsB,KAqFtC,OA1EApG,oBAAU,KAER,MAAMyH,EAAgBC,EAAQxC,KAAKhH,GAAKA,EAAE2H,OAAS0B,GACnD0B,EAAUxB,GAENF,IACFpH,MAAM,iCAAmCoH,EAAY,SAASnH,KAAKC,GAAOA,EAAII,QAC3EL,KAAKoG,IACJ,IAAI2G,EAAU,GACd,MAAMC,EAAYxG,IAAEwB,OAAO5B,EAAM,CAAC9H,EAAG2O,KACjCzG,IAAEG,KAAKrI,EAAI4O,IAASA,EAAKzH,KAAOwH,IACxB,CAAC,UAAW,SAAU,QAAS,IAAI/H,QAAQ+H,GAAK,IAE5DzG,IAAEG,KAAKqG,EAAY1O,IACjBkI,IAAEG,KAAKrI,EAAI4O,IACHA,EAAKf,aAAaY,IACtBA,EAAQG,EAAKf,WAAa,IAE5BY,EAAQG,EAAKf,WAAWe,EAAKzH,MAAQyH,EAAKzO,UAG9CuH,EAAW+G,KAEfP,EAAY,MACZE,EAAY,MACZE,EAAe,MACfE,EAAe,QAEhB,CAAC3F,IAEJvH,oBAAU,KACR,GAAI2M,EAAS,CACX,MAAMlG,EAAKC,cACRC,OAAOC,IAAE7F,IAAIoF,EAAQwG,GAAWjO,GAAGA,IACnCmI,MAAM,CACL,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAEJ,IAAIC,EAAW,GACfF,IAAEG,KAAKZ,EAAQwG,GAAWjO,IACxBoI,EAASpI,GAAK+H,EAAG/H,KACnBsO,EAAelG,KAEhB,CAAC6F,IAEJ3M,oBAAU,KACR,GAAI6M,EAAS,CACX,MAAMpG,EAAKC,cACRC,OAAOC,IAAE7F,IAAIoF,EAAQ0G,GAAWnO,GAAGA,IACnCmI,MAAM,CACL,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAEJ,IAAIC,EAAW,GACfF,IAAEG,KAAKZ,EAAQ0G,GAAWnO,IACxBoI,EAASpI,GAAK+H,EAAG/H,KACnBwO,EAAepG,KAEhB,CAAC+F,IAGA,6BACE,kBAAC3R,EAAD,CAAQkB,KAAK,kBACb,kBAACX,EAAA,EAAD,CAAWM,MAAO,CAACiL,UAAW,QAC5B,kBAACG,EAAA,EAAD,CAAQxL,GAAG,MACT,kBAACwL,EAAA,EAAOC,QAAR,CAAgBrL,MAAO,CAACC,WAAY,MAApC,uCAEE,kBAACuR,GAAA,EAAD,CACEC,KAAK,GACLzR,MAAO,CAAC0R,WAAY,OACZzR,WAAY,IACZiB,MAAO,QACPyQ,UAAW,OACXC,WAAY,OACZC,YAAa,OACbC,aAAc,oBACdC,aAAc,EACdC,UAAW,QACXC,cAAe,SACvBC,YAAY,eACZpF,QAAM,EACNqF,QAAM,EACNC,WAAS,EACTC,QAASC,GACTC,SAAU,CAACC,GAAK1P,YACd6N,EAAa7N,QAKpBmK,GACD,kBAACrF,EAAA,EAAD,CAAMG,QAAS,EAAG/H,MAAO,CAAC0H,WAAY,MAAOsK,UAAW,UACtD,kBAACpK,EAAA,EAAKC,IAAN,KACE,kBAACD,EAAA,EAAKE,OAAN,KACE,kBAACF,EAAA,EAAD,CAAMG,QAAS,EAAG0K,UAAQ,GACxB,kBAAC7K,EAAA,EAAKE,OAAN,KACE,kBAAC0J,GAAA,EAAD,CACExR,MAAO,CAAC0R,WAAY,OACZzR,WAAY,IACZ0R,UAAW,OACXC,WAAY,OACZC,YAAa,OACbC,aAAc,oBACdC,aAAc,GACtBG,YAAY,iBACZC,QAAM,EACNC,WAAS,EACTtP,MAAO8N,EACPyB,QAASK,GACTH,SAAU,CAACC,GAAK1P,YACd+N,EAAY/N,SAMtB,kBAAC8E,EAAA,EAAKE,OAAN,KACE,kBAACF,EAAA,EAAD,CAAMG,QAAS,EAAG0K,UAAQ,GACxB,kBAAC7K,EAAA,EAAKE,OAAN,KACE,kBAAC0J,GAAA,EAAD,CACExR,MAAO,CAAC0R,WAAY,OACZzR,WAAY,IACZ0R,UAAW,OACXC,WAAY,OACZC,YAAa,OACbC,aAAc,oBACdC,aAAc,GACtBG,YAAY,iBACZS,OAAK,EACLC,SAAO,EACPT,QAAM,EACNC,WAAS,EACTtP,MAAOgO,EACPuB,QAASK,GACTH,SAAU,CAACC,GAAK1P,YACdiO,EAAYjO,UAOxB,kBAAC8E,EAAA,EAAKC,IAAN,KACE,kBAACD,EAAA,EAAKE,OAAN,KACE,kBAAC,EAAD,CAAexG,WAAW,eACxBC,iBAAkB,CAACa,MAAM,GAAD,OAAI6K,EAAO7K,QACnClB,MAAO,IACPC,OAAQ,IACRoK,WAAS,GACTnK,QAAS6L,EAAO7L,QAChBC,QAAS4L,EAAO5L,SAChB,kBAAC,EAAD,CAAawC,UAAWoJ,EAAO/I,KAC5B,EAAEhB,iBAAiBA,EAAY8B,IAAI8D,GAClC,kBAAC,EAAD,CACEQ,IAAKR,EAAI5D,OACTrB,UAAWiF,EACXpD,aAAc,KACZ,GAAGkL,GAAYI,EAAY,CACzB,MAAM/H,EAAMmB,EAAQwG,GAAU9H,EAAI4E,WAAWC,UAC7C1D,EAAkBhB,EAAK0D,KAAKC,MAAU,IAAJ3D,GAAS,IAAK,MAGpDtD,aAAc,KACZsE,EAAkB,KAEpB1C,KAAOqJ,GAAYI,GAAe5G,EAAQwG,GAAU9H,EAAI4E,WAAWC,UAC3DqD,EAAY5G,EAAQwG,GAAU9H,EAAI4E,WAAWC,WAAa,aAM5E,kBAAC/F,EAAA,EAAKE,OAAN,KACE,kBAAC,EAAD,CAAexG,WAAW,eACxBC,iBAAkB,CAACa,MAAM,GAAD,OAAI6K,EAAO7K,QACnClB,MAAO,IACPC,OAAQ,IACRoK,WAAS,GACTnK,QAAS6L,EAAO7L,QAChBC,QAAS4L,EAAO5L,SAChB,kBAAC,EAAD,CAAawC,UAAWoJ,EAAO/I,KAC5B,EAAEhB,iBAAiBA,EAAY8B,IAAI8D,GAClC,kBAAC,EAAD,CACEQ,IAAKR,EAAI5D,OACTrB,UAAWiF,EACXpD,aAAc,KACZ,GAAGoL,GAAYI,EAAY,CACzB,MAAMjI,EAAMmB,EAAQ0G,GAAUhI,EAAI4E,WAAWC,UAC7C1D,EAAkBhB,EAAK0D,KAAKC,MAAU,IAAJ3D,GAAS,IAAK,MAGpDtD,aAAc,KACZsE,EAAkB,KAEpB1C,KAASuJ,GAAYI,GAAe9G,EAAQ0G,GAAUhI,EAAI4E,WAAWC,UAC7DuD,EAAY9G,EAAQ0G,GAAUhI,EAAI4E,WAAWC,WAAa,YAK1E,kBAAC,IAAD,KAAe3D,MAKrB,kBAACvC,EAAD,Q,oBCpOK,SAASoL,KAEtB,OACI,kBAAC,KAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO9P,KAAK,mCACV,kBAAC2N,GAAD,OAEF,kBAAC,IAAD,CAAO3N,KAAK,yCACV,kBAAC+L,GAAD,OAEF,kBAAC,IAAD,CAAO/L,KAAK,6BACV,kBAACgK,GAAD,OAEF,kBAAC,IAAD,CAAOhK,KAAK,kBACV,kBAAC4G,EAAD,OAEF,kBAAC,IAAD,CAAO5G,KAAK,KACV,kBAAC,IAAD,CAAU+P,GAAG,uBC/BzB,MAAMC,GAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,kBAACN,GAAD,MAASE,K","file":"static/js/main.a4278d78.chunk.js","sourcesContent":["import React from \"react\";\nimport ErrorBoundary from \"react-error-boundary\";\nimport { Container, Menu, Image } from 'semantic-ui-react';\n\nimport { useHistory } from 'react-router-dom';\n\n\nexport default function AppBar(props) {\n\n  const history = useHistory();\n\n  return (\n    <ErrorBoundary>\n      <Menu borderless fixed='top'>\n        <Container>\n          <Menu.Item as='a' header onClick={() => history.push('/emory-covid19')}>\n            <span style={{fontWeight: 400, color: '#002878', lineHeight: 1.2}}>\n           COVID-19<br/>Health Equity<br/>Dashboard\n           </span>\n          </Menu.Item>\n          <Menu.Item \n            active={props.menu==='countyReport'} \n            content='Home'\n            onClick={() => history.push('/emory-covid19')}\n            name='countyReport'/>\n          <Menu.Item \n            active={props.menu==='countyCompare'} \n            content='Compare Counties'\n            onClick={() => history.push('/emory-covid19/compare-counties')}\n            name='countyCompare'/>\n          <Menu.Menu position='right'>\n            <Menu.Item as='a' header>\n              <Image size='small' src='/emory-covid19/logo.png' />\n            </Menu.Item>\n          </Menu.Menu>\n        </Container>\n      </Menu>\n    </ErrorBoundary>\n  );\n}\n\n\n\n","\nimport React, {\n  createContext,\n  useMemo,\n  useCallback,\n} from \"react\"\nimport PropTypes from \"prop-types\"\nimport * as d3Geo from \"d3-geo\"\n\nconst { geoPath, ...projections } = d3Geo\n\nconst MapContext = createContext()\n\nconst makeProjection = ({\n  projectionConfig = {},\n  projection = \"geoEqualEarth\",\n  width = 800,\n  height = 600,\n  offsetX = 0,\n  offsetY = 0\n}) => {\n  const isFunc = typeof projection === \"function\"\n\n  if (isFunc) return projection\n\n  const scl = projectionConfig.scale || null;\n\n  let proj = projections[projection]().translate([width/2 + (offsetX)*scl/1000 ,\n                                              height/2 + (offsetY)*scl/1000]);\n\n  const supported = [\n    proj.center ? \"center\" : null,\n    proj.rotate ? \"rotate\" : null,\n    proj.scale ? \"scale\" : null,\n    proj.parallels ? \"parallels\" : null,\n  ]\n\n  supported.forEach(d => {\n    if (!d) return\n    proj = proj[d](projectionConfig[d] || proj[d]())\n  })\n\n  return proj\n}\n\nconst MapProvider = ({\n  width,\n  height,\n  offsetX,\n  offsetY,\n  projection,\n  projectionConfig,\n  ...restProps\n}) => {\n  const [cx, cy] = projectionConfig.center || []\n  const [rx, ry, rz] = projectionConfig.rotate || []\n  const [p1, p2] = projectionConfig.parallels || []\n  const s = projectionConfig.scale || null\n\n  const projMemo = useMemo(() => {\n    return makeProjection({\n      projectionConfig: {\n        center: (cx || cx === 0) || (cy || cy === 0) ? [cx, cy] : null,\n        rotate: (rx || rx === 0) || (ry || ry === 0) ? [rx, ry, rz] : null,\n        parallels: (p1 || p1 === 0) || (p2 || p2 === 0) ? [p1, p2] : null,\n        scale: s,\n      },\n      projection,\n      width,\n      height,\n      offsetX,\n      offsetY,\n    })\n  }, [ width, height, projection, cx, cy, rx, ry, rz, p1, p2, s, offsetX, offsetY ])\n\n  const proj = useCallback(projMemo, [projMemo])\n\n  const value = useMemo(() => {\n    return {\n      width,\n      height,\n      projection: proj,\n      path: geoPath().projection(proj),\n    }\n  }, [ width, height, proj ])\n\n  return (<MapContext.Provider value={value} {...restProps} />)\n}\n\nMapProvider.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  offsetX: PropTypes.number,\n  offsetY: PropTypes.number,\n  projection: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n  ]),\n  projectionConfig: PropTypes.object,\n}\n\nexport { MapProvider, MapContext }\n","\nimport { feature } from \"topojson-client\"\n\nexport function getCoords(w, h, t) {\n  const xOffset = (w * t.k - w) / 2\n  const yOffset = (h * t.k - h) / 2\n  return [w / 2 - (xOffset + t.x) / t.k, h / 2 - (yOffset + t.y) / t.k]\n}\n\nexport function fetchGeographies(url) {\n  return fetch(url)\n    .then(res => {\n      if (!res.ok) {\n        throw Error(res.statusText)\n      }\n      return res.json()\n    }).catch(error => {\n      console.log(\"There was a problem when fetching the data: \", error)\n    })\n}\n\nexport function getFeatures(geographies, parseGeographies) {\n  if (Array.isArray(geographies)) return parseGeographies ? parseGeographies(geographies) : geographies\n  const feats = feature(\n    geographies,\n    geographies.objects[Object.keys(geographies.objects)[0]]\n  ).features\n  return parseGeographies ? parseGeographies(feats) : feats\n}\n\nexport function prepareFeatures(geographies, path) {\n  return geographies ? geographies.map((d, i) => {\n    return {\n      ...d,\n      rsmKey: `geo-${i}`,\n      svgPath: path(d),\n    }\n  }) : []\n}\n\nexport function createConnectorPath(dx = 30, dy = 30, curve = 0.5) {\n  const curvature = Array.isArray(curve) ? curve : [curve, curve]\n  const curveX = dx / 2 * curvature[0]\n  const curveY = dy / 2 * curvature[1]\n  return `M${0},${0} Q${-dx / 2 - curveX},${-dy / 2 + curveY} ${-dx},${-dy}`\n}\n\nexport function isString(geo) { return typeof geo === \"string\" }\n","\nimport { useMemo, useState, useEffect, useContext } from \"react\"\nimport { MapContext } from \"./MapProvider\"\n\nimport { fetchGeographies, getFeatures, prepareFeatures, isString } from \"../utils\"\n\nexport default function useGeographies({ geography, parseGeographies }) {\n  const { path } = useContext(MapContext)\n  const [geographies, setGeographies] = useState()\n\n  useEffect(() => {\n    if (typeof window === `undefined`) return\n\n    if (isString(geography)) {\n      fetchGeographies(geography).then(geos => {\n        if (geos) setGeographies(getFeatures(geos, parseGeographies))\n      })\n    } else {\n      setGeographies(getFeatures(geography, parseGeographies))\n    }\n  }, [geography, parseGeographies])\n\n  const output = useMemo(() => {\n    return prepareFeatures(geographies, path)\n  }, [geographies, path])\n\n  return { geographies: output }\n}\n","\nimport React, { useContext } from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { MapContext } from \"./MapProvider\"\nimport useGeographies from \"./useGeographies\"\n\nconst Geographies = ({\n  geography,\n  children,\n  parseGeographies,\n  className = \"\",\n  ...restProps\n}) => {\n  const { path, projection } = useContext(MapContext)\n  const { geographies } = useGeographies({ geography, parseGeographies })\n\n  return (\n    <g className={`rsm-geographies ${className}`} {...restProps}>\n      {\n        geographies && geographies.length > 0 &&\n        children({ geographies, path, projection })\n      }\n    </g>\n  )\n}\n\nGeographies.propTypes = {\n  geography: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.object,\n    PropTypes.array,\n  ]),\n  children: PropTypes.func,\n  parseGeographies: PropTypes.func,\n  className: PropTypes.string,\n}\n\nexport default Geographies\n","\nimport React, { useState, memo } from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst Geography = ({\n  geography,\n  onMouseEnter,\n  onMouseLeave,\n  onMouseDown,\n  onMouseUp,\n  onFocus,\n  onBlur,\n  style = {},\n  className = \"\",\n  ...restProps\n}) => {\n  const [isPressed, setPressed] = useState(false)\n  const [isFocused, setFocus] = useState(false)\n\n  function handleMouseEnter(evt) {\n    setFocus(true)\n    if (onMouseEnter) onMouseEnter(evt)\n  }\n\n  function handleMouseLeave(evt) {\n    setFocus(false)\n    if (isPressed) setPressed(false)\n    if (onMouseLeave) onMouseLeave(evt)\n  }\n\n  function handleFocus(evt) {\n    setFocus(true)\n    if (onFocus) onFocus(evt)\n  }\n\n  function handleBlur(evt) {\n    setFocus(false)\n    if (isPressed) setPressed(false)\n    if (onBlur) onBlur(evt)\n  }\n\n  function handleMouseDown(evt) {\n    setPressed(true)\n    if (onMouseDown) onMouseDown(evt)\n  }\n\n  function handleMouseUp(evt) {\n    setPressed(false)\n    if (onMouseUp) onMouseUp(evt)\n  }\n\n  return (\n    <path\n      tabIndex=\"0\"\n      className={`rsm-geography ${className}`}\n      d={geography.svgPath}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      style={style[isPressed || isFocused ? (isPressed ? \"pressed\" : \"hover\") : \"default\"]}\n      {...restProps}\n    />\n  )\n}\n\nGeography.propTypes = {\n  geography: PropTypes.object,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onMouseDown: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  style: PropTypes.object,\n  className: PropTypes.string,\n}\n\nexport default memo(Geography)\n","\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { MapProvider } from \"./MapProvider\"\n\nconst ComposableMap = ({\n  width = 800,\n  height = 600,\n  offsetX = 0,\n  offsetY = 0,\n  projection = \"geoEqualEarth\",\n  projectionConfig = {},\n  className = \"\",\n  ...restProps\n}) => {\n  return (\n    <MapProvider\n      width={width}\n      height={height}\n      offsetX={offsetX}\n      offsetY={offsetY}\n      projection={projection}\n      projectionConfig={projectionConfig}\n    >\n      <svg\n        width={width}\n        height={height}\n        className={`rsm-svg ${className}`}\n        {...restProps}\n      />\n    </MapProvider>\n  )\n}\n\nComposableMap.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  projection: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n  ]),\n  projectionConfig: PropTypes.object,\n  className: PropTypes.string,\n}\n\nexport default ComposableMap\n","\nimport React, { useContext, useState } from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { MapContext } from \"./MapProvider\"\n\nconst Marker = ({\n  coordinates,\n  children,\n  onMouseEnter,\n  onMouseLeave,\n  onMouseDown,\n  onMouseUp,\n  onFocus,\n  onBlur,\n  style = {},\n  className = \"\",\n  ...restProps\n}) => {\n  const { projection } = useContext(MapContext)\n  const [isPressed, setPressed] = useState(false)\n  const [isFocused, setFocus] = useState(false)\n\n  const [x, y] = projection(coordinates)\n\n  function handleMouseEnter(evt) {\n    setFocus(true)\n    if (onMouseEnter) onMouseEnter(evt)\n  }\n\n  function handleMouseLeave(evt) {\n    setFocus(false)\n    if (isPressed) setPressed(false)\n    if (onMouseLeave) onMouseLeave(evt)\n  }\n\n  function handleFocus(evt) {\n    setFocus(true)\n    if (onFocus) onFocus(evt)\n  }\n\n  function handleBlur(evt) {\n    setFocus(false)\n    if (isPressed) setPressed(false)\n    if (onBlur) onBlur(evt)\n  }\n\n  function handleMouseDown(evt) {\n    setPressed(true)\n    if (onMouseDown) onMouseDown(evt)\n  }\n\n  function handleMouseUp(evt) {\n    setPressed(false)\n    if (onMouseUp) onMouseUp(evt)\n  }\n\n  return (\n    <g\n      transform={`translate(${x}, ${y})`}\n      className={`rsm-marker ${className}`}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      style={style[isPressed || isFocused ? (isPressed ? \"pressed\" : \"hover\") : \"default\"]}\n      {...restProps}\n    >\n      {children}\n    </g>\n  )\n}\n\nMarker.propTypes = {\n  coordinates: PropTypes.array,\n  children: PropTypes.oneOfType([\n    PropTypes.node,\n    PropTypes.arrayOf(PropTypes.node),\n  ]),\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onMouseDown: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  style: PropTypes.object,\n  className: PropTypes.string,\n}\n\nexport default Marker\n","\nimport React, { useContext } from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { MapContext } from \"./MapProvider\"\nimport { createConnectorPath } from \"../utils\"\n\nconst Annotation = ({\n  subject,\n  children,\n  connectorProps,\n  dx = 30,\n  dy = 30,\n  curve = 0,\n  className = \"\",\n  ...restProps\n}) => {\n  const { projection } = useContext(MapContext)\n  const [x, y] = projection(subject)\n  const connectorPath = createConnectorPath(dx, dy, curve)\n\n  return (\n    <g\n      transform={`translate(${x + dx}, ${y + dy})`}\n      className={`rsm-annotation ${className}`}\n      {...restProps}\n    >\n      <path d={connectorPath} fill=\"transparent\" stroke=\"#000\" {...connectorProps} />\n      {children}\n    </g>\n  )\n}\n\nAnnotation.propTypes = {\n  subject: PropTypes.array,\n  children: PropTypes.oneOfType([\n    PropTypes.node,\n    PropTypes.arrayOf(PropTypes.node),\n  ]),\n  dx: PropTypes.number,\n  dy: PropTypes.number,\n  curve: PropTypes.number,\n  connectorProps: PropTypes.object,\n  className: PropTypes.string,\n}\n\nexport default Annotation\n","import React from 'react'\nimport { Grid, List, Divider, Image } from 'semantic-ui-react'\n\nexport default function Notes(props){\n\n  return (\n    <div style={{paddingTop: '2em', fontWeight: 300}}>\n    <Divider/>\n    <Grid>\n      <Grid.Row>\n        <Grid.Column>\n          <small>\n          The ways in which this dynamic epidemic will interact with county contextual factors and impact Americans in coming months (and years) are poorly understood. \n          Early data suggest that population density, area-level poverty, residential segregation, underlying population health status (especially chronic comorbidity), and availability of services (especially testing coverage and primary care density) are associated with the geographical distribution of COVID-19—but these associations are not monotonic nor are they meaningful in isolation. \n          Given the vast heterogeneity in social, demographic, and economic domains within and across US communities, a formidable challenge for public health actors will be responding to the epidemic in a manner that takes contextual factors into account and assures health equity among all Americans.<br/>\n          The experience with COVID-19 thus far indicates that previously existing public health infrastructure and data tracking systems were ill-prepared to dynamically collect and synthesize data for tailored response. \n          For example, despite the early data indicating that area-level deprivation was associated with higher COVID-19 case fatality and mortality (per capita deaths), there is little guidance regarding how to critically incorporate the role of social determinants into the public health response to the epidemic. \n          In particular, a coherent, easy-to-use, and actionable integration of COVID-19 epidemiologic data with county context is lacking. \n          <b> This is why we put together this COVID-19 Health Equity Dashboard</b>.\n          </small>\n        </Grid.Column>\n      </Grid.Row>\n      <Grid.Row columns={2}>\n        <Grid.Column>\n          <small>\n            <b>Data Sources</b><br/>\n            <List as='ul'>\n              <List.Item as='li'><a href=\"https://covidtracking.com/data\">The COVID Tracking Project by The Atlantic</a></List.Item>\n              <List.Item as='li'><a href=\"https://www.census.gov/programs-surveys/acs\">American Community Survey by the U.S. Census Bureau</a></List.Item>\n              <List.Item as='li'>The Center for Systems Science and Engineering at Johns Hopkins University</List.Item>\n              <List.Item as='li'>The Institute for Health Metrics and Evaluation</List.Item>\n              <List.Item as='li'>American Hospital Association</List.Item>\n              <List.Item as='li'>Centers for Disease Control and Prevention</List.Item>\n            </List>\n            <b>About Us</b><br/>\n            We are a group of epidemiologists, doctors, and software engineers from Emory University and University of Michigan.\n            <List as='ul'>\n              <List.Item as='li'>Shivani A. Patel, PhD, Assitant Professor of Global Health at the Rollins School of Public Health</List.Item>\n              <List.Item as='li'>K. M. Venkat Narayan, MD, OC Hubert Professor of Global Health and Epidemiology, Rollins School of Public Health</List.Item>\n              <List.Item as='li'>Carlos Del Rio, MD, Professor of medicine in the Division of Infectious Diseases at Emory University School of Medicine</List.Item>\n              <List.Item as='li'>Neil K. Mehta, PhD, Assistant Professor of Health Management and Policy at University of Michigan</List.Item>\n              <List.Item as='li'>Vince Marconi, MD, Professor of Medicine at Emory University</List.Item>\n              <List.Item as='li'>Michael Kramer PhD, Associate Professor of Epidemiology at Emory University</List.Item>\n              <List.Item as='li'>Rob O'Reilly, PhD, Numeric Data Services Leader at the Emory Center for Digital Scholarship</List.Item>\n              <List.Item as='li'>Joyce Ho, PhD, Assistant Professor of Computer Science at Emory University</List.Item>\n              <List.Item as='li'>Yubin Park, PhD, Principal at Bonsai Research, LLC. Software development lead for the COVID-19 Health Equity Dashboard.</List.Item>\n              <List.Item as='li'>Daesung Choi, PhD, Postdoctoral Research Associate in the Department of Global Health at Emory University</List.Item>\n              <List.Item as='li'>Jing Zhang, PhD student, Department of Computer Science at Emory University</List.Item>\n              <List.Item as='li'>Mark Hutcheson, Managing Director at Emory Global Diabetes Research Center</List.Item>\n            </List>\n          </small>\n        </Grid.Column>\n        <Grid.Column>\n          <small>\n            <b>Variable Definitions</b><br/>\n            <List as='ul'>\n              <List.Item as='li'><b>COVID Case Rate / 1M</b>: COVID-19 positive case rate per one million people.</List.Item>\n              <List.Item as='li'><b>COVID Mortality / 100k</b>: Deaths due to COVID-19 per one hundred thousand people.</List.Item>\n              <List.Item as='li'><b># of Primary Care / 1M</b>: Number of primary care doctors per one million people, reported in 2016.</List.Item>\n              <List.Item as='li'><b>% Diabetes</b>: Percent of population with diabetes, reported in 2016</List.Item>\n              <List.Item as='li'><b>% Obesity</b>: Percent of population with obesity, reported in 2016</List.Item>\n              <List.Item as='li'><b>% Hispanics</b>: Percent of Hispanic population, reported in 2010</List.Item>\n              <List.Item as='li'><b>% Blacks</b>: Percent of African American population, reported in 2010</List.Item>\n              <List.Item as='li'><b>% Poverty</b>: Percent of population with poverty, reported in 2010. For more information, please see \n                \"<a href=\"https://www.census.gov/topics/income-poverty/poverty/guidance/poverty-measures.html\">How the Census Bureau Measures Poverty</a>\"</List.Item>\n              <List.Item as='li'><b>% Unemployed</b>: Percent of unemployed population, reported between 2006 and 2010.</List.Item>\n              <List.Item as='li'><b>% Over 65 Yrs</b>: Percent of population with over 65 years old, reported in 2017.</List.Item> \n              <List.Item as='li'><b>% Long Commute</b>: Percent of population who need long commute-driving alone, reported between 2009 and 2013.</List.Item>                                       \n            </List>\n            <Divider hidden/>\n            <Image size='small' src='/emory-covid19/logo.png' />\n            &copy; 2020 Emory University. All rights reserved.\n          </small> \n        </Grid.Column>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Column>\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n    </div>);\n}\n","import React, { useEffect, useState } from 'react'\nimport { Container, Grid, Breadcrumb, Header, List, Loader, Divider } from 'semantic-ui-react'\nimport AppBar from './AppBar';\nimport { geoCentroid } from \"d3-geo\";\nimport Geographies from './Geographies';\nimport Geography from './Geography';\nimport ComposableMap from './ComposableMap';\nimport Marker from './Marker';\nimport Annotation from './Annotation';\nimport ReactTooltip from \"react-tooltip\";\nimport { VictoryChart, \n  VictoryGroup, \n  VictoryBar, \n  VictoryTheme, \n  VictoryAxis, \n  VictoryLegend,\n  VictoryLine,  \n  VictoryLabel, \n  VictoryScatter,\n} from 'victory';\nimport { useHistory } from \"react-router-dom\";\nimport Notes from './Notes';\nimport _ from 'lodash';\nimport { scaleQuantile } from \"d3-scale\";\nimport configs from \"./state_config.json\";\n\n\n//const geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/counties-10m.json\"\n\nfunction MapLabels(props){\n\n  const offsets = {\n    VT: [50, -8],\n    NH: [34, 2],\n    MA: [30, -1],\n    RI: [28, 2],\n    CT: [35, 10],\n    NJ: [34, 1],\n    DE: [33, 0],\n    MD: [47, 10],\n    DC: [49, 21],\n  };\n\n  return (\n    <svg>\n      {props.geographies.map(geo => {\n          const centroid = geoCentroid(geo);\n          const cur = props.stateLabels.find(s => s.val === geo.id);\n          return (\n            <g key={geo.rsmKey + \"-name\"}>\n              {cur &&\n                centroid[0] > -160 &&\n                centroid[0] < -67 &&\n                (Object.keys(offsets).indexOf(cur.id) === -1 ? (\n                  <Marker coordinates={centroid}>\n                    <text y=\"2\" fontSize={14} textAnchor=\"middle\" fill=\"#eee\">\n                      {cur.id}\n                    </text>\n                  </Marker>\n                ) : (\n                  <Annotation\n                    subject={centroid}\n                    dx={offsets[cur.id][0]}\n                    dy={offsets[cur.id][1]}\n                  >\n                    <text x={4} fontSize={14} alignmentBaseline=\"middle\">\n                      {cur.id}\n                    </text>\n                  </Annotation>\n                ))}\n            </g>\n          );\n        })}\n    </svg>\n    );\n}\n\nexport default function USMap(props) {\n\n  const [stateName, setStateName] = useState('Georgia');\n  const [fips, setFips] = useState('13');\n  const [tooltipContent, setTooltipContent] = useState('');\n  const history = useHistory();\n  const [dataScatter, setDataScatter] = useState();\n  const [dataBar, setDataBar] = useState();\n  //const [dataLine, setDataLine] = useState();\n  const [stateLabels, setStateLabels] = useState();\n  const [colorScale, setColorScale] = useState();\n\n\n  useEffect(() => {\n\n    fetch('/emory-covid19/data/data_county.json').then(res => res.json())\n      .then(data => {\n        setDataBar(data);\n        const cs = scaleQuantile()\n        .domain(_.map(data, d=>d['covidmortalitycounty']))\n        .range([\n          \"#3ea9dc\",\n          \"#3b9dd1\",\n          \"#3890c7\",\n          \"#3484bd\",\n          \"#317ab5\",\n          \"#2964a2\",\n          \"#1d478a\",\n          \"#0d2e75\",\n          \"#012169\",\n        ]);\n      let scaleMap = {}\n      _.each(data, d=>{\n        scaleMap[d['covidmortalitycounty']] = cs(d['covidmortalitycounty'])});\n      setColorScale(scaleMap);\n      });\n    \n    //fetch('/emory-covid19/data/linechartNV.json').then(res => res.json())\n    //  .then(data => setDataLine(data));\n\n    fetch('/emory-covid19/data/allstates.json').then(res => res.json())\n      .then(data => setStateLabels(data));\n\n    fetch('/emory-covid19/data/scatter.json').then(res => res.json())\n      .then(data => setDataScatter(data));\n  }, [])\n\n  if (dataBar && dataScatter && stateLabels) {\n\n  return (\n      <div>\n        <AppBar menu='countyReport'/>\n        <Container style={{marginTop: '8em'}}>\n          <Breadcrumb>\n            <Breadcrumb.Section active>United States</Breadcrumb.Section>\n            <Breadcrumb.Divider />\n          </Breadcrumb>\n          <Divider hidden />\n          <Grid columns={16}>\n            <Grid.Row>\n              <Grid.Column width={9}>\n                <Header as='h2' style={{fontWeight: 400}}>\n                  <Header.Content>\n                    The health impacts of COVID-19 vary dramatically \n                    from community to community. <br/>\n                    How does your community compare?\n                    <Header.Subheader style={{fontWeight: 300}}>Click on a state below to drill down to your county data.</Header.Subheader>\n                  </Header.Content>\n                </Header>\n                <ComposableMap \n                  projection=\"geoAlbersUsa\" \n                  data-tip=\"\"\n                  width={600} \n                  height={450}\n                  projectionConfig={{scale: 750}}\n                   >\n                  <Geographies geography={geoUrl}>\n                    {({ geographies }) => \n                      <svg>\n                        {geographies.map(geo => (\n                          <Geography\n                            key={geo.rsmKey}\n                            geography={geo}\n                            onMouseEnter={()=>{\n                              //console.log(geo); \n                              const stateFips = geo.id.substring(0,2);\n                              const configMatched = configs.find(s => s.fips === stateFips);\n\n                              setFips(stateFips);\n                              setStateName(configMatched.name);\n                              //setStateName(geo.id.substring(0,2));\n                              //setStateName(geo.properties.name); \n                              setTooltipContent('Click to see county-level data')\n                            }}\n                            onMouseLeave={()=>{\n                              setTooltipContent(\"\")\n                            }}\n                            onClick={()=>{\n                              history.push(\"/emory-covid19/\"+geo.id.substring(0,2)+\"\");\n                            }}\n                            fill={fips===geo.id.substring(0,2)?'#f2a900':\n                            ((colorScale && dataBar[geo.id] && dataBar[geo.id]['covidmortalitycounty'])?\n                                colorScale[dataBar[geo.id]['covidmortalitycounty']] : \"#41b7e7\")}\n                          />\n                        ))}\n                        <MapLabels geographies={geographies} stateLabels={stateLabels}/>\n                      </svg>\n                    }\n                  </Geographies>\n                </ComposableMap>\n              </Grid.Column>\n              <Grid.Column width={7}>\n                <Header style={{fontWeight: 400}}>\n                  <Header.Content>\n                    A Snapshot of Health Disparities in {stateName}\n                    <Header.Subheader style={{fontWeight: 300}}>\n                      This is one example of health disparities regarding the impacts of COVID-19. \n                      As can be seen, the proportion of African American residents is correlated with COVID-19 mortality.\n                      Drill down to your county data by clicking on the map.\n                    </Header.Subheader>\n                  </Header.Content>\n                </Header>\n                <Grid>\n                  <Grid.Row>\n                    <VictoryChart\n                      width={500}\n                      height={400}\n                      scale={{y: 'log'}}\n                      padding={{left: 100, right: 50, top: 50, bottom: 50}}>\n                      <VictoryLegend\n                        x={10} y={10}\n                        orientation=\"horizontal\"\n                        colorScale={[\"#bdbfc1\", \"#f2a900\"]}\n                        data ={[\n                          {name: ('Other counties in '+ 'US')}, {name: 'Counties in '+stateName}\n                          ]}\n                      />\n                      <VictoryScatter\n                        sortKey={(d) => d.fips.substring(0,2)===fips}\n                        style={{ data: { fill: ({datum}) => datum.fips.substring(0,2)===fips?\"#f2a900\":\"#bdbfc1\",\n                                 fillOpacity: ({datum}) => datum.fips.substring(0,2)===fips?1.0:0.5} }}\n                        data={_.filter(dataScatter, (d)=> (d['% Blacks'] && d['COVID Mortality / 100k']))}\n                        size={4}\n                        x={'% Blacks'}\n                        y={'COVID Mortality / 100k'}\n                      />\n                      <VictoryAxis label={'% African American'}/>\n                      <VictoryAxis dependentAxis \n                        label={'COVID Mortality / 100k (log-scale)'} \n                        style={{ axisLabel: {padding: 40} }} \n                        tickCount={5}\n                        tickFormat={(y) => (Math.round(y*100)/100)}/>\n                    </VictoryChart>\n                  </Grid.Row>\n                  <Grid.Row style={{paddingTop: 0}}>\n                    <small style={{color: '#bdbfc1'}}>\n                    Data last updated: MM/DD/YYYY, updated every week<br/>\n                    The chart does not contain those counties with less than 10,000 population and less than 5% African American.\n                    Data sources: TBD\n                    </small>\n                  </Grid.Row>\n                </Grid>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n          <Notes />\n        </Container>\n        <ReactTooltip>{tooltipContent}</ReactTooltip>\n      </div>\n      );\n  } else {\n    return <Loader active inline='centered' />\n  }\n}","import React, { useEffect, useState } from 'react'\nimport { Container, Grid, Breadcrumb, Header, Loader, Divider } from 'semantic-ui-react'\nimport AppBar from './AppBar';\nimport Geographies from './Geographies';\nimport Geography from './Geography';\nimport ComposableMap from './ComposableMap';\nimport { VictoryChart, \n  VictoryGroup, \n  VictoryBar, \n  VictoryTheme, \n  VictoryAxis, \n  VictoryLegend,\n  VictoryLine } from 'victory';\n\nimport { useParams, useHistory } from 'react-router-dom';\nimport Notes from './Notes';\nimport ReactTooltip from \"react-tooltip\";\n\n\nimport configs from \"./state_config.json\";\n\n//import dataState from \"../data/data_state.json\";\n//import dataCountyPct from \"../data/data_county_pct.json\";\n\nexport default function StateMap(props) {\n\n  let { stateFips } = useParams();\n  const [config, setConfig] = useState();\n  const [stateName, setStateName] = useState('');\n  const [countyFips, setCountyFips] = useState('');\n  const [countyName, setCountyName] = useState('{County}');\n  const history = useHistory();\n  const [dataBar, setDataBar] = useState();\n  const [dataLine, setDataLine] = useState();\n  const [tooltipContent, setTooltipContent] = useState('');\n\n\n  useEffect(()=>{\n    \n    const configMatched = configs.find(s => s.fips === stateFips);\n\n    setConfig(configMatched);\n\n    setStateName(configMatched.name);\n\n    fetch('/emory-covid19/data/barchartSV'+stateFips+'.json').then(res => res.json())\n      .then(data => setDataBar(data));\n    \n    fetch('/emory-covid19/data/linechartSV'+stateFips+'.json').then(res => res.json())\n      .then(data => setDataLine(data));\n\n  }, [stateFips]);\n\n  if (dataBar && dataLine) {\n\n  return (\n      <div>\n        <AppBar menu='countyReport'/>\n        <Container style={{marginTop: '8em'}}>\n          {config &&\n          <div>\n          <Breadcrumb>\n            <Breadcrumb.Section link onClick={() => history.push('/emory-covid19')}>United States</Breadcrumb.Section>\n            <Breadcrumb.Divider />\n            <Breadcrumb.Section active>{stateName}</Breadcrumb.Section>\n            <Breadcrumb.Divider />\n          </Breadcrumb>\n          <Divider hidden/>\n          <Grid columns={16}>\n            <Grid.Row>\n              <Grid.Column width={8}>\n                <Header as='h2' style={{fontWeight: 400}}>\n                  <Header.Content>\n                    Covid-19 Outcomes in {stateName}\n                    <Header.Subheader style={{fontWeight: 300}}>\n                    Health determinants impact COVID-19 outcomes. \n                    </Header.Subheader>\n                    <Header.Subheader style={{fontWeight: 300}}>Click on a state below to drill down to your county data.</Header.Subheader>\n                  </Header.Content>\n                </Header>\n                <ComposableMap projection=\"geoAlbersUsa\" \n                  projectionConfig={{scale:`${config.scale}`}} \n                  width={500} \n                  height={500} \n                  data-tip=\"\"\n                  offsetX={config.offsetX}\n                  offsetY={config.offsetY}>\n                  <Geographies geography={config.url}>\n                    {({geographies}) => geographies.map(geo =>\n                      <Geography \n                        key={geo.rsmKey} \n                        geography={geo} \n                        onClick={()=>{\n                          history.push(\"/emory-covid19/\" + stateFips + \"/\" +geo.properties.COUNTYFP);\n                        }}\n                        onMouseEnter={()=>{\n                          setCountyFips(geo.properties.COUNTYFP);\n                          setCountyName(geo.properties.NAME);\n                          setTooltipContent('Click to see more county data');\n                        }}\n                        onMouseLeave={()=>{\n                          setTooltipContent(\"\")\n                        }}\n                        style={{\n                              default: {\n                                fill: \"#f2a900\",\n                                stroke: '#fff'\n                              },\n                              hover: {\n                                fill: \"#0033a0\",\n                                outline: \"none\"\n                              },\n                              pressed: {\n                                fill: \"#0033a0\",\n                                outline: \"none\"\n                              }\n                            }}/>\n                    )}\n                  </Geographies>\n                </ComposableMap>\n              </Grid.Column>\n              <Grid.Column width={8}>\n                <Header style={{fontWeight: 400}}>\n                  <Header.Content>\n                    Statistics of {countyName}\n                    <Header.Subheader style={{fontWeight: 300}}>\n                      New cases and new deaths are shown in 7-days moving averages.\n                    </Header.Subheader>\n                  </Header.Content>\n                </Header>\n                <Grid>\n                  <Grid.Row columns={2}>\n                    <Grid.Column>\n                      <VictoryChart theme={VictoryTheme.material}\n                        height={250}\n                        scale={{y: 'log'}}\n                        minDomain={{y:1}}>\n                        <VictoryLegend\n                          x={10} y={10}\n                          orientation=\"horizontal\"\n                          colorScale={[\"#0033a0\", \"#da291c\"]}\n                          data ={[\n                            {name: \"new cases\"}, {name: \"new deaths\"}\n                            ]}\n                        />\n                        <VictoryAxis tickCount={2}\n                          tickFormat={(t)=> new Date(t*1000).toLocaleDateString()}/>\n                        <VictoryAxis dependentAxis tickCount={5}\n                          tickFormat={(y) => (y<1000?y:(y/1000+'k'))}\n                          />\n                        <VictoryGroup \n                          colorScale={[\"#0033a0\", \"#da291c\"]}\n                        >\n                          <VictoryLine data={dataLine[countyFips]?dataLine[countyFips]:dataLine[\"\"]}\n                            x='t' y='dcase'\n                            />\n                          <VictoryLine data={dataLine[countyFips]?dataLine[countyFips]:dataLine[\"\"]}\n                            x='t' y='ddeath'\n                            />\n                        </VictoryGroup>  \n                      </VictoryChart>\n                    </Grid.Column>\n                    <Grid.Column>\n                      <VictoryChart theme={VictoryTheme.material}\n                        height={250}       \n                        scale={{y: 'log'}}                 \n                        minDomain={{y:1}}>\n                        <VictoryLegend\n                          x={10} y={10}\n                          orientation=\"horizontal\"\n                          colorScale={[\"#f2a900\", \"#0033a0\"]}\n                          data ={[\n                            {name: \"state new cases\"}, {name: \"county new cases\"}\n                            ]}\n                        />\n                        <VictoryAxis tickCount={2}\n                          tickFormat={(t)=> new Date(t*1000).toLocaleDateString()}/>\n                        <VictoryAxis dependentAxis tickCount={5}\n                          tickFormat={(y) => (y<1000?y:(y/1000+'k'))}\n\n                          />\n                        <VictoryGroup \n                          colorScale={[\"#f2a900\", \"#0033a0\"]}\n                        >\n                          <VictoryLine data={dataLine._state}\n                            x='t' y='dcase'\n                            />\n                          <VictoryLine data={dataLine[countyFips]?dataLine[countyFips]:dataLine[\"\"]}\n                            x='t' y='dcase'\n                            />\n                        </VictoryGroup>\n                      </VictoryChart>\n                    </Grid.Column>\n                  </Grid.Row>\n                  <Grid.Row columns={2}>\n                    <Grid.Column>\n                      <VictoryChart\n                        theme={VictoryTheme.material}\n                        domainPadding={20}\n                        padding={{left: 150, top: 50, bottom: 50}}\n                        height={400}\n                      >\n                        <VictoryAxis />\n                        <VictoryAxis dependentAxis tickCount={2}/>\n                        <VictoryGroup horizontal\n                          offset={10}\n                          style={{data: {width: 7}}}\n                          colorScale={[\"#b1b3b3\", \"#f2a900\", \"#0033a0\"]}\n                        >\n                          <VictoryBar\n                            data={dataBar._nation.slice(6)}\n                            x=\"nameShort\"\n                            y=\"value\"\n                          />\n                          <VictoryBar\n                            data={dataBar._state.slice(6)}\n                            x=\"nameShort\"\n                            y=\"value\"\n                          />\n                          <VictoryBar\n                            data={dataBar[countyFips]?dataBar[countyFips].slice(6):[]}\n                            x=\"nameShort\"\n                            y=\"value\"\n                          />\n                        </VictoryGroup>\n                      </VictoryChart>\n                    </Grid.Column>\n                    <Grid.Column>\n                      <VictoryChart\n                        theme={VictoryTheme.material}\n                        domainPadding={20}\n                        padding={{left: 150, top: 50, bottom: 50}}\n                        height={400}\n                      >\n                        <VictoryLegend\n                          x={10} y={10}\n                          orientation=\"horizontal\"\n                          colorScale={[\"#b1b3b3\", \"#f2a900\", \"#0033a0\"]}\n                          data ={[\n                            {name: \"nation\"}, {name: \"state\"}, {name: \"county\"}\n                            ]}\n                        />\n                        <VictoryAxis />\n                        <VictoryAxis dependentAxis tickCount={2}/>\n                        <VictoryGroup horizontal\n                          offset={10}\n                          style={{data: {width: 7}}}\n                          colorScale={[\"#b1b3b3\", \"#f2a900\", \"#0033a0\"]}\n                        >\n                          <VictoryBar\n                            data={dataBar._nation.slice(0,6)}\n                            x=\"nameShort\"\n                            y=\"value\"\n                          />\n                          <VictoryBar\n                            data={dataBar._state.slice(0,6)}\n                            x=\"nameShort\"\n                            y=\"value\"\n                          />\n                          <VictoryBar\n                            data={dataBar[countyFips]?dataBar[countyFips].slice(0,6):[]}\n                            x=\"nameShort\"\n                            y=\"value\"\n                          />\n                        </VictoryGroup>\n                      </VictoryChart>\n                    </Grid.Column>\n                  </Grid.Row>\n                </Grid>\n              </Grid.Column>\n            </Grid.Row>\n            \n          </Grid>\n          </div>\n        }\n        <Notes />\n      </Container>\n      <ReactTooltip>{tooltipContent}</ReactTooltip>\n    </div>\n    );\n  } else{\n    return <Loader active inline='centered' />\n  }\n\n\n\n\n}","import React, { useEffect, useState } from 'react'\nimport { Container, Grid, Breadcrumb, Header, Loader, Statistic, Table, Divider } from 'semantic-ui-react'\nimport AppBar from './AppBar';\nimport Geographies from './Geographies';\nimport Geography from './Geography';\nimport ComposableMap from './ComposableMap';\nimport { VictoryChart, \n  VictoryGroup, \n  VictoryBar, \n  VictoryTheme, \n  VictoryAxis, \n  VictoryLegend,\n  VictoryLine,\n  VictoryLabel, \n  VictoryScatter,\n} from 'victory';\n\nimport { useParams, useHistory } from 'react-router-dom';\nimport Notes from './Notes';\nimport ReactTooltip from \"react-tooltip\";\nimport fips2county from './fips2county.json'\nimport configs from \"./state_config.json\";\nimport _ from 'lodash';\n\n\nexport default function CountyReport() {\n\n  let { stateFips, countyFips } = useParams();\n  const [config, setConfig] = useState();\n  const [stateName, setStateName] = useState('');\n  const [countyName, setCountyName] = useState('');\n  const history = useHistory();\n  const [dataBar, setDataBar] = useState();\n  const [dataLine, setDataLine] = useState();\n  const [tooltipContent, setTooltipContent] = useState('');\n  const [covidMetric, setCovidMetric] = useState({case: 'N/A', death: 'N/A', t: 'n/a'});\n  const scatterX0 = 'COVID Mortality / 100k';\n  const scatterX1 = 'COVID Case Rate / 1M';\n  const scatterX2 = '% Over 65 Yrs';\n  const scatterX3 = '% Poverty';\n  const scatterX4 = '% Unemployed';\n  const scatterX5 = '% Diabetes';\n  const scatterX6 = '% Obesity';\n  const scatterX7 = '% Hispanics';\n  const scatterX8 = '% Blacks';\n\n  useEffect(()=>{\n\n    const configMatched = configs.find(s => s.fips === stateFips);\n    setConfig(configMatched);\n    setStateName(configMatched.name);\n    setCountyName(fips2county[stateFips+countyFips]);\n\n    fetch('/emory-covid19/data/barchartSV'+stateFips+'.json').then(res => res.json())\n      .then(data => setDataBar(data));\n    \n    fetch('/emory-covid19/data/linechartSV'+stateFips+'.json').then(res => res.json())\n      .then(data => setDataLine(data));\n\n  }, [stateFips]);\n\n  useEffect(() => {\n    if (dataLine && dataLine[countyFips]){\n      setCovidMetric(_.takeRight(dataLine[countyFips])[0]);\n    }\n  }, [dataLine])\n\n  if (dataBar && dataLine) {\n\n  return (\n      <div>\n        <AppBar menu='countyReport'/>\n        <Container style={{marginTop: '8em'}}>\n          {config &&\n          <div>\n          <Breadcrumb>\n            <Breadcrumb.Section link onClick={() => history.push('/emory-covid19')}>United States</Breadcrumb.Section>\n            <Breadcrumb.Divider />\n            <Breadcrumb.Section link onClick={() => history.push('/emory-covid19/'+stateFips)}>{stateName}</Breadcrumb.Section>\n            <Breadcrumb.Divider />\n            <Breadcrumb.Section active>{countyName}</Breadcrumb.Section>\n            <Breadcrumb.Divider />\n          </Breadcrumb>\n          <Header as='h2'>\n            <Header.Content>\n              Covid-19 Outcomes in {countyName}\n              <Header.Subheader>\n              Health determinants impact COVID-19 outcomes. \n              </Header.Subheader>\n            </Header.Content>\n          </Header>\n          <Grid style={{paddingTop: '2em'}}>\n            <Grid.Row>\n              <Grid.Column>\n                <Statistic size='small'>\n                  <Statistic.Value>\n                    {covidMetric.case===null?'0':covidMetric.case.toLocaleString()}\n                  </Statistic.Value>\n                  <Statistic.Label>Total Cases</Statistic.Label>\n                </Statistic>\n                <Statistic style={{paddingLeft: '2em'}} size='small'>\n                  <Statistic.Value>\n                    {covidMetric.death===null?'0':covidMetric.death.toLocaleString()}\n                  </Statistic.Value>\n                  <Statistic.Label>Total Death</Statistic.Label>\n                </Statistic>\n                <span style={{padding: '3em', color: '#bdbfc1'}}>Last updated on {covidMetric.t==='n/a'?'N/A':(new Date(covidMetric.t*1000).toLocaleDateString())}</span>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n          <Grid columns={3}>\n            <Grid.Row>\n              <Grid.Column>\n                <VictoryChart theme={VictoryTheme.material}\n                  height={250}\n                  scale={{y: 'log'}}\n                  padding={{left: 50, right: 10, top: 60, bottom: 30}}\n                  minDomain={{y:1}}>\n                  <VictoryLabel text=\"New Cases & Deaths over Time (7-day avg.)\" x={180} y={20} textAnchor=\"middle\"/>\n                  <VictoryLegend\n                    x={10} y={35}\n                    orientation=\"horizontal\"\n                    colorScale={[\"#0033a0\", \"#da291c\"]}\n                    data ={[\n                      {name: \"new cases\"}, {name: \"new deaths\"}\n                      ]}\n                  />\n                  <VictoryAxis tickCount={2}\n                    tickFormat={(t)=> new Date(t*1000).toLocaleDateString()}/>\n                  <VictoryAxis dependentAxis tickCount={5}\n                    tickFormat={(y) => (y<1000?y:(y/1000+'k'))}\n                    />\n                  <VictoryGroup \n                    colorScale={[\"#0033a0\", \"#da291c\"]}\n                  >\n                    <VictoryLine data={dataLine[countyFips]?dataLine[countyFips]:dataLine[\"\"]}\n                      x='t' y='dcase'\n                      />\n                    <VictoryLine data={dataLine[countyFips]?dataLine[countyFips]:dataLine[\"\"]}\n                      x='t' y='ddeath'\n                      />\n                  </VictoryGroup>  \n                </VictoryChart>\n              </Grid.Column>\n              <Grid.Column>\n                <VictoryChart theme={VictoryTheme.material}\n                  height={250}\n                  scale={{y: 'log'}}\n                  padding={{left: 50, right: 10, top: 60, bottom: 30}}\n                  minDomain={{y:1}}>\n                  <VictoryLabel text=\"County vs. State New Cases (7-day avg.)\" x={180} y={20} textAnchor=\"middle\"/>\n                  <VictoryLegend\n                    x={10} y={35}\n                    orientation=\"horizontal\"\n                    colorScale={[\"#df7a1c\", \"#0033a0\"]}\n                    data ={[\n                      {name: \"state new cases\"}, {name: \"county new cases\"}\n                      ]}\n                  />\n                  <VictoryAxis tickCount={2}\n                    tickFormat={(t)=> new Date(t*1000).toLocaleDateString()}/>\n                  <VictoryAxis dependentAxis tickCount={5}\n                    tickFormat={(y) => (y<1000?y:(y/1000+'k'))}\n                    />\n                  <VictoryGroup \n                    colorScale={[\"#df7a1c\", \"#0033a0\"]}\n                  >\n                    <VictoryLine data={dataLine._state}\n                      x='t' y='dcase'\n                      />\n                    <VictoryLine data={dataLine[countyFips]?dataLine[countyFips]:dataLine[\"\"]}\n                      x='t' y='dcase'\n                      />\n                  </VictoryGroup>  \n                </VictoryChart>\n              </Grid.Column>\n              <Grid.Column>\n                <VictoryChart theme={VictoryTheme.material}\n                  height={250}\n                  scale={{y: 'log'}}\n                  padding={{left: 50, right: 10, top: 60, bottom: 30}}\n                  minDomain={{y:1}}>\n                  <VictoryLabel text=\"County vs. State New Deaths (7-day avg.)\" x={180} y={20} textAnchor=\"middle\"/>\n                  <VictoryLegend\n                    x={10} y={35}\n                    orientation=\"horizontal\"\n                    colorScale={[\"#df7a1c\", \"#0033a0\"]}\n                    data ={[\n                      {name: \"state new deaths\"}, {name: \"county new deaths\"}\n                      ]}\n                  />\n                  <VictoryAxis tickCount={2}\n                    tickFormat={(t)=> new Date(t*1000).toLocaleDateString()}/>\n                  <VictoryAxis dependentAxis tickCount={5}\n                    tickFormat={(y) => (y<1000?y:(y/1000+'k'))}\n                    />\n                  <VictoryGroup \n                    colorScale={[\"#df7a1c\", \"#0033a0\"]}\n                  >\n                    <VictoryLine data={dataLine._state}\n                      x='t' y='ddeath'\n                      />\n                    <VictoryLine data={dataLine[countyFips]?dataLine[countyFips]:dataLine[\"\"]}\n                      x='t' y='ddeath'\n                      />\n                  </VictoryGroup>  \n                </VictoryChart>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n          <Grid columns={1}>\n            <Grid.Row>\n              <Grid.Column>\n                <VictoryChart\n                  theme={VictoryTheme.material}\n                  domainPadding={20}\n                  width={960}\n                  height={300}\n                  padding={{left: 50, right: 10, top: 60, bottom: 80}}\n                >\n                  <VictoryLabel text=\"Heatlh Determinants and COVID Statistics\" x={480} y={20} textAnchor=\"middle\"/>\n                  <VictoryLegend\n                    x={80} y={40}\n                    orientation=\"horizontal\"\n                    colorScale={[\"#bdbfc1\", \"#f4c082\", \"#0033a0\"]}\n                    data ={[\n                      {name: \"nation\"}, {name: \"state\"}, {name: \"county\"}\n                      ]}\n                  />\n                  <VictoryGroup\n                    offset={10}\n                    style={{data: {width: 5}}}\n                    colorScale={[\"#bdbfc1\", \"#f4c082\", \"#0033a0\"]}\n                  >\n                    <VictoryBar\n                      data={_.sortBy(dataBar._nation, 'seq')}\n                      x=\"nameShort\"\n                      y=\"value\"\n                    />\n                    <VictoryBar\n                      data={_.sortBy(dataBar._state, 'seq')}\n                      x=\"nameShort\"\n                      y=\"value\"\n                    />\n                    <VictoryBar\n                      data={_.sortBy(dataBar[countyFips], 'seq')}\n                      x=\"nameShort\"\n                      y=\"value\"\n                    />\n                  </VictoryGroup>\n                  <VictoryAxis tickLabelComponent={<VictoryLabel angle={-45} textAnchor=\"end\" style={{fontSize: '8px'}}/>} /> \n                  <VictoryAxis dependentAxis/> \n                </VictoryChart>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n          <Grid columns={1} textAlign='center'>\n            <Grid.Row>\n              <Grid.Column>\n              <small style={{fontWeight: 700}}>{'Statistics of '+countyName + ' and Other Counties in '+ stateName}</small>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n          <Grid columns={4}>\n            <Grid.Row>\n              <Grid.Column>\n                <VictoryChart\n                  width={400}\n                  height={300}\n                  scale={{y: 'log', x: 'log'}}\n                  padding={{left: 80, right: 10, top: 50, bottom: 50}}>\n                  <VictoryLegend\n                    x={10} y={10}\n                    orientation=\"horizontal\"\n                    colorScale={[\"#bdbfc1\", \"#0033a0\"]}\n                    data ={[\n                      {name: ('Other counties in '+ stateName)}, {name: countyName}\n                      ]}\n                  />\n                  <VictoryScatter\n                    sortKey={(d) => d.fips===countyFips}\n                    style={{ data: { fill: ({datum}) => datum.fips===countyFips?\"#0033a0\":\"#bdbfc1\",\n                             fillOpacity: ({datum}) => datum.fips===countyFips?1.0:0.5} }}\n                    data={_.filter(dataBar._scatter, (d)=> (d[scatterX0] && d[scatterX1]))}\n                    size={5}\n                    x={scatterX1}\n                    y={scatterX0}\n                  />\n                  <VictoryAxis label={scatterX1 + ' (in log)'}\n                    tickCount={5}\n                    tickFormat={(y) => (Math.round(y*100)/100)} />\n                  <VictoryAxis dependentAxis label={scatterX0 + ' (in log)'} \n                    style={{ axisLabel: {padding: 40} }}\n                    tickCount={5}\n                    tickFormat={(y) => (Math.round(y*100)/100)} />\n                </VictoryChart>\n              </Grid.Column>\n              <Grid.Column>\n                <VictoryChart\n                  width={400}\n                  height={300}\n                  scale={{y: 'log'}}\n                  padding={{left: 80, right: 10, top: 50, bottom: 50}}>\n                  <VictoryScatter\n                    sortKey={(d) => d.fips===countyFips}\n                    style={{ data: { fill: ({datum}) => datum.fips===countyFips?\"#0033a0\":\"#bdbfc1\",\n                             fillOpacity: ({datum}) => datum.fips===countyFips?1.0:0.5} }}\n                    data={_.filter(dataBar._scatter, (d)=> (d[scatterX0] && d[scatterX2]))}\n                    size={5}\n                    x={scatterX2}\n                    y={scatterX0}\n                  />\n                  <VictoryAxis label={scatterX2}/>\n                  <VictoryAxis dependentAxis label={scatterX0 + ' (in log)'} \n                    style={{ axisLabel: {padding: 40} }}\n                    tickCount={5}\n                    tickFormat={(y) => (Math.round(y*100)/100)} />\n                </VictoryChart>\n              </Grid.Column>\n              <Grid.Column>\n                <VictoryChart\n                  width={400}\n                  height={300}\n                  scale={{y: 'log'}}\n                  padding={{left: 80, right: 10, top: 50, bottom: 50}}>\n                  <VictoryScatter\n                    sortKey={(d) => d.fips===countyFips}\n                    style={{ data: { fill: ({datum}) => datum.fips===countyFips?\"#0033a0\":\"#bdbfc1\",\n                             fillOpacity: ({datum}) => datum.fips===countyFips?1.0:0.5} }}\n                    data={_.filter(dataBar._scatter, (d)=> (d[scatterX1] && d[scatterX3]))}\n                    size={5}\n                    x={scatterX3}\n                    y={scatterX1}\n                  />\n                  <VictoryAxis label={scatterX3}/>\n                  <VictoryAxis dependentAxis label={scatterX1 + ' (in log)'} \n                    style={{ axisLabel: {padding: 40} }}\n                    tickCount={5}\n                    tickFormat={(y) => (Math.round(y*100)/100)} />\n                </VictoryChart>\n              </Grid.Column>\n              <Grid.Column>\n                <VictoryChart\n                  width={400}\n                  height={300}\n                  scale={{y: 'log'}}\n                  padding={{left: 80, right: 10, top: 50, bottom: 50}}>\n                  <VictoryScatter\n                    sortKey={(d) => d.fips===countyFips}\n                    style={{ data: { fill: ({datum}) => datum.fips===countyFips?\"#0033a0\":\"#bdbfc1\",\n                             fillOpacity: ({datum}) => datum.fips===countyFips?1.0:0.5} }}\n                    data={_.filter(dataBar._scatter, (d)=> (d[scatterX1] && d[scatterX4]))}\n                    size={5}\n                    x={scatterX4}\n                    y={scatterX1}\n                  />\n                  <VictoryAxis label={scatterX4}/>\n                  <VictoryAxis dependentAxis label={scatterX1 + ' (in log)'} \n                    style={{ axisLabel: {padding: 40} }}\n                    tickCount={5}\n                    tickFormat={(y) => (Math.round(y*100)/100)} />\n                </VictoryChart>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                <VictoryChart\n                  width={400}\n                  height={300}\n                  scale={{y: 'log'}}\n                  padding={{left: 80, right: 10, top: 50, bottom: 50}}>\n                  <VictoryScatter\n                    sortKey={(d) => d.fips===countyFips}\n                    style={{ data: { fill: ({datum}) => datum.fips===countyFips?\"#0033a0\":\"#bdbfc1\",\n                             fillOpacity: ({datum}) => datum.fips===countyFips?1.0:0.5} }}\n                    data={_.filter(dataBar._scatter, (d)=> (d[scatterX0] && d[scatterX1]))}\n                    size={5}\n                    x={scatterX5}\n                    y={scatterX1}\n                  />\n                  <VictoryAxis label={scatterX5}/>\n                  <VictoryAxis dependentAxis label={scatterX1 + ' (in log)'} \n                    style={{ axisLabel: {padding: 40} }}\n                    tickCount={5}\n                    tickFormat={(y) => (Math.round(y*100)/100)} />\n                </VictoryChart>\n              </Grid.Column>\n              <Grid.Column>\n                <VictoryChart\n                  width={400}\n                  height={300}\n                  scale={{y: 'log'}}\n                  padding={{left: 80, right: 10, top: 50, bottom: 50}}>\n                  <VictoryScatter\n                    sortKey={(d) => d.fips===countyFips}\n                    style={{ data: { fill: ({datum}) => datum.fips===countyFips?\"#0033a0\":\"#bdbfc1\",\n                             fillOpacity: ({datum}) => datum.fips===countyFips?1.0:0.5} }}\n                    data={_.filter(dataBar._scatter, (d)=> (d[scatterX0] && d[scatterX2]))}\n                    size={5}\n                    x={scatterX6}\n                    y={scatterX1}\n                  />\n                  <VictoryAxis label={scatterX6}/>\n                  <VictoryAxis dependentAxis label={scatterX1 + ' (in log)'} \n                    style={{ axisLabel: {padding: 40} }}\n                    tickCount={5}\n                    tickFormat={(y) => (Math.round(y*100)/100)} />\n                </VictoryChart>\n              </Grid.Column>\n              <Grid.Column>\n                <VictoryChart\n                  width={400}\n                  height={300}\n                  scale={{y: 'log'}}\n                  padding={{left: 80, right: 10, top: 50, bottom: 50}}>\n                  <VictoryScatter\n                    sortKey={(d) => d.fips===countyFips}\n                    style={{ data: { fill: ({datum}) => datum.fips===countyFips?\"#0033a0\":\"#bdbfc1\",\n                             fillOpacity: ({datum}) => datum.fips===countyFips?1.0:0.5} }}\n                    data={_.filter(dataBar._scatter, (d)=> (d[scatterX1] && d[scatterX3]))}\n                    size={5}\n                    x={scatterX7}\n                    y={scatterX1}\n                  />\n                  <VictoryAxis label={scatterX7}/>\n                  <VictoryAxis dependentAxis label={scatterX1 + ' (in log)'} \n                    style={{ axisLabel: {padding: 40} }}\n                    tickCount={5}\n                    tickFormat={(y) => (Math.round(y*100)/100)} />\n                </VictoryChart>\n              </Grid.Column>\n              <Grid.Column>\n                <VictoryChart\n                  width={400}\n                  height={300}\n                  scale={{y: 'log'}}                  \n                  padding={{left: 80, right: 10, top: 50, bottom: 50}}>\n                  <VictoryScatter\n                    sortKey={(d) => d.fips===countyFips}\n                    style={{ data: { fill: ({datum}) => datum.fips===countyFips?\"#0033a0\":\"#bdbfc1\",\n                             fillOpacity: ({datum}) => datum.fips===countyFips?1.0:0.5} }}\n                    data={_.filter(dataBar._scatter, (d)=> (d[scatterX1] && d[scatterX4]))}\n                    size={5}\n                    x={scatterX8}\n                    y={scatterX1}\n                  />\n                  <VictoryAxis label={scatterX8}/>\n                  <VictoryAxis dependentAxis label={scatterX1 + ' (in log)'} \n                    style={{ axisLabel: {padding: 40} }}\n                    tickCount={5}\n                    tickFormat={(y) => (Math.round(y*100)/100)} />\n                </VictoryChart>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n          <Header as='h4'>\n            <Header.Content>\n              Data Table\n            </Header.Content>\n          </Header>\n          <Table striped compact basic='very'>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell>Variable Name</Table.HeaderCell>\n                <Table.HeaderCell>{countyName}</Table.HeaderCell>\n                <Table.HeaderCell>{stateName}</Table.HeaderCell>\n                <Table.HeaderCell>United States</Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {_.map(_.sortBy(dataBar[countyFips], 'seq'), \n                (d) => (<Table.Row key={d.nameShort}>\n                  <Table.Cell>{d.nameShort}</Table.Cell>\n                  <Table.Cell>{Math.round(d.value*100)/100}</Table.Cell>\n                  <Table.Cell>{Math.round(_.find(dataBar._state, (x) => x.name==d.name).value*100)/100}</Table.Cell>\n                  <Table.Cell>{Math.round(_.find(dataBar._nation, (x) => x.name==d.name).value*100)/100}</Table.Cell>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n          </div>\n        }\n        <Notes />\n      </Container>\n      <ReactTooltip>{tooltipContent}</ReactTooltip>\n    </div>\n    );\n  } else{\n    return <Loader active inline='centered' />\n  }\n\n\n\n}","import React, { useEffect, useState } from 'react'\nimport { Container, Dropdown, Header, Grid } from 'semantic-ui-react'\nimport AppBar from './AppBar';\nimport Geographies from './Geographies';\nimport Geography from './Geography';\nimport ComposableMap from './ComposableMap';\nimport { useParams, useHistory } from 'react-router-dom';\nimport Notes from './Notes';\nimport ReactTooltip from \"react-tooltip\";\nimport stateOptions from \"./stateOptions.json\";\nimport measureOptions from \"./measureOptions.json\";\nimport configs from \"./state_config.json\";\nimport _ from 'lodash';\nimport { scaleQuantile } from \"d3-scale\";\n\nexport default function CountyCompare() {\n\n  const [stateFips, setStateFips] = useState();\n  const [measureA, setMeasureA] = useState();\n  const [measureB, setMeasureB] = useState();  \n  const [colorScaleA, setColorScaleA] = useState();\n  const [colorScaleB, setColorScaleB] = useState();\n  const [config, setConfig] = useState();\n  const [tooltipContent, setTooltipContent] = useState('');\n  const [dataBar, setDataBar] = useState();\n\n  useEffect(()=>{\n    \n    const configMatched = configs.find(s => s.fips === stateFips);\n    setConfig(configMatched);\n\n    if (stateFips){\n      fetch('/emory-covid19/data/barchartSV' + stateFips + '.json').then(res => res.json())\n        .then(data => {\n          let coldata = {};\n          const dataFltrd = _.filter(data, (d, k)=>{\n              _.each(d, (item)=> {item.fips = k});\n              return ([\"scatter\", \"nation\", \"state\", \"\"].indexOf(k) < 0);\n            });\n          _.each(dataFltrd, (d) => {\n            _.each(d, (item)=>{\n              if (!(item.nameShort in coldata)){\n                coldata[item.nameShort] = {}\n              }\n              coldata[item.nameShort][item.fips] = item.value; \n            });\n          });\n          setDataBar(coldata);\n        });\n      setMeasureA(null);\n      setMeasureB(null);\n      setColorScaleA(null);\n      setColorScaleB(null);\n    }\n  }, [stateFips]);\n\n  useEffect(() => {\n    if (measureA){\n      const cs = scaleQuantile()\n        .domain(_.map(dataBar[measureA], d=>d))\n        .range([\n          \"#ffedea\",\n          \"#ffcec5\",\n          \"#ffad9f\",\n          \"#ff8a75\",\n          \"#ff5533\",\n          \"#e2492d\",\n          \"#be3d26\",\n          \"#9a311f\",\n          \"#782618\"\n        ]);\n      let scaleMap = {}\n      _.each(dataBar[measureA], d=>{\n        scaleMap[d] = cs(d)});\n      setColorScaleA(scaleMap);\n    }\n  }, [measureA]);\n\n  useEffect(() => {\n    if (measureB){\n      const cs = scaleQuantile()\n        .domain(_.map(dataBar[measureB], d=>d))\n        .range([\n          \"#ffedea\",\n          \"#ffcec5\",\n          \"#ffad9f\",\n          \"#ff8a75\",\n          \"#ff5533\",\n          \"#e2492d\",\n          \"#be3d26\",\n          \"#9a311f\",\n          \"#782618\"\n        ]);\n      let scaleMap = {}\n      _.each(dataBar[measureB], d=>{\n        scaleMap[d] = cs(d)});\n      setColorScaleB(scaleMap);\n    }\n  }, [measureB]);  \n\n  return (\n      <div>\n        <AppBar menu='countyCompare'/>\n        <Container style={{marginTop: '8em'}}>\n          <Header as='h3'>\n            <Header.Content style={{fontWeight: 400}}>\n              Side-by-Side View of Counties in&nbsp;\n              <Dropdown\n                icon=''\n                style={{background: '#fff', \n                        fontWeight: 400, \n                        width: '200px',\n                        borderTop: 'none',\n                        borderLeft: 'none',\n                        borderRight: 'none', \n                        borderBottom: '1px solid #bdbfc1',\n                        borderRadius: 0,\n                        minHeight: '2.2em',\n                        paddingBottom: '0.2em'}}\n                placeholder='Select State'\n                inline\n                search\n                selection\n                options={stateOptions}\n                onChange={(e, { value }) => {\n                  setStateFips(value);\n                }}\n              />\n            </Header.Content>\n          </Header>\n          {config &&\n          <Grid columns={2} style={{paddingTop: '2em', minHeight: '400px'}}>\n            <Grid.Row>\n              <Grid.Column>\n                <Grid columns={2} centered>\n                  <Grid.Column>\n                    <Dropdown\n                      style={{background: '#fff', \n                              fontWeight: 400, \n                              borderTop: 'none',\n                              borderLeft: 'none',\n                              borderRight: 'none', \n                              borderBottom: '1ox solid #bdbfc1',\n                              borderRadius: 0}}\n                      placeholder='Select Measure'\n                      search\n                      selection\n                      value={measureA}\n                      options={measureOptions}\n                      onChange={(e, { value }) => {\n                        setMeasureA(value)\n                      }}\n                    />\n                  </Grid.Column>\n                </Grid>\n              </Grid.Column>\n              <Grid.Column>\n                <Grid columns={2} centered>\n                  <Grid.Column>\n                    <Dropdown\n                      style={{background: '#fff', \n                              fontWeight: 400, \n                              borderTop: 'none',\n                              borderLeft: 'none',\n                              borderRight: 'none', \n                              borderBottom: '1ox solid #bdbfc1',\n                              borderRadius: 0}}\n                      placeholder='Select Measure'\n                      fluid\n                      labeled\n                      search\n                      selection\n                      value={measureB}\n                      options={measureOptions}\n                      onChange={(e, { value }) => {\n                        setMeasureB(value)\n                      }}\n                    />\n                  </Grid.Column>\n                </Grid>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                <ComposableMap projection=\"geoAlbersUsa\" \n                  projectionConfig={{scale:`${config.scale}`}} \n                  width={500} \n                  height={600} \n                  data-tip=\"\"\n                  offsetX={config.offsetX}\n                  offsetY={config.offsetY}>\n                  <Geographies geography={config.url}>\n                    {({geographies}) => geographies.map(geo => \n                      <Geography \n                        key={geo.rsmKey} \n                        geography={geo} \n                        onMouseEnter={()=>{\n                          if(measureA && colorScaleA){\n                            const cur = dataBar[measureA][geo.properties.COUNTYFP];\n                            setTooltipContent(cur?(Math.round(cur*100)/100):'');\n                          }\n                        }}\n                        onMouseLeave={()=>{\n                          setTooltipContent(\"\")\n                        }}\n                        fill={(measureA && colorScaleA && dataBar[measureA][geo.properties.COUNTYFP])?\n                                colorScaleA[dataBar[measureA][geo.properties.COUNTYFP]] : \"#EEE\"}\n                      />\n                    )}\n                  </Geographies>\n                </ComposableMap>\n              </Grid.Column>\n              <Grid.Column>\n                <ComposableMap projection=\"geoAlbersUsa\" \n                  projectionConfig={{scale:`${config.scale}`}} \n                  width={500} \n                  height={600} \n                  data-tip=\"\"\n                  offsetX={config.offsetX}\n                  offsetY={config.offsetY}>\n                  <Geographies geography={config.url}>\n                    {({geographies}) => geographies.map(geo => \n                      <Geography \n                        key={geo.rsmKey} \n                        geography={geo} \n                        onMouseEnter={()=>{\n                          if(measureB && colorScaleB){\n                            const cur = dataBar[measureB][geo.properties.COUNTYFP];\n                            setTooltipContent(cur?(Math.round(cur*100)/100):'');\n                          }\n                        }}\n                        onMouseLeave={()=>{\n                          setTooltipContent(\"\")\n                        }}\n                        fill = {(measureB && colorScaleB && dataBar[measureB][geo.properties.COUNTYFP])?\n                                colorScaleB[dataBar[measureB][geo.properties.COUNTYFP]] : \"#EEE\"}\n                      />\n                    )}\n                  </Geographies>\n                </ComposableMap>\n                <ReactTooltip>{tooltipContent}</ReactTooltip>\n              </Grid.Column>\n            </Grid.Row>  \n          </Grid>\n          }\n          <Notes />\n        </Container>\n\n      </div>\n    );\n\n}","// React\nimport React from \"react\";\n// Components & Hooks\nimport USMap from \"./USMap\";\nimport StateMap from \"./StateMap\";\nimport CountyReport from \"./CountyReport\";\nimport CountyCompare from \"./CountyCompare\";\nimport 'semantic-ui-css/semantic.min.css'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\n\nApp.propTypes = {};\nexport default function App() {\n\n  return (\n      <Router>\n        <Switch>\n          <Route path='/emory-covid19/compare-counties'>\n            <CountyCompare />\n          </Route>\n          <Route path='/emory-covid19/:stateFips/:countyFips'>\n            <CountyReport />\n          </Route>  \n          <Route path='/emory-covid19/:stateFips'>\n            <StateMap />\n          </Route>\n          <Route path='/emory-covid19'>\n            <USMap />\n          </Route>\n          <Route path=\"*\">\n            <Redirect to='/emory-covid19/'/>\n          </Route>\n        </Switch>\n      </Router>\n  );\n}\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}